#!/usr/bin/env python3
"""
Test script for Smart Proxy Rotation Manager
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import time
import random
from core.proxy.smart_rotation_manager import (
    SmartProxyRotationManager, 
    ProxyStats, 
    CaptchaType, 
    ProxyQuality,
    EnhancedProxyManager
)
from core.proxy.integration_helper import ProxyIntegrationHelper, ProxyAwareMultiTransferAutomation


async def test_smart_rotation_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏"""
    print("üß™ Testing Smart Proxy Rotation Manager")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = SmartProxyRotationManager()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    mock_proxies = [
        {
            'ip': '1.2.3.4',
            'port': '8080',
            'user': 'user1',
            'pass': 'pass1',
            'country': 'ru'
        },
        {
            'ip': '5.6.7.8', 
            'port': '8080',
            'user': 'user2',
            'pass': 'pass2',
            'country': 'ru'
        },
        {
            'ip': '9.10.11.12',
            'port': '8080', 
            'user': 'user3',
            'pass': 'pass3',
            'country': 'ru'
        }
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
    await manager.load_proxies_from_provider(mock_proxies)
    print(f"‚úÖ Loaded {len(manager.active_proxies)} proxies")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–∫—Å–∏
    context = {
        'target_country': 'tj',
        'amount': 10000,
        'time_of_day': 'day'
    }
    
    print("\nüéØ Testing proxy selection...")
    for i in range(5):
        proxy = await manager.get_optimal_proxy(context)
        if proxy:
            print(f"  Selected: {proxy.ip}:{proxy.port} (quality: {proxy.quality_level.value})")
        else:
            print("  No proxy available")
    
    return manager


async def test_learning_algorithm():
    """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüß† Testing Learning Algorithm")
    print("=" * 50)
    
    manager = await test_smart_rotation_basic()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    scenarios = [
        # –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏ (8% –∫–∞–ø—á–∏)
        (0, True, CaptchaType.NONE, 2.5),
        (0, True, CaptchaType.NONE, 3.0),
        (0, True, CaptchaType.NONE, 2.8),
        (0, True, CaptchaType.NONE, 3.2),
        (0, True, CaptchaType.SIMPLE, 4.0),
        (0, True, CaptchaType.NONE, 2.9),
        (0, True, CaptchaType.NONE, 3.1),
        (0, True, CaptchaType.NONE, 2.7),
        (0, True, CaptchaType.NONE, 3.5),
        (0, True, CaptchaType.NONE, 3.0),
        (0, True, CaptchaType.NONE, 2.6),
        (0, True, CaptchaType.SIMPLE, 4.2),
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∫—Å–∏ (60% –∫–∞–ø—á–∏) - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å POOR
        (1, True, CaptchaType.NONE, 5.0),
        (1, True, CaptchaType.PUZZLE, 8.0),
        (1, True, CaptchaType.SIMPLE, 6.0),
        (1, True, CaptchaType.COMPLEX, 12.0),
        (1, True, CaptchaType.NONE, 4.5),
        (1, True, CaptchaType.PUZZLE, 9.0),
        (1, True, CaptchaType.SIMPLE, 7.0),
        (1, True, CaptchaType.COMPLEX, 11.0),
        (1, True, CaptchaType.PUZZLE, 8.5),
        (1, True, CaptchaType.SIMPLE, 6.5),
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–æ–∫—Å–∏ (60% –∫–∞–ø—á–∏) - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å POOR  
        (2, True, CaptchaType.NONE, 5.5),
        (2, True, CaptchaType.PUZZLE, 9.0),
        (2, True, CaptchaType.SIMPLE, 6.5),
        (2, True, CaptchaType.COMPLEX, 13.0),
        (2, True, CaptchaType.NONE, 5.0),
        (2, True, CaptchaType.PUZZLE, 8.5),
        (2, True, CaptchaType.SIMPLE, 7.5),
        (2, True, CaptchaType.COMPLEX, 12.0),
        (2, True, CaptchaType.PUZZLE, 9.5),
        (2, True, CaptchaType.SIMPLE, 6.8),
    ]
    
    print("üìä Simulating usage scenarios...")
    for proxy_idx, success, captcha_type, response_time in scenarios:
        proxy = manager.active_proxies[proxy_idx]
        await manager.record_session_result(proxy, success, captcha_type, response_time)
        print(f"  {proxy.ip}: success={success}, captcha={captcha_type.value}, time={response_time}s")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Ä–µ–π—Ç–∏–Ω–≥–∏
    print("\nüìà Proxy quality after learning:")
    for proxy in sorted(manager.active_proxies, key=lambda p: p.quality_score, reverse=True):
        print(f"  {proxy.ip}:{proxy.port} - Quality: {proxy.quality_level.value} "
              f"(score: {proxy.quality_score:.1f}, captcha rate: {proxy.captcha_rate:.1%})")
    
    return manager


async def test_strategy_adaptation():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    print("\nüîÑ Testing Strategy Adaptation")
    print("=" * 50)
    
    manager = await test_learning_algorithm()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Å–æ–∫—É—é —á–∞—Å—Ç–æ—Ç—É –∫–∞–ø—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print("‚ö†Ô∏è Simulating high captcha rate...")
    
    for _ in range(10):
        proxy = await manager.get_optimal_proxy()
        if proxy:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–ø—á—É –≤ 30% —Å–ª—É—á–∞–µ–≤ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)
            has_captcha = random.random() < 0.30
            captcha_type = random.choice([CaptchaType.PUZZLE, CaptchaType.COMPLEX]) if has_captcha else CaptchaType.NONE
            success = not has_captcha or random.random() < 0.7  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö –ø—Ä–∏ –∫–∞–ø—á–µ
            
            await manager.record_session_result(proxy, success, captcha_type, random.uniform(5, 15))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    print(f"Current strategy: {manager.current_strategy}")
    print(f"Recent captcha rate: {manager._calculate_recent_captcha_rate():.1%}")
    
    return manager


async def test_analytics_report():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\nüìä Testing Analytics Report")
    print("=" * 50)
    
    manager = await test_strategy_adaptation()
    
    report = manager.get_analytics_report()
    
    print("üìà Analytics Report:")
    print(f"  Overview: {report['overview']}")
    print(f"  Performance: {report['performance']}")
    print(f"  Quality Distribution: {report['quality_distribution']}")
    print(f"  Top Performers:")
    for performer in report['top_performers']:
        print(f"    - {performer}")


async def test_integration_helper():
    """–¢–µ—Å—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîß Testing Integration Helper")
    print("=" * 50)
    
    helper = ProxyIntegrationHelper()
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–∞–ø—á–∏
    test_pages = [
        ('<html><div class="g-recaptcha">test</div></html>', 'https://example.com', CaptchaType.RECAPTCHA),
        ('<html><div>puzzle verification</div></html>', 'https://example.com', CaptchaType.PUZZLE),
        ('<html><input type="text" placeholder="captcha"></html>', 'https://example.com', CaptchaType.SIMPLE),
        ('<html><h1>Welcome</h1></html>', 'https://example.com', CaptchaType.NONE),
    ]
    
    print("üîç Testing captcha detection:")
    for html, url, expected in test_pages:
        detected = helper.detect_captcha_type(html, url)
        status = "‚úÖ" if detected == expected else "‚ùå"
        print(f"  {status} Expected: {expected.value}, Got: {detected.value}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_data = {'id': 123, 'successful_payments': 5}
    payment_data = {'amount': 25000, 'recipient_country': 'kg', 'currency': 'KGS', 'hour': 14}
    
    context = helper.create_session_context(user_data, payment_data)
    print(f"üìù Session context: {context}")
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–∞
    test_errors = [
        ("Connection timeout", 1, True),
        ("Invalid captcha", 1, False),
        ("Network error", 3, False),  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫
        ("Proxy blocked", 2, True),
    ]
    
    print("üîÑ Testing retry logic:")
    for error, attempt, expected in test_errors:
        should_retry = helper.should_retry_with_new_proxy(error, attempt)
        status = "‚úÖ" if should_retry == expected else "‚ùå"
        print(f"  {status} '{error}' (attempt {attempt}): should_retry={should_retry}")


async def test_enhanced_proxy_manager():
    """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏"""
    print("\nüöÄ Testing Enhanced Proxy Manager")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        'proxy': {
            'api_key': 'test_key',  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á
            'country': 'ru'
        }
    }
    
    manager = EnhancedProxyManager(config)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API)
    print("üîß Simulating enhanced manager initialization...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —É–º–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é
    test_proxies = [
        {'ip': '192.168.1.1', 'port': '8080', 'user': 'test1', 'pass': 'pass1', 'country': 'ru'},
        {'ip': '192.168.1.2', 'port': '8080', 'user': 'test2', 'pass': 'pass2', 'country': 'ru'},
    ]
    
    await manager.smart_rotation.load_proxies_from_provider(test_proxies)
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
    context = {'target_country': 'tj', 'amount': 15000}
    proxy = await manager.get_optimal_proxy(context)
    
    if proxy:
        print(f"‚úÖ Got optimal proxy: {proxy['ip']}:{proxy['port']}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await manager.record_result(
            proxy=proxy, 
            success=True, 
            captcha_encountered=False, 
            response_time=3.5
        )
        print("‚úÖ Recorded successful usage")
    else:
        print("‚ùå No proxy available")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    analytics = manager.get_analytics()
    print(f"üìä Analytics: {analytics}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ SMART PROXY ROTATION MANAGER TESTS")
    print("=" * 60)
    
    try:
        await test_smart_rotation_basic()
        await test_learning_algorithm()
        await test_strategy_adaptation()
        await test_analytics_report()
        await test_integration_helper()
        await test_enhanced_proxy_manager()
        
        print("\nüéâ ALL TESTS COMPLETED SUCCESSFULLY!")
        
    except Exception as e:
        print(f"\n‚ùå TEST FAILED: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())