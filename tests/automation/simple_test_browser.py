#!/usr/bin/env python3
"""
Simple browser test without config dependencies
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from web.browser.manager import BrowserManager
from selenium.webdriver.common.by import By

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_test_config():
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        'browser': {
            'headless': True,
            'window_size': '1920,1080',
            'page_load_timeout': 30,
            'implicit_wait': 10,
            'user_agents': [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            ]
        }
    }

async def test_basic_browser():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    logger.info("üß™ Testing basic browser functionality...")
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = get_test_config()
        
        # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä –ë–ï–ó –ø—Ä–æ–∫—Å–∏
        browser_manager = BrowserManager(config, proxy_manager=None)
        
        async with browser_manager:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –ø—Ä—è–º–æ–º —Ä–µ–∂–∏–º–µ
            success = await browser_manager.start_browser(use_proxy=False)
            if not success:
                logger.error("‚ùå Failed to start browser")
                return False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç
            logger.info("üåê Testing navigation to httpbin.org...")
            success = await browser_manager.navigate_to_url("https://httpbin.org/ip")
            if not success:
                logger.error("‚ùå Failed to navigate to httpbin.org")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            page_source = await browser_manager.get_page_source()
            if "origin" in page_source.lower():
                logger.info("‚úÖ Browser navigation works!")
                return True
            else:
                logger.error("‚ùå Navigation failed - no expected content")
                return False
            
    except Exception as e:
        logger.error(f"‚ùå Browser test failed: {e}")
        return False

async def test_multitransfer_site():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ multitransfer.ru"""
    logger.info("üß™ Testing MultiTransfer site access...")
    
    try:
        config = get_test_config()
        browser_manager = BrowserManager(config, proxy_manager=None)
        
        async with browser_manager:
            success = await browser_manager.start_browser(use_proxy=False)
            if not success:
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É
            logger.info("üåê Navigating to multitransfer.ru...")
            success = await browser_manager.navigate_to_url("https://multitransfer.ru")
            
            if success:
                logger.info("‚úÖ Successfully reached multitransfer.ru")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(5)
                
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                logger.info("ÔøΩÔøΩ Searching for form elements...")
                
                # –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
                amount_elements = await browser_manager.find_elements_safe(
                    By.XPATH, 
                    "//input[@type='text' or @type='number']"
                )
                logger.info(f"üí∞ Found {len(amount_elements)} input fields")
                
                # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                buttons = await browser_manager.find_elements_safe(
                    By.XPATH, 
                    "//button"
                )
                logger.info(f"üîò Found {len(buttons)} buttons")
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                await browser_manager.take_screenshot("multitransfer_page.png")
                logger.info("üì∏ Screenshot saved as multitransfer_page.png")
                
                return True
            else:
                logger.error("‚ùå Failed to reach multitransfer.ru")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå MultiTransfer site test failed: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ Starting simplified browser tests...")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
    test1_result = await test_basic_browser()
    logger.info(f"üìä Basic browser test: {'‚úÖ PASSED' if test1_result else '‚ùå FAILED'}")
    
    # –¢–µ—Å—Ç 2: –î–æ—Å—Ç—É–ø –∫ MultiTransfer
    test2_result = await test_multitransfer_site()
    logger.info(f"üìä MultiTransfer site test: {'‚úÖ PASSED' if test2_result else '‚ùå FAILED'}")
    
    if test1_result and test2_result:
        logger.info("üéâ ALL TESTS PASSED - Ready for automation!")
        logger.info("üìã Next steps:")
        logger.info("   1. Browser works correctly")
        logger.info("   2. Can access multitransfer.ru")
        logger.info("   3. Form elements are detectable")
        logger.info("   4. Ready to implement form automation")
        return True
    else:
        logger.error("üí• SOME TESTS FAILED - Need investigation")
        return False

if __name__ == "__main__":
    asyncio.run(main())
