#!/usr/bin/env python3
"""
Complete automation test with currency and transfer method selection
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã –∏ —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
"""

import asyncio
import logging
import random
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from web.browser.manager import BrowserManager
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from core.proxy.manager import ProxyManager
from core.config import Config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_test_config():
    return {
        'browser': {
            'headless': False,
            'window_size': '1920,1080',
            'page_load_timeout': 30,
            'implicit_wait': 10,
            'user_agents': [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            ]
        }
    }

async def human_type_text(browser_manager, element, text, min_delay=0.05, max_delay=0.2):
    """–ß–µ–ª–æ–≤–µ—á–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
    try:
        element.clear()
        await asyncio.sleep(random.uniform(0.1, 0.3))
        
        logger.info(f"üñäÔ∏è Typing '{text}' character by character...")
        
        for char in text:
            element.send_keys(char)
            delay = random.uniform(min_delay, max_delay)
            await asyncio.sleep(delay)
        
        await asyncio.sleep(random.uniform(0.2, 0.5))
        logger.info(f"‚úÖ Finished typing '{text}'")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to type '{text}': {e}")
        return False

async def test_complete_flow():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    logger.info("üîç Testing COMPLETE automation flow...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–∫—Å–∏
    config_obj = Config()
    test_config = get_test_config()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å SSH —Ç—É–Ω–Ω–µ–ª–µ–º
    proxy_manager = ProxyManager(config_obj.data)
    
    browser_manager = BrowserManager(test_config, proxy_manager=proxy_manager)
    
    async with browser_manager:
        # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSH —Ç—É–Ω–Ω–µ–ª—è!
        success = await browser_manager.start_browser(use_proxy=True)
        if not success:
            return False
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
        success = await browser_manager.navigate_to_url("https://multitransfer.ru")
        if not success:
            return False
        
        await asyncio.sleep(random.uniform(3, 5))
        
        # –®–∞–≥ 1: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ"
        logger.info("üìç Step 1: Click '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ'")
        
        all_buttons = await browser_manager.find_elements_safe(By.TAG_NAME, "button")
        button_clicked = False
        
        for i, btn in enumerate(all_buttons):
            try:
                text = await browser_manager.get_element_text(btn)
                if "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" in text:
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    if await browser_manager.click_element_safe(btn):
                        logger.info(f"‚úÖ Successfully clicked button {i}")
                        button_clicked = True
                        break
            except:
                pass
        
        if not button_clicked:
            logger.error("‚ùå Could not click '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ'")
            return False
        
        await asyncio.sleep(random.uniform(3, 5))
        await browser_manager.take_screenshot("step1_modal_opened.png")
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞
        logger.info("ÔøΩÔøΩ Step 2: Select Tajikistan")
        
        tajikistan_clicked = False
        tajikistan_elements = await browser_manager.find_elements_safe(
            By.XPATH, 
            "//span[text()='–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω']/parent::div"
        )
        
        for element in tajikistan_elements:
            try:
                if element.is_displayed():
                    await asyncio.sleep(random.uniform(0.3, 0.7))
                    browser_manager.driver.execute_script("arguments[0].scrollIntoView(true);", element)
                    await asyncio.sleep(0.3)
                    
                    if await browser_manager.click_element_safe(element):
                        logger.info("‚úÖ Successfully clicked Tajikistan")
                        tajikistan_clicked = True
                        break
                    else:
                        browser_manager.driver.execute_script("arguments[0].click();", element)
                        logger.info("‚úÖ Successfully clicked Tajikistan via JavaScript")
                        tajikistan_clicked = True
                        break
            except:
                pass
        
        if not tajikistan_clicked:
            logger.error("‚ùå Could not select Tajikistan")
            return False
        
        await asyncio.sleep(random.uniform(3, 5))
        await browser_manager.take_screenshot("step2_country_selected.png")
        
        # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º—ã
        logger.info("üìç Step 3: Fill amount")
        
        amount_inputs = await browser_manager.find_elements_safe(By.XPATH, "//input[contains(@placeholder, 'RUB')]")
        
        amount_filled = False
        for inp in amount_inputs:
            try:
                if inp.is_displayed() and inp.is_enabled():
                    logger.info("üéØ Filling amount field")
                    success = await human_type_text(browser_manager, inp, "1000", 0.1, 0.3)
                    if success:
                        logger.info("‚úÖ Amount filled successfully")
                        amount_filled = True
                        break
            except:
                pass
        
        if not amount_filled:
            logger.error("‚ùå Could not fill amount")
            return False
        
        await asyncio.sleep(3)
        await browser_manager.take_screenshot("step3_amount_filled.png")
        
        # –®–∞–≥ 4: –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã TJS
        logger.info("üìç Step 4: Select TJS currency")
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É TJS –≤ —Ä–∞–∑–¥–µ–ª–µ –≤–∞–ª—é—Ç
        tjs_selectors = [
            "//button[contains(text(), 'TJS')]",
            "//div[contains(text(), 'TJS')]",
            "//*[contains(@class, 'currency') and contains(text(), 'TJS')]",
            "//*[text()='TJS']"
        ]
        
        tjs_selected = False
        for selector in tjs_selectors:
            elements = await browser_manager.find_elements_safe(By.XPATH, selector)
            logger.info(f"Found {len(elements)} TJS elements with selector: {selector}")
            
            for element in elements:
                try:
                    if element.is_displayed() and element.is_enabled():
                        logger.info("üéØ Clicking TJS currency button")
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        
                        if await browser_manager.click_element_safe(element):
                            logger.info("‚úÖ Successfully selected TJS currency")
                            tjs_selected = True
                            break
                        else:
                            browser_manager.driver.execute_script("arguments[0].click();", element)
                            logger.info("‚úÖ Successfully selected TJS currency via JavaScript")
                            tjs_selected = True
                            break
                except Exception as e:
                    logger.debug(f"TJS element click failed: {e}")
                    continue
            
            if tjs_selected:
                break
        
        if not tjs_selected:
            logger.warning("‚ö†Ô∏è Could not select TJS currency, continuing...")
        
        await asyncio.sleep(3)
        await browser_manager.take_screenshot("step4_currency_selected.png")
        
        # –®–∞–≥ 5: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ "–í—Å–µ –∫–∞—Ä—Ç—ã"
        logger.info("üìç Step 5: Select '–í—Å–µ –∫–∞—Ä—Ç—ã' transfer method")
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º dropdown –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        transfer_method_selectors = [
            "//div[contains(text(), '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞')]//following-sibling::*",
            "//div[contains(text(), '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞')]//parent::*//div[contains(@class, 'dropdown') or contains(@class, 'select')]",
            "//div[contains(@class, 'transfer-method') or contains(@class, 'method')]",
            "//*[contains(text(), '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±') or contains(text(), '—Å–ø–æ—Å–æ–±')]"
        ]
        
        method_dropdown_clicked = False
        for selector in transfer_method_selectors:
            elements = await browser_manager.find_elements_safe(By.XPATH, selector)
            logger.info(f"Found {len(elements)} transfer method elements with selector: {selector}")
            
            for element in elements:
                try:
                    if element.is_displayed():
                        logger.info("üéØ Clicking transfer method dropdown")
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        
                        if await browser_manager.click_element_safe(element):
                            logger.info("‚úÖ Successfully clicked transfer method dropdown")
                            method_dropdown_clicked = True
                            break
                        else:
                            browser_manager.driver.execute_script("arguments[0].click();", element)
                            logger.info("‚úÖ Successfully clicked transfer method dropdown via JavaScript")
                            method_dropdown_clicked = True
                            break
                except:
                    continue
            
            if method_dropdown_clicked:
                break
        
        await asyncio.sleep(3)
        await browser_manager.take_screenshot("step5_transfer_method_dropdown.png")
        
        # –¢–µ–ø–µ—Ä—å –∏—â–µ–º "–í—Å–µ –∫–∞—Ä—Ç—ã" –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è —Å–ø–∏—Å–∫–µ
        vse_karty_selectors = [
            "//*[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
            "//div[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
            "//span[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
            "//li[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
            "//*[contains(@class, 'option') and contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]"
        ]
        
        vse_karty_selected = False
        for selector in vse_karty_selectors:
            elements = await browser_manager.find_elements_safe(By.XPATH, selector)
            logger.info(f"Found {len(elements)} –í—Å–µ –∫–∞—Ä—Ç—ã elements with selector: {selector}")
            
            for element in elements:
                try:
                    if element.is_displayed():
                        logger.info("üéØ Clicking –í—Å–µ –∫–∞—Ä—Ç—ã option")
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        
                        browser_manager.driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        await asyncio.sleep(0.3)
                        
                        if await browser_manager.click_element_safe(element):
                            logger.info("‚úÖ Successfully selected –í—Å–µ –∫–∞—Ä—Ç—ã")
                            vse_karty_selected = True
                            break
                        else:
                            browser_manager.driver.execute_script("arguments[0].click();", element)
                            logger.info("‚úÖ Successfully selected –í—Å–µ –∫–∞—Ä—Ç—ã via JavaScript")
                            vse_karty_selected = True
                            break
                except Exception as e:
                    logger.debug(f"Korti Milli element click failed: {e}")
                    continue
            
            if vse_karty_selected:
                break
        
        if not vse_karty_selected:
            logger.warning("‚ö†Ô∏è Could not select –í—Å–µ –∫–∞—Ä—Ç—ã, continuing...")
        
        await asyncio.sleep(3)
        await browser_manager.take_screenshot("step5_method_selected.png")
        
        # –®–∞–≥ 6: –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨"
        logger.info("üìç Step 6: Click '–ü–†–û–î–û–õ–ñ–ò–¢–¨' button")
        
        continue_buttons = await browser_manager.find_elements_safe(By.TAG_NAME, "button")
        continue_clicked = False
        
        for i, btn in enumerate(continue_buttons):
            try:
                text = await browser_manager.get_element_text(btn)
                if text and "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in text.upper():
                    logger.info(f"ÔøΩÔøΩ Found continue button: '{text}'")
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    
                    if await browser_manager.click_element_safe(btn):
                        logger.info(f"‚úÖ Successfully clicked continue button")
                        continue_clicked = True
                        break
            except:
                pass
        
        if not continue_clicked:
            logger.warning("‚ö†Ô∏è Could not find continue button")
        
        await asyncio.sleep(5)
        await browser_manager.take_screenshot("final_complete_result.png")
        
        logger.info("‚úÖ Complete automation flow finished!")
        return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ Starting COMPLETE automation test...")
    
    result = await test_complete_flow()
    logger.info(f"üìä Complete test: {'‚úÖ PASSED' if result else '‚ùå FAILED'}")
    
    if result:
        logger.info("üéâ COMPLETE AUTOMATION PASSED!")
        logger.info("üìã Completed steps:")
        logger.info("   ‚úÖ 1. Clicked '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ'")
        logger.info("   ‚úÖ 2. Selected Tajikistan")
        logger.info("   ‚úÖ 3. Filled amount (1000 RUB)")
        logger.info("   ‚úÖ 4. Selected TJS currency")
        logger.info("   ‚úÖ 5. Selected –í—Å–µ –∫–∞—Ä—Ç—ã method")
        logger.info("   ‚úÖ 6. Clicked continue")
        logger.info("   üéØ Ready for Telegram bot integration!")
    else:
        logger.error("üí• COMPLETE AUTOMATION FAILED")
    
    return result

if __name__ == "__main__":
    asyncio.run(main())
