"""
MultiTransfer Telegram Bot
Main application entry point
"""

import asyncio
import logging
import sys
from pathlib import Path

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# Core imports
from core.config import get_config
from core.database.connection import AsyncSessionLocal, engine, Base
from core.database.repositories import UserRepository, UserRequisitesRepository, PaymentHistoryRepository
from core.services.payment_service import PaymentService
from utils.validators import validate_card_number
from utils.exceptions import PaymentError

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/bot.log')
    ]
)

logger = logging.getLogger(__name__)

# FSM States
class RequisitesStates(StatesGroup):
    waiting_for_card = State()

# Global variables
config = None
storage = MemoryStorage()
bot = None
dp = Dispatcher(storage=storage)

def format_card_number(card_number: str) -> str:
    """Format card number with spaces"""
    clean = card_number.replace(' ', '').replace('-', '')
    return ' '.join([clean[i:i+4] for i in range(0, len(clean), 4)])

async def init_database():
    """Initialize database tables"""
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")
        raise

def get_countries_keyboard() -> InlineKeyboardMarkup:
    """Create inline keyboard for country selection"""
    buttons = [
        [InlineKeyboardButton(text="üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω", callback_data="country_tajikistan")],
        [InlineKeyboardButton(text="üá¨üá™ –ì—Ä—É–∑–∏—è", callback_data="country_georgia")],
        [InlineKeyboardButton(text="üá∞üá¨ –ö–∏—Ä–≥–∏–∑–∏—è", callback_data="country_kyrgyzstan")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_banks_keyboard(country: str) -> InlineKeyboardMarkup:
    """Create inline keyboard for bank selection based on country"""
    banks_data = {
        'tajikistan': [
            ('üè¶ –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏', 'bank_korti_milli'),
            ('üè¶ –ê–∑–∏–∑–∏-–ú–æ–ª–∏—è', 'bank_azizi_molia'),
            ('üè¶ –ë–∞–Ω–∫ –ê—Ä–≤–∞–Ω–¥', 'bank_bank_arvand'),
            ('üè¶ –≠—Å—Ö–∞—Ç–∞ –ë–∞–Ω–∫', 'bank_eskhata_bank')
        ],
        'georgia': [
            ('üè¶ Bank of Georgia', 'bank_bog_bank'),
            ('üè¶ TBC Bank', 'bank_tbc_bank')
        ],
        'kyrgyzstan': [
            ('üè¶ –û–ø—Ç–∏–º–∞ –ë–∞–Ω–∫', 'bank_optima_bank'),
            ('üè¶ –î–µ–º–∏—Ä –ë–∞–Ω–∫', 'bank_demir_bank')
        ]
    }
    
    buttons = []
    for bank_name, bank_code in banks_data.get(country, []):
        buttons.append([InlineKeyboardButton(text=bank_name, callback_data=bank_code)])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="back_to_countries")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """Handler for /start command"""
    user_name = message.from_user.full_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MultiTransfer Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ multitransfer.ru –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é  
/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞—à–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
/payment [—Å—É–º–º–∞] - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
/proxy - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤

<b>üöÄ –ù–∞—á–Ω–µ–º?</b>
–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /settings
    """
    
    await message.answer(welcome_text)
    logger.info(f"User {message.from_user.id} started the bot")

@dp.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    """Handler for /help command"""
    help_text = """
<b>üîß –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/start</code> - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ <code>/help</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ <code>/settings</code> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
‚Ä¢ <code>/payment [—Å—É–º–º–∞]</code> - —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
‚Ä¢ <code>/proxy</code> - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <code>/payment 5000</code> - –ø–ª–∞—Ç–µ–∂ –Ω–∞ 5000 —Ä—É–±–ª–µ–π
‚Ä¢ <code>/payment 1500</code> - –ø–ª–∞—Ç–µ–∂ –Ω–∞ 1500 —Ä—É–±–ª–µ–π

<b>üìù –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–ª–∞—Ç–µ–∂–æ–º:</b>
1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ <code>/settings</code>
2. –£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
3. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
4. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
5. –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏

<b>‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</b>
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –≤—Å–µ —Ñ–æ—Ä–º—ã –Ω–∞ —Å–∞–π—Ç–µ multitransfer.ru –∏ –≤–µ—Ä–Ω–µ—Ç –≤–∞–º QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã.

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞—â–∏—â–µ–Ω—ã.
    """
    await message.answer(help_text)

@dp.message(Command("proxy"))
async def command_proxy_handler(message: Message) -> None:
    """Handler for /proxy command"""
    try:
        logger.info(f"Proxy status command received from user {message.from_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º ProxyManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from core.proxy.manager import ProxyManager
        config_dict = config.to_dict()
        proxy_manager = ProxyManager(config_dict)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = proxy_manager.get_stats()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        try:
            proxy = await proxy_manager.get_proxy()
            proxy_info = ""
            if proxy:
                proxy_info = f"""
üåê <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫—Å–∏:</b>
‚Ä¢ IP: <code>{proxy['ip']}:{proxy['port']}</code>
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: {proxy.get('country', 'N/A')}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{proxy.get('user', 'N/A')}</code>
"""
            else:
                proxy_info = "\n‚ö†Ô∏è <b>–ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b> - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ø—Ä—è–º–æ–º —Ä–µ–∂–∏–º–µ"
        except Exception as e:
            proxy_info = f"\n‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:</b> {str(e)}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        proxy_text = f"""
üåê <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {stats['total_proxies']}
‚Ä¢ –†–∞–±–æ—á–∏—Ö: {stats['working_proxies']}
‚Ä¢ –°–ª–æ–º–∞–Ω–Ω—ã—Ö: {stats['failed_proxies']}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}
‚Ä¢ –†–µ–∂–∏–º: {'üåê –ü—Ä–æ–∫—Å–∏' if stats['enabled'] else 'üîí –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'}
‚Ä¢ API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if stats['api_key_configured'] else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update'] or '–ù–∏–∫–æ–≥–¥–∞'}
{proxy_info}

üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b> –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ Proxy6.net –∏ –∫—É–ø–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏.
"""
        
        await message.answer(proxy_text)
        
    except Exception as e:
        logger.error(f"Error in proxy command: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@dp.message(Command("settings"))
async def command_settings_handler(message: Message, state: FSMContext) -> None:
    """Handler for /settings command"""
    logger.info(f"Settings command received from user {message.from_user.id}")
    
    await state.clear()
    
    text = """
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>

–î–∞–≤–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.

<b>üìã –ß—Ç–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:</b>
‚Ä¢ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
‚Ä¢ –ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è

<b>üöÄ –ù–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>
    """
    
    await message.answer(text, reply_markup=get_countries_keyboard())

@dp.callback_query(F.data.startswith("country_"))
async def process_country_selection(callback: CallbackQuery, state: FSMContext):
    """Process country selection"""
    country_code = callback.data.split("_", 1)[1]
    
    await state.update_data(country=country_code)
        
    country_names = {
        'tajikistan': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω üáπüáØ',
        'georgia': '–ì—Ä—É–∑–∏—è üá¨üá™', 
        'kyrgyzstan': '–ö–∏—Ä–≥–∏–∑–∏—è üá∞üá¨'
    }
    
    country_name = country_names.get(country_code, country_code)
    
    text = f"""
<b>‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country_name}</b>

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
    """
    
    await callback.message.edit_text(text, reply_markup=get_banks_keyboard(country_code))
    await callback.answer()
    logger.info(f"User {callback.from_user.id} selected country: {country_code}")

@dp.callback_query(F.data.startswith("bank_"))
async def process_bank_selection(callback: CallbackQuery, state: FSMContext):
    """Process bank selection"""
    bank_code = callback.data.split("_", 1)[1]
    
    bank_names = {
        'korti_milli': '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏',
        'azizi_molia': '–ê–∑–∏–∑–∏-–ú–æ–ª–∏—è',
        'bank_arvand': '–ë–∞–Ω–∫ –ê—Ä–≤–∞–Ω–¥', 
        'eskhata_bank': '–≠—Å—Ö–∞—Ç–∞ –ë–∞–Ω–∫',
        'bog_bank': 'Bank of Georgia',
        'tbc_bank': 'TBC Bank',
        'optima_bank': '–û–ø—Ç–∏–º–∞ –ë–∞–Ω–∫',
        'demir_bank': '–î–µ–º–∏—Ä –ë–∞–Ω–∫'
    }
    
    bank_name = bank_names.get(bank_code, bank_code)
    
    user_data = await state.get_data()
    await state.update_data(
        country=user_data.get('country'),
        bank=bank_code,
        bank_name=bank_name
    )
    
    text = f"""
<b>‚úÖ –í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank_name}</b>

<b>üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b>

–ü—Ä–∏–º–µ—Ä: 1234 5678 9012 3456
(–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –±–µ–∑)

<b>üìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π 16-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä!</b>
    """
    
    await callback.message.edit_text(text)
    await callback.answer()
    await state.set_state(RequisitesStates.waiting_for_card)
    logger.info(f"User {callback.from_user.id} selected bank: {bank_code}")

@dp.callback_query(F.data == "back_to_countries")
async def back_to_countries(callback: CallbackQuery, state: FSMContext):
    """Back to country selection"""
    await state.clear()
    
    text = """
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>

<b>üöÄ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>
    """
    
    await callback.message.edit_text(text, reply_markup=get_countries_keyboard())
    await callback.answer()

@dp.message(RequisitesStates.waiting_for_card)
async def process_card_number(message: Message, state: FSMContext):
    """Process card number input"""
    try:
        logger.info(f"üîÑ Processing card number for user {message.from_user.id}")
        
        # Validate card number
        if not validate_card_number(message.text):
            logger.warning(f"‚ùå Invalid card format: {message.text}")
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã!</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–∑ 16 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä: 1234 5678 9012 3456"
            )
            return
        
        # Format card number
        formatted_card = format_card_number(message.text)
        logger.info(f"‚úÖ Card formatted: {formatted_card}")
        
        # Get user data from state
        user_data = await state.get_data()
        country = user_data.get('country', 'unknown')
        bank = user_data.get('bank', 'unknown')
        bank_name = user_data.get('bank_name', 'Unknown')
        
        logger.info(f"üìã User data: country={country}, bank={bank}")
        
        # Save to database using new async repository
        async with AsyncSessionLocal() as session:
            try:
                # Create/get user
                user_repo = UserRepository(session)
                user = await user_repo.get_or_create_user(
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name
                )
                
                # Save requisites
                requisites_repo = UserRequisitesRepository(session)
                success = await requisites_repo.upsert_requisites(
                    user_id=message.from_user.id,
                    recipient_card=formatted_card,
                    country=country,
                    bank=bank
                )
                
                if success:
                    country_names = {
                        'tajikistan': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω üáπüáØ',
                        'georgia': '–ì—Ä—É–∑–∏—è üá¨üá™', 
                        'kyrgyzstan': '–ö–∏—Ä–≥–∏–∑–∏—è üá∞üá¨'
                    }
                    country_display = country_names.get(country, country.title())
                    
                    confirmation_text = f"""
‚úÖ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>

<b>üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: <code>{country_display}</code>
‚Ä¢ –ë–∞–Ω–∫: <code>{bank_name}</code>
‚Ä¢ –ö–∞—Ä—Ç–∞: <code>{formatted_card}</code>

<b>üéâ –û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –∫–æ–º–∞–Ω–¥–æ–π:

<code>/payment [—Å—É–º–º–∞]</code>

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>/payment 5000</code> - –ø–ª–∞—Ç–µ–∂ –Ω–∞ 5000 —Ä—É–±–ª–µ–π
‚Ä¢ <code>/payment 1500</code> - –ø–ª–∞—Ç–µ–∂ –Ω–∞ 1500 —Ä—É–±–ª–µ–π

<b>‚ö° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b>
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!
                    """
                    
                    await message.answer(confirmation_text)
                    await state.clear()
                    
                    logger.info(f"‚úÖ User {message.from_user.id} requisites saved successfully")
                else:
                    logger.error(f"‚ùå Failed to save requisites for user {message.from_user.id}")
                    await message.answer(
                        "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!</b>\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    
            except Exception as db_error:
                logger.error(f"üí• Database error: {db_error}")
                await message.answer(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
                    f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(db_error)}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                
    except Exception as e:
        logger.error(f"üí• Critical error in process_card_number: {e}")
        await message.answer(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!</b>\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        await state.clear()

@dp.message(Command("payment"))
async def command_payment_handler(message: Message) -> None:
    """Handler for /payment command"""
    try:
        # Parse amount from command
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞!</b>\n\n"
                "<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
                "<code>/payment [—Å—É–º–º–∞]</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "‚Ä¢ <code>/payment 5000</code>\n"
                "‚Ä¢ <code>/payment 1500</code>"
            )
            return
        
        try:
            amount = float(command_parts[1])
            if amount <= 0:
                raise ValueError("Amount must be positive")
        except ValueError:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/payment 5000</code>"
            )
            return
        
        # Check limits
        min_amount = 300
        max_amount = 120000
        
        if amount < min_amount:
            await message.answer(
                f"‚ùå <b>–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞!</b>\n\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <code>{min_amount}</code> —Ä—É–±–ª–µ–π"
            )
            return
            
        if amount > max_amount:
            await message.answer(
                f"‚ùå <b>–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞!</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: <code>{max_amount}</code> —Ä—É–±–ª–µ–π"
            )
            return
        
        # Check user requisites
        async with AsyncSessionLocal() as session:
            user_repo = UserRepository(session)
            user_requisites = await user_repo.get_user_requisites(message.from_user.id)
            
            if not user_requisites:
                await message.answer(
                    "‚ùå <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /settings"
                )
                return
            
            country_names = {
                'tajikistan': '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω üáπüáØ',
                'georgia': '–ì—Ä—É–∑–∏—è üá¨üá™', 
                'kyrgyzstan': '–ö–∏—Ä–≥–∏–∑–∏—è üá∞üá¨'
            }
            country_display = country_names.get(user_requisites.country, user_requisites.country.title())
            
            # Show processing message
            processing_text = f"""
üîÑ <b>–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount:,.0f} —Ä—É–±–ª–µ–π...</b>

<b>üìã –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>
‚Ä¢ –°—Ç—Ä–∞–Ω–∞: <code>{country_display}</code>
‚Ä¢ –ë–∞–Ω–∫: <code>{user_requisites.bank}</code>
‚Ä¢ –ö–∞—Ä—Ç–∞: <code>{user_requisites.recipient_card}</code>

<b>ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é...</b>
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–µ–º multitransfer.ru
‚Ä¢ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏  
‚Ä¢ –û–±—Ö–æ–¥–∏–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
‚Ä¢ –ü–æ–ª—É—á–∞–µ–º QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã

<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...</i>
            """
            
            processing_message = await message.answer(processing_text)
            
            try:
                logger.info(f"üöÄ Starting payment automation for user {message.from_user.id}")
                
                # Create payment using PaymentService
                payment_service = PaymentService(session)
                result = await payment_service.create_payment(
                    user_id=message.from_user.id,
                    amount=amount,
                    currency_from="RUB",
                    currency_to="TJS"
                )
                
                if result['status'] == 'success':
                    # SUCCESS - Payment created!
                    success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

<b>üí∞ –°—É–º–º–∞:</b> {amount:,.0f} —Ä—É–±–ª–µ–π
<b>üè¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {country_display}, {user_requisites.bank}
<b>üí≥ –ö–∞—Ä—Ç–∞:</b> {user_requisites.recipient_card}

<b>üéØ –î–ª—è –æ–ø–ª–∞—Ç—ã:</b>"""
                    
                    # Add QR code if available
                    if result.get('qr_code_url'):
                        success_text += f"\nüì± <a href=\"{result['qr_code_url']}\">QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>"
                    
                    # Add payment URL if available
                    if result.get('payment_url'):
                        success_text += f"\nüîó <a href=\"{result['payment_url']}\">–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>"
                    
                    # Add payment ID if available
                    if result.get('payment_id'):
                        success_text += f"\n\n<b>üìã ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{result['payment_id']}</code>"
                    
                    success_text += f"\n\n<b>‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {result.get('processing_time', 0):.1f} —Å–µ–∫"
                    success_text += f"\n<b>üë§ –ü–∞—Å–ø–æ—Ä—Ç:</b> {result.get('passport_used', 'N/A')}"
                    success_text += "\n\n<b>üí° –°–æ–≤–µ—Ç:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ QR-–∫–æ–¥ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!"
                    
                    await processing_message.edit_text(success_text, disable_web_page_preview=False)
                    logger.info(f"‚úÖ Payment successful for user {message.from_user.id}")
                    
                else:
                    # FAILURE - Show error
                    error_text = f"""
‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂</b>

<b>üí∞ –°—É–º–º–∞:</b> {amount:,.0f} —Ä—É–±–ª–µ–π
<b>üè¶ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {country_display}, {user_requisites.bank}

<b>üî• –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏:</b>
<code>{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</code>

<b>üîÑ –ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ (/settings)
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è

<b>‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏:</b> {result.get('processing_time', 0):.1f} —Å–µ–∫
                    """
                    
                    await processing_message.edit_text(error_text)
                    logger.error(f"‚ùå Payment failed for user {message.from_user.id}: {result.get('error')}")
                    
            except PaymentError as payment_error:
                # Payment service error
                error_text = f"""
üí• <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>

<b>üí∞ –°—É–º–º–∞:</b> {amount:,.0f} —Ä—É–±–ª–µ–π

<b>üî• –û—à–∏–±–∫–∞:</b>
<code>{str(payment_error)}</code>

<b>üîÑ –î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–≤–æ–∑–º–æ–∂–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã)
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /settings
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö

<b>üåê –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç:</b>
<a href="https://multitransfer.ru">multitransfer.ru</a>
                """
                
                await processing_message.edit_text(error_text)
                logger.error(f"üí• Payment error: {payment_error}")
                
            except Exception as automation_error:
                # CRITICAL ERROR
                error_text = f"""
üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</b>

<b>üí∞ –°—É–º–º–∞:</b> {amount:,.0f} —Ä—É–±–ª–µ–π

<b>üî• –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>
<code>{str(automation_error)}</code>

<b>üîÑ –î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (–≤–æ–∑–º–æ–∂–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã)
‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—à–∏–±–∫–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Å–∞–π—Ç–µ

<b>üåê –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç:</b>
<a href="https://multitransfer.ru">multitransfer.ru</a>
                """
                
                await processing_message.edit_text(error_text)
                logger.error(f"üí• Critical automation error: {automation_error}")
        
        logger.info(f"Payment request completed: user {message.from_user.id}, amount {amount}")
        
    except Exception as e:
        logger.error(f"Error in payment handler: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

@dp.message()
async def echo_handler(message: Message) -> None:
    """Handler for all other messages"""
    if message.text:
        echo_text = f"""
–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: <i>{message.text}</i>

<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  
‚Ä¢ /payment [—Å—É–º–º–∞] - —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/payment 5000</code>
        """
        await message.answer(echo_text)

async def on_startup():
    """Actions to perform on bot startup"""
    logger.info("üöÄ Starting MultiTransfer Bot...")
    
    # Create necessary directories
    Path("data").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)
    Path("logs/automation").mkdir(exist_ok=True)
    
    # Initialize database
    await init_database()
    
    logger.info("‚úÖ Bot started successfully!")

async def on_shutdown():
    """Actions to perform on bot shutdown"""
    logger.info("üõë Shutting down MultiTransfer Bot...")
    await bot.session.close()

async def main() -> None:
    """Main function to run the bot"""
    global config, bot
    
    try:
        # Load configuration
        config = get_config()
        
        # Initialize bot
        bot = Bot(
            token=config.telegram['token'],
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML
            )
        )
        
        await on_startup()
        
        # Start polling
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Bot crashed with error: {e}")
        raise
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"üí• Failed to start bot: {e}")
        sys.exit(1)