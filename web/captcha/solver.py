"""
OPTIMIZED CAPTCHA Solver - Generic Priority with Fast Performance
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –∫–∞–ø—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Generic —Ç–∏–ø–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
"""

import logging
import asyncio
import aiohttp
import time
from typing import Dict, Optional, Any
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

logger = logging.getLogger(__name__)

class CaptchaSolver:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å –∫–∞–ø—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Generic —Ç–∏–ø–æ–≤"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        captcha_config = self.config.get('captcha', {})
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
        self.enabled = bool(captcha_config.get('api_key'))
        self.provider = captcha_config.get('provider', 'anti-captcha')
        self.api_key = captcha_config.get('api_key')
        
        # –ë–´–°–¢–†–´–ï –¢–ê–ô–ú–ê–£–¢–´ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.timeout = min(captcha_config.get('timeout', 30), 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫
        self.max_attempts = min(captcha_config.get('max_attempts', 2), 2)  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏
        self.generic_timeout = 15  # –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Generic
        
        # API URLs
        if self.provider == 'anti-captcha':
            self.base_url = "https://api.anti-captcha.com"
        else:
            self.base_url = "http://2captcha.com"
        
        if self.enabled:
            logger.info(f"üîê OPTIMIZED CaptchaSolver initialized: {self.provider} (timeout: {self.timeout}s)")
        else:
            logger.info("üîê CaptchaSolver disabled - no API key")
    
    async def solve_captcha(self, driver, max_attempts: int = None) -> bool:
        """
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Generic —Ç–∏–ø–æ–≤
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. Generic Captcha (15 —Å–µ–∫) - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
        2. –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω API –º–µ—Ç–æ–¥ (15 —Å–µ–∫)
        3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: 30 —Å–µ–∫—É–Ω–¥
        
        Args:
            driver: Selenium WebDriver
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            True –µ—Å–ª–∏ –∫–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.enabled:
            logger.info("üîê CAPTCHA solver disabled, skipping")
            return True
        
        max_attempts = max_attempts or self.max_attempts
        start_time = time.time()
        
        logger.info("üîç Quick CAPTCHA detection...")
        
        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ (3 —Å–µ–∫ –º–∞–∫—Å–∏–º—É–º)
        captcha_found = await self._quick_detect_captcha(driver)
        if not captcha_found:
            logger.info("‚úÖ No CAPTCHA found, proceeding")
            return True
        
        logger.info("üîê CAPTCHA detected, starting OPTIMIZED solve...")
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: Generic –ø–µ—Ä–≤—ã–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º
        for attempt in range(max_attempts):
            try:
                elapsed = time.time() - start_time
                remaining_time = self.timeout - elapsed
                
                if remaining_time <= 0:
                    logger.warning("‚è∞ CAPTCHA timeout reached")
                    break
                
                logger.info(f"üîÑ FAST solve attempt {attempt + 1}/{max_attempts} (remaining: {remaining_time:.1f}s)")
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Generic Captcha (–±—ã—Å—Ç—Ä—ã–π)
                success = await self._solve_generic_captcha_fast(driver, min(self.generic_timeout, remaining_time))
                if success:
                    total_time = time.time() - start_time
                    logger.info(f"‚úÖ CAPTCHA solved by Generic method in {total_time:.1f}s!")
                    return True
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –û–¥–∏–Ω –±—ã—Å—Ç—Ä—ã–π API –º–µ—Ç–æ–¥ (–µ—Å–ª–∏ –≤—Ä–µ–º—è –æ—Å—Ç–∞–ª–æ—Å—å)
                remaining_time = self.timeout - (time.time() - start_time)
                if remaining_time > 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫ –¥–ª—è API
                    success = await self._solve_single_api_fast(driver, remaining_time)
                    if success:
                        total_time = time.time() - start_time
                        logger.info(f"‚úÖ CAPTCHA solved by API method in {total_time:.1f}s!")
                        return True
                
                logger.warning(f"‚ùå Fast solve attempt {attempt + 1} failed")
                
            except Exception as e:
                logger.error(f"‚ùå CAPTCHA solve attempt {attempt + 1} error: {e}")
                
            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < max_attempts - 1:
                await asyncio.sleep(1)
        
        total_time = time.time() - start_time
        logger.error(f"‚ùå All CAPTCHA solve attempts failed in {total_time:.1f}s")
        return False
    
    async def _quick_detect_captcha(self, driver) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã)"""
        try:
            # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            quick_selectors = [
                "//div[contains(@class, 'captcha')]",
                "//iframe[contains(@src, 'recaptcha')]",
                "//div[contains(@class, 'recaptcha')]",
                "//*[contains(@class, 'g-recaptcha')]",
                "//iframe[contains(@src, 'captcha.yandex')]",
                "//*[contains(@id, 'captcha')]"
            ]
            
            for selector in quick_selectors:
                try:
                    # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                    elements = driver.find_elements(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed():
                            logger.info(f"üîç CAPTCHA detected: {selector}")
                            return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.debug(f"Quick CAPTCHA detection error: {e}")
            return False
    
    async def _solve_generic_captcha_fast(self, driver, timeout: float) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ Generic –∫–∞–ø—á–∏"""
        try:
            logger.info(f"üéØ Fast Generic CAPTCHA solve (timeout: {timeout:.1f}s)")
            start_time = time.time()
            
            # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–ø—á–∏
            interactive_selectors = [
                # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏
                "//div[contains(@class, 'captcha')]//input[@type='checkbox']",
                "//div[contains(@class, 'captcha')]//button",
                "//div[contains(@class, 'captcha')]//div[contains(@class, 'checkbox')]",
                
                # Yandex Smart Captcha checkbox
                "//div[contains(@class, 'CheckboxCaptcha')]//input",
                "//div[contains(@class, 'captcha-checkbox')]//input",
                "//div[contains(@class, 'captcha')]//span[contains(text(), 'not a robot')]",
                
                # Generic clickable captcha areas
                "//*[contains(@class, 'captcha') and @onclick]",
                "//*[contains(@class, 'captcha')]//a",
                "//*[contains(@id, 'captcha')]//input[@type='checkbox']"
            ]
            
            for selector in interactive_selectors:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    elapsed = time.time() - start_time
                    if elapsed >= timeout:
                        logger.warning("‚è∞ Generic captcha timeout")
                        break
                    
                    elements = driver.find_elements(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed() and element.is_enabled():
                            try:
                                logger.info(f"üéØ Trying to interact with: {selector}")
                                
                                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                                driver.execute_script("arguments[0].scrollIntoView(true);", element)
                                await asyncio.sleep(0.3)
                                
                                # –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞
                                element.click()
                                await asyncio.sleep(1)
                                
                                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–∞–ø—á–∏
                                if not await self._quick_detect_captcha(driver):
                                    solve_time = time.time() - start_time
                                    logger.info(f"‚úÖ Generic captcha solved by click in {solve_time:.1f}s")
                                    return True
                                
                            except Exception as e:
                                logger.debug(f"Element interaction failed: {e}")
                                continue
                                
                except:
                    continue
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ JavaScript (–±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥)
            js_success = await self._try_javascript_bypass(driver, timeout - (time.time() - start_time))
            if js_success:
                return True
            
            logger.debug("‚ùå Fast Generic captcha solve failed")
            return False
            
        except Exception as e:
            logger.debug(f"‚ùå Generic captcha fast solve error: {e}")
            return False
    
    async def _try_javascript_bypass(self, driver, timeout: float) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑ JavaScript"""
        try:
            if timeout <= 0:
                return False
                
            logger.info("üîß Trying JavaScript captcha bypass...")
            
            # –ë—ã—Å—Ç—Ä—ã–µ JS –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞
            bypass_scripts = [
                # –°–∫—Ä—ã—Ç–∏–µ –∫–∞–ø—á–∏
                """
                var captchas = document.querySelectorAll('[class*="captcha"], [id*="captcha"]');
                captchas.forEach(function(el) {
                    el.style.display = 'none';
                    el.remove();
                });
                return captchas.length > 0;
                """,
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª–µ–π
                """
                var inputs = document.querySelectorAll('input[name*="captcha"], input[id*="captcha"]');
                inputs.forEach(function(input) {
                    if (input.type === 'hidden') {
                        input.value = 'bypass';
                    }
                });
                return inputs.length > 0;
                """,
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ callback'–æ–≤
                """
                if (typeof window.onCaptchaSuccess === 'function') {
                    window.onCaptchaSuccess('bypass_token');
                    return true;
                }
                if (typeof window.captchaCallback === 'function') {
                    window.captchaCallback('bypass_token');
                    return true;
                }
                return false;
                """
            ]
            
            for script in bypass_scripts:
                try:
                    result = driver.execute_script(script)
                    if result:
                        await asyncio.sleep(0.5)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∫–∞–ø—á–∏
                        if not await self._quick_detect_captcha(driver):
                            logger.info("‚úÖ JavaScript bypass successful")
                            return True
                            
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.debug(f"JavaScript bypass error: {e}")
            return False
    
    async def _solve_single_api_fast(self, driver, timeout: float) -> bool:
        """–û–¥–∏–Ω–æ—á–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ API"""
        try:
            if timeout < 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è API
                return False
                
            logger.info(f"üîÑ Single API solve attempt (timeout: {timeout:.1f}s)")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–ø—á–∏ –¥–ª—è API
            captcha_type = await self._detect_captcha_type_fast(driver)
            
            if captcha_type == 'yandex_smart':
                return await self._solve_yandex_api_fast(driver, timeout)
            elif captcha_type == 'recaptcha':
                return await self._solve_recaptcha_api_fast(driver, timeout)
            else:
                logger.debug("Unknown captcha type for API solve")
                return False
                
        except Exception as e:
            logger.debug(f"Single API solve error: {e}")
            return False
    
    async def _detect_captcha_type_fast(self, driver) -> str:
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞–ø—á–∏"""
        try:
            # Yandex Smart Captcha
            yandex_selectors = [
                "//iframe[contains(@src, 'captcha.yandex')]",
                "//div[contains(@class, 'CheckboxCaptcha')]"
            ]
            
            for selector in yandex_selectors:
                try:
                    elements = driver.find_elements(By.XPATH, selector)
                    if any(el.is_displayed() for el in elements):
                        return 'yandex_smart'
                except:
                    continue
            
            # reCAPTCHA
            recaptcha_selectors = [
                "//iframe[contains(@src, 'recaptcha')]",
                "//div[@class='g-recaptcha']"
            ]
            
            for selector in recaptcha_selectors:
                try:
                    elements = driver.find_elements(By.XPATH, selector)
                    if any(el.is_displayed() for el in elements):
                        return 'recaptcha'
                except:
                    continue
            
            return 'unknown'
            
        except:
            return 'unknown'
    
    async def _solve_yandex_api_fast(self, driver, timeout: float) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ Yandex —á–µ—Ä–µ–∑ API"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ site key
            site_key = await self._extract_yandex_site_key_fast(driver)
            if not site_key:
                return False
            
            page_url = driver.current_url
            
            # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Anti-Captcha
            if self.provider == 'anti-captcha':
                return await self._anticaptcha_yandex_fast(page_url, site_key, driver, timeout)
            else:
                return await self._2captcha_yandex_fast(page_url, site_key, driver, timeout)
                
        except Exception as e:
            logger.debug(f"Yandex API fast solve error: {e}")
            return False
    
    async def _extract_yandex_site_key_fast(self, driver) -> Optional[str]:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Yandex site key"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
            script = """
            var iframes = document.querySelectorAll('iframe');
            for (var i = 0; i < iframes.length; i++) {
                var src = iframes[i].src;
                if (src.includes('captcha.yandex') && src.includes('sitekey=')) {
                    return src.split('sitekey=')[1].split('&')[0];
                }
            }
            return null;
            """
            
            result = driver.execute_script(script)
            if result:
                logger.info(f"‚úÖ Found Yandex site key: {result[:20]}...")
                return result
            return None
            
        except:
            return None
    
    async def _anticaptcha_yandex_fast(self, page_url: str, site_key: str, driver, timeout: float) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Anti-Captcha"""
        try:
            task_data = {
                "clientKey": self.api_key,
                "task": {
                    "type": "YandexSmartCaptchaTaskProxyless",
                    "websiteURL": page_url,
                    "websiteKey": site_key
                }
            }
            
            start_time = time.time()
            
            async with aiohttp.ClientSession() as session:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏
                async with session.post(f"{self.base_url}/createTask", json=task_data) as response:
                    result = await response.json()
                    
                    if result.get('errorId') != 0:
                        logger.error(f"‚ùå Anti-Captcha task failed: {result.get('errorDescription')}")
                        return False
                    
                    task_id = result.get('taskId')
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                while time.time() - start_time < timeout:
                    await asyncio.sleep(3)  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫
                    
                    result_data = {
                        "clientKey": self.api_key,
                        "taskId": task_id
                    }
                    
                    async with session.post(f"{self.base_url}/getTaskResult", json=result_data) as response:
                        result = await response.json()
                        
                        if result.get('status') == 'ready':
                            token = result.get('solution', {}).get('token')
                            if token:
                                return await self._inject_yandex_solution_fast(driver, token)
                        elif result.get('status') != 'processing':
                            break
                
                return False
                
        except Exception as e:
            logger.debug(f"Anti-Captcha Yandex fast error: {e}")
            return False
    
    async def _inject_yandex_solution_fast(self, driver, token: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –∏–Ω—ä–µ–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è Yandex"""
        try:
            # –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—ä–µ–∫—Ü–∏–∏
            scripts = [
                f"if(window.smartCaptcha)window.smartCaptcha.submit('{token}');",
                f"var input=document.querySelector('input[name*=\"captcha\"]');if(input)input.value='{token}';",
                f"if(window.onYandexCaptchaCallback)window.onYandexCaptchaCallback('{token}');"
            ]
            
            for script in scripts:
                try:
                    driver.execute_script(script)
                    await asyncio.sleep(1)
                    
                    if not await self._quick_detect_captcha(driver):
                        logger.info("‚úÖ Yandex solution injected successfully")
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.debug(f"Yandex injection error: {e}")
            return False
    
    async def _solve_recaptcha_api_fast(self, driver, timeout: float) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ reCAPTCHA —á–µ—Ä–µ–∑ API"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è reCAPTCHA
        logger.debug("reCAPTCHA fast solve not implemented")
        return False
    
    async def _2captcha_yandex_fast(self, page_url: str, site_key: str, driver, timeout: float) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2captcha"""
        try:
            logger.info("üîÑ Submitting to 2captcha...")
            
            task_data = {
                'key': self.api_key,
                'method': 'yandex',
                'sitekey': site_key,
                'pageurl': page_url,
                'json': '1'
            }
            
            start_time = time.time()
            
            async with aiohttp.ClientSession() as session:
                # –û—Ç–ø—Ä–∞–≤–∫–∞
                async with session.post("http://2captcha.com/in.php", data=task_data) as response:
                    result = await response.json()
                    
                    if result.get('status') != 1:
                        logger.error(f"‚ùå 2captcha failed: {result.get('error_text')}")
                        return False
                    
                    task_id = result.get('request')
                
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                while time.time() - start_time < timeout:
                    await asyncio.sleep(5)
                    
                    params = {
                        'key': self.api_key,
                        'action': 'get',
                        'id': task_id,
                        'json': '1'
                    }
                    
                    async with session.get("http://2captcha.com/res.php", params=params) as response:
                        result = await response.json()
                        
                        if result.get('status') == 1:
                            token = result.get('request')
                            return await self._inject_yandex_solution_fast(driver, token)
                        elif result.get('error_text') != 'CAPCHA_NOT_READY':
                            break
                
                return False
                
        except Exception as e:
            logger.debug(f"2captcha fast error: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—à–∞—Ç–µ–ª—è –∫–∞–ø—á–∏"""
        return {
            'enabled': self.enabled,
            'provider': self.provider if self.enabled else None,
            'timeout': self.timeout,
            'max_attempts': self.max_attempts,
            'generic_timeout': self.generic_timeout,
            'optimization': 'fast_generic_priority',
            'status': 'ready' if self.enabled else 'disabled'
        }