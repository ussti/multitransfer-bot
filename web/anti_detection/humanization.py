"""
Humanization Module - –≠–º—É–ª—è—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
–í–∫–ª—é—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏, –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω—É—é –ø–µ—á–∞—Ç—å, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
"""

import random
import time
import logging
from typing import Tuple, List, Optional
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.common.keys import Keys

logger = logging.getLogger(__name__)

class HumanBehavior:
    """–ú–æ–¥—É–ª—å –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    MIN_STEP_DELAY = 5.0    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    MAX_STEP_DELAY = 15.0   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
    MIN_TYPING_DELAY = 0.15 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (150ms)
    MAX_TYPING_DELAY = 0.4  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (400ms)
    MISTAKE_PROBABILITY = 0.1  # 10% —à–∞–Ω—Å –Ω–∞ –æ—à–∏–±–∫—É
    
    @staticmethod
    def random_delay(min_sec: float = None, max_sec: float = None) -> float:
        """
        –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        
        Args:
            min_sec: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5-15 —Å–µ–∫)
            max_sec: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        Returns:
            float: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        min_sec = min_sec or HumanBehavior.MIN_STEP_DELAY
        max_sec = max_sec or HumanBehavior.MAX_STEP_DELAY
        
        delay = random.uniform(min_sec, max_sec)
        logger.debug(f"‚è≥ Human delay: {delay:.2f}s")
        return delay
    
    @staticmethod
    def typing_delay() -> float:
        """
        –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏
        
        Returns:
            float: –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (150-400ms)
        """
        return random.uniform(HumanBehavior.MIN_TYPING_DELAY, HumanBehavior.MAX_TYPING_DELAY)
    
    @staticmethod
    def word_pause() -> float:
        """
        –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (–±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–∞—è —á–µ–º –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏)
        
        Returns:
            float: –í—Ä–µ–º—è –ø–∞—É–∑—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (300-800ms)
        """
        return random.uniform(0.3, 0.8)
    
    @staticmethod
    def reading_pause() -> float:
        """
        –ü–∞—É–∑–∞ –¥–ª—è '—á—Ç–µ–Ω–∏—è' —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        
        Returns:
            float: –í—Ä–µ–º—è –ø–∞—É–∑—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (2-5 —Å–µ–∫)
        """
        return random.uniform(2.0, 5.0)
    
    @staticmethod
    def should_make_mistake() -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫—É (10% —à–∞–Ω—Å)
        """
        return random.random() < HumanBehavior.MISTAKE_PROBABILITY
    
    @staticmethod
    def human_type(element: WebElement, text: str, driver=None) -> None:
        """
        –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –ø–µ—á–∞—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        
        Args:
            element: –í–µ–±-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
            driver: WebDriver (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        """
        logger.info(f"üñäÔ∏è Human typing: '{text[:10]}{'...' if len(text) > 10 else ''}'")
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
        element.clear()
        time.sleep(random.uniform(0.1, 0.3))
        
        # 10% —à–∞–Ω—Å –Ω–∞ –æ—à–∏–±–∫—É –≤ –Ω–∞—á–∞–ª–µ
        if HumanBehavior.should_make_mistake():
            logger.debug("üîÑ Making intentional typing mistake")
            
            # –ù–∞–±–∏—Ä–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            wrong_chars = 'qwertyuiopasdfghjklzxcvbnm'
            wrong_char = random.choice(wrong_chars)
            element.send_keys(wrong_char)
            time.sleep(HumanBehavior.typing_delay())
            
            # –ü–∞—É–∑–∞ "–æ—Å–æ–∑–Ω–∞–Ω–∏—è" –æ—à–∏–±–∫–∏
            time.sleep(random.uniform(0.5, 1.2))
            
            # –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫—É
            element.send_keys(Keys.BACK_SPACE)
            time.sleep(HumanBehavior.typing_delay())
        
        # –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        for i, char in enumerate(text):
            element.send_keys(char)
            
            # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            delay = HumanBehavior.typing_delay()
            
            # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
            if char == ' ':
                delay += HumanBehavior.word_pause()
                logger.debug("‚åõ Word pause")
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–¥—É–º–∏–π)
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                delay += random.uniform(0.5, 1.5)
                logger.debug("ü§î Thinking pause")
            
            time.sleep(delay)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (—Ä–µ–¥–∫–æ)
            if i > 0 and i < len(text) - 1 and random.random() < 0.03:  # 3% —à–∞–Ω—Å
                logger.debug("üîÑ Mid-typing correction")
                
                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                wrong_char = random.choice('qwertyuiop')
                element.send_keys(wrong_char)
                time.sleep(HumanBehavior.typing_delay())
                
                # –£–¥–∞–ª—è–µ–º
                element.send_keys(Keys.BACK_SPACE)
                time.sleep(HumanBehavior.typing_delay())
        
        logger.debug(f"‚úÖ Finished typing '{text}'")
    
    @staticmethod
    def human_scroll(driver, direction: str = 'down', pixels: int = None) -> None:
        """
        –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        Args:
            driver: WebDriver
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ('down' –∏–ª–∏ 'up')  
            pixels: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π (—Å–ª—É—á–∞–π–Ω–æ–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
        """
        if pixels is None:
            pixels = random.randint(200, 600)
        
        logger.debug(f"üìú Human scroll {direction}: {pixels}px")
        
        if direction == 'down':
            driver.execute_script(f"window.scrollBy(0, {pixels});")
        else:
            driver.execute_script(f"window.scrollBy(0, -{pixels});")
        
        # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        time.sleep(random.uniform(0.5, 1.5))
    
    @staticmethod
    def micro_movements(driver, element: WebElement, count: int = None) -> None:
        """
        –ú–∏–∫—Ä–æ-–¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º (–∏–º–∏—Ç–∞—Ü–∏—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞)
        
        Args:
            driver: WebDriver
            element: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ–Ω–∏–π (—Å–ª—É—á–∞–π–Ω–æ–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
        """
        if count is None:
            count = random.randint(1, 3)
        
        logger.debug(f"üê≠ Micro movements: {count}")
        
        actions = ActionChains(driver)
        
        # –°–µ—Ä–∏—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç—É
        for i in range(count):
            offset_x = random.randint(-5, 5)
            offset_y = random.randint(-5, 5)
            
            try:
                actions.move_to_element_with_offset(element, offset_x, offset_y)
                actions.pause(random.uniform(0.1, 0.3))
            except Exception as e:
                logger.debug(f"Micro movement failed: {e}")
                break
        
        try:
            actions.perform()
        except Exception as e:
            logger.debug(f"Micro movements failed: {e}")
    
    @staticmethod
    def simulate_reading_element(driver, element: WebElement) -> None:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–µ–º—É + –ø–∞—É–∑–∞)
        
        Args:
            driver: WebDriver
            element: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è '—á—Ç–µ–Ω–∏—è'
        """
        try:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)
            
            # –ü–∞—É–∑–∞ –¥–ª—è '—á—Ç–µ–Ω–∏—è'
            reading_time = HumanBehavior.reading_pause()
            logger.debug(f"üìñ Reading element for {reading_time:.1f}s")
            time.sleep(reading_time)
            
        except Exception as e:
            logger.debug(f"Reading simulation failed: {e}")
            # Fallback –ø–∞—É–∑–∞
            time.sleep(random.uniform(1, 3))
    
    @staticmethod
    def random_mouse_movement(driver) -> None:
        """
        –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∏–º–∏—Ç–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è)
        
        Args:
            driver: WebDriver
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            window_size = driver.get_window_size()
            width = window_size['width']
            height = window_size['height']
            
            # –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
            x = random.randint(100, width - 100)
            y = random.randint(100, height - 200)
            
            logger.debug(f"üéØ Random mouse movement to ({x}, {y})")
            
            actions = ActionChains(driver)
            actions.move_by_offset(x, y)
            actions.pause(random.uniform(0.5, 1.0))
            actions.perform()
            
        except Exception as e:
            logger.debug(f"Random mouse movement failed: {e}")
    
    @staticmethod
    def human_click_with_preparation(driver, element: WebElement, preparation: bool = True) -> None:
        """
        –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π
        
        Args:
            driver: WebDriver
            element: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª–∏–∫–∞
            preparation: –í—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        """
        if preparation:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)
            time.sleep(random.uniform(0.5, 1.5))
            
            # –ú–∏–∫—Ä–æ-–¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            HumanBehavior.micro_movements(driver, element)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            time.sleep(random.uniform(0.2, 0.8))
        
        # –°–∞–º –∫–ª–∏–∫
        try:
            element.click()
            logger.debug("‚úÖ Human click executed")
        except Exception as e:
            logger.debug(f"Click failed, trying JS click: {e}")
            driver.execute_script("arguments[0].click();", element)
    
    @staticmethod
    def wait_with_human_behavior(driver, seconds: float) -> None:
        """
        –û–∂–∏–¥–∞–Ω–∏–µ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        
        Args:
            driver: WebDriver
            seconds: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        logger.debug(f"‚è≥ Human wait: {seconds:.1f}s with behavior")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å—Ç–∏
        chunks = max(1, int(seconds / 3))  # 3-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —á–∞—Å—Ç–∏
        chunk_time = seconds / chunks
        
        for i in range(chunks):
            time.sleep(chunk_time)
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å
                behavior = random.choice(['scroll', 'mouse_move', 'nothing'])
                
                if behavior == 'scroll':
                    HumanBehavior.human_scroll(driver, random.choice(['up', 'down']), random.randint(50, 200))
                elif behavior == 'mouse_move':
                    HumanBehavior.random_mouse_movement(driver)
                # 'nothing' - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º