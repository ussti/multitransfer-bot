"""
Behavioral Camouflage Module - –ò–º–∏—Ç–∞—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–í–∫–ª—é—á–∞–µ—Ç pre-browsing, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –∏–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
"""

import random
import time
import logging
from typing import List, Optional, Any, Tuple
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.remote.webelement import WebElement

logger = logging.getLogger(__name__)

class BehavioralCamouflage:
    """–ú–æ–¥—É–ª—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
    EXPLORATION_MIN_TIME = 3.0    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è
    EXPLORATION_MAX_TIME = 7.0    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è
    HESITATION_PROBABILITY = 0.4  # 40% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–¥—É–º—å—è
    TAB_USAGE_PROBABILITY = 0.3   # 30% —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Tab
    WRONG_CLICK_PROBABILITY = 0.15 # 15% —à–∞–Ω—Å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–µ —Ç—É–¥–∞
    
    @staticmethod
    async def pre_browsing_behavior(driver, base_url: str, duration_minutes: float = 1.0) -> None:
        """
        –ü–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π - –∏–∑—É—á–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        Args:
            driver: WebDriver
            base_url: –ë–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞
            duration_minutes: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        """
        logger.info(f"üé≠ Starting pre-browsing behavior for {duration_minutes:.1f} minutes")
        
        try:
            # 1. –ü–æ—Å–µ—Ç–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info("üìñ Visiting homepage and reading...")
            driver.get(base_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ "—á–∏—Ç–∞–µ–º" —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            initial_reading_time = random.uniform(3, 7)
            logger.debug(f"‚è≥ Initial page reading: {initial_reading_time:.1f}s")
            time.sleep(initial_reading_time)
            
            # 2. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–∑—É—á–µ–Ω–∏–µ)
            await BehavioralCamouflage._explore_page_content(driver)
            
            # 3. –ü–æ–ø—ã—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            await BehavioralCamouflage._explore_navigation_menu(driver)
            
            # 4. –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await BehavioralCamouflage._perform_random_user_actions(driver, duration_minutes)
            
            # 5. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é (–µ—Å–ª–∏ —É—à–ª–∏)
            current_url = driver.current_url
            if base_url not in current_url:
                logger.debug("üîô Returning to homepage")
                driver.get(base_url)
                time.sleep(random.uniform(2, 4))
            
            logger.info("‚úÖ Pre-browsing behavior completed")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Pre-browsing behavior partially failed: {e}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            time.sleep(random.uniform(5, 10))
    
    @staticmethod
    async def _explore_page_content(driver) -> None:
        """–ò–∑—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_height = driver.execute_script("return document.body.scrollHeight")
            current_scroll = 0
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ø–æ —á–∞—Å—Ç—è–º (–∏–º–∏—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ)
            scroll_steps = random.randint(3, 6)
            step_size = total_height // scroll_steps
            
            for i in range(scroll_steps):
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
                scroll_to = min(current_scroll + step_size + random.randint(-50, 100), total_height)
                driver.execute_script(f"window.scrollTo(0, {scroll_to});")
                current_scroll = scroll_to
                
                # –ü–∞—É–∑–∞ –¥–ª—è "—á—Ç–µ–Ω–∏—è"
                reading_time = random.uniform(1.5, 4.0)
                logger.debug(f"üìú Reading section {i+1}/{scroll_steps} for {reading_time:.1f}s")
                time.sleep(reading_time)
                
                # –ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∑–∞–¥ (–∫–∞–∫ –ø—Ä–∏ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–Ω–∏–∏)
                if random.random() < 0.3:
                    back_scroll = random.randint(50, 150)
                    driver.execute_script(f"window.scrollBy(0, -{back_scroll});")
                    time.sleep(random.uniform(0.5, 1.5))
                    driver.execute_script(f"window.scrollBy(0, {back_scroll});")
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞–≤–µ—Ä—Ö
            driver.execute_script("window.scrollTo(0, 0);")
            time.sleep(random.uniform(1, 2))
            
        except Exception as e:
            logger.debug(f"Page exploration failed: {e}")
    
    @staticmethod
    async def _explore_navigation_menu(driver) -> None:
        """–ò–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_selectors = [
                "nav a", "header a", ".menu a", ".navbar a", 
                "ul.menu li a", ".nav-link", "[role='navigation'] a"
            ]
            
            menu_items = []
            for selector in nav_selectors:
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    menu_items.extend(elements[:5])  # –ú–∞–∫—Å–∏–º—É–º 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if len(menu_items) >= 3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
                        break
                except:
                    continue
            
            if menu_items:
                # –°–ª—É—á–∞–π–Ω–æ –Ω–∞–≤–æ–¥–∏–º—Å—è –Ω–∞ 1-3 —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
                items_to_explore = random.sample(menu_items, min(len(menu_items), random.randint(1, 3)))
                
                for item in items_to_explore:
                    try:
                        # –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
                        ActionChains(driver).move_to_element(item).pause(
                            random.uniform(0.8, 2.0)
                        ).perform()
                        
                        logger.debug(f"üñ±Ô∏è Hovering over menu item: {item.text[:30]}")
                        time.sleep(random.uniform(0.5, 1.5))
                        
                        # –ò–Ω–æ–≥–¥–∞ –∫–ª–∏–∫–∞–µ–º (–Ω–æ —Ä–µ–¥–∫–æ)
                        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                            logger.debug("üîç Exploring menu link")
                            item.click()
                            time.sleep(random.uniform(2, 5))
                            driver.back()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
                            time.sleep(random.uniform(1, 3))
                            break  # –û–¥–∏–Ω –ø–µ—Ä–µ—Ö–æ–¥ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                            
                    except Exception as e:
                        logger.debug(f"Menu exploration error: {e}")
                        continue
            
        except Exception as e:
            logger.debug(f"Navigation exploration failed: {e}")
    
    @staticmethod
    async def _perform_random_user_actions(driver, duration_minutes: float) -> None:
        """–°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        end_time = time.time() + (duration_minutes * 60)
        
        actions = [
            'scroll_random', 'move_mouse', 'pause_reading', 
            'mini_scroll', 'hover_element', 'nothing'
        ]
        
        while time.time() < end_time:
            action = random.choice(actions)
            
            try:
                if action == 'scroll_random':
                    direction = random.choice(['up', 'down'])
                    pixels = random.randint(100, 400)
                    if direction == 'down':
                        driver.execute_script(f"window.scrollBy(0, {pixels});")
                    else:
                        driver.execute_script(f"window.scrollBy(0, -{pixels});")
                
                elif action == 'move_mouse':
                    # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
                    try:
                        body = driver.find_element(By.TAG_NAME, "body")
                        ActionChains(driver).move_to_element_with_offset(
                            body, random.randint(100, 800), random.randint(100, 600)
                        ).perform()
                    except:
                        pass
                
                elif action == 'pause_reading':
                    # –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ (–∫–∞–∫ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏)
                    time.sleep(random.uniform(3, 8))
                
                elif action == 'mini_scroll':
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
                    driver.execute_script(f"window.scrollBy(0, {random.randint(50, 150)});")
                
                elif action == 'hover_element':
                    # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    try:
                        elements = driver.find_elements(By.CSS_SELECTOR, "div, p, span, a")
                        if elements:
                            element = random.choice(elements[:10])
                            ActionChains(driver).move_to_element(element).pause(
                                random.uniform(0.5, 2.0)
                            ).perform()
                    except:
                        pass
                
                # –ë–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                time.sleep(random.uniform(2, 5))
                
            except Exception as e:
                logger.debug(f"Random action '{action}' failed: {e}")
                time.sleep(random.uniform(1, 3))
    
    @staticmethod
    def simulate_field_selection_hesitation(driver, field_elements: List[WebElement]) -> WebElement:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–¥—É–º–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–µ–π
        
        Args:
            driver: WebDriver
            field_elements: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            
        Returns:
            WebElement: –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        """
        if len(field_elements) <= 1 or random.random() > BehavioralCamouflage.HESITATION_PROBABILITY:
            return field_elements[-1] if field_elements else None
        
        logger.debug("ü§î Simulating field selection hesitation")
        
        try:
            # "–°–ª—É—á–∞–π–Ω–æ" –Ω–∞–≤–µ–¥–µ–º—Å—è –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            wrong_field = random.choice(field_elements[:-1])
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", wrong_field)
            time.sleep(random.uniform(0.5, 1.0))
            
            # –ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            ActionChains(driver).move_to_element(wrong_field).pause(
                random.uniform(1.0, 2.5)
            ).perform()
            
            logger.debug("‚è≥ Hesitation pause")
            time.sleep(random.uniform(0.8, 2.0))
            
            # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–ª—é
            correct_field = field_elements[-1]
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", correct_field)
            time.sleep(random.uniform(0.3, 0.8))
            
            return correct_field
            
        except Exception as e:
            logger.debug(f"Hesitation simulation failed: {e}")
            return field_elements[-1] if field_elements else None
    
    @staticmethod
    def simulate_reading(driver, element: WebElement) -> None:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        
        Args:
            driver: WebDriver
            element: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)
            time.sleep(random.uniform(0.5, 1.0))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            try:
                text_length = len(element.text.strip())
                # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è: 50ms –Ω–∞ —Å–∏–º–≤–æ–ª, –º–∏–Ω–∏–º—É–º 1 —Å–µ–∫, –º–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫
                reading_time = min(max(text_length * 0.05, 1.0), 8.0)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
                reading_time += random.uniform(-0.5, 1.5)
                reading_time = max(reading_time, 0.5)
                
                logger.debug(f"üìñ Reading element ({text_length} chars) for {reading_time:.1f}s")
                
            except:
                reading_time = random.uniform(1.5, 4.0)
            
            time.sleep(reading_time)
            
        except Exception as e:
            logger.debug(f"Reading simulation failed: {e}")
            time.sleep(random.uniform(1, 3))
    
    @staticmethod
    def random_tab_usage(driver, target_field: WebElement = None) -> bool:
        """
        –°–ª—É—á–∞–π–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        
        Args:
            driver: WebDriver
            target_field: –¶–µ–ª–µ–≤–æ–µ –ø–æ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Tab
        """
        if random.random() > BehavioralCamouflage.TAB_USAGE_PROBABILITY:
            return False
        
        logger.debug("‚å®Ô∏è Using Tab navigation")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            current_element = driver.switch_to.active_element
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Tab 1-3 —Ä–∞–∑–∞
            tab_count = random.randint(1, 3)
            for _ in range(tab_count):
                current_element.send_keys(Keys.TAB)
                time.sleep(random.uniform(0.3, 0.8))
                current_element = driver.switch_to.active_element
            
            return True
            
        except Exception as e:
            logger.debug(f"Tab navigation failed: {e}")
            return False
    
    @staticmethod
    def simulate_uncertainty(driver) -> None:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - —Å–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
        
        Args:
            driver: WebDriver
        """
        logger.debug("üòï Simulating user uncertainty")
        
        uncertainty_actions = [
            'scroll_back_forth', 'mouse_wander', 'pause_long', 'mini_refresh'
        ]
        
        action = random.choice(uncertainty_actions)
        
        try:
            if action == 'scroll_back_forth':
                # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Ç—É–¥–∞-—Å—é–¥–∞
                pixels = random.randint(150, 400)
                driver.execute_script(f"window.scrollBy(0, {pixels});")
                time.sleep(random.uniform(1.0, 2.5))
                driver.execute_script(f"window.scrollBy(0, -{pixels});")
                time.sleep(random.uniform(0.5, 1.5))
                
            elif action == 'mouse_wander':
                # –ë–µ—Å—Ü–µ–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
                try:
                    for _ in range(random.randint(2, 5)):
                        x = random.randint(100, 1000)
                        y = random.randint(100, 600)
                        ActionChains(driver).move_by_offset(x, y).pause(
                            random.uniform(0.3, 0.8)
                        ).perform()
                except:
                    pass
                    
            elif action == 'pause_long':
                # –î–æ–ª–≥–∞—è –ø–∞—É–∑–∞ (–∫–∞–∫ –ø—Ä–∏ —Ä–∞–∑–¥—É–º—å—è—Ö)
                pause_time = random.uniform(3.0, 7.0)
                logger.debug(f"ü§î Long uncertainty pause: {pause_time:.1f}s")
                time.sleep(pause_time)
                
            elif action == 'mini_refresh':
                # –ù–µ–±–æ–ª—å—à–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (F5 –∏–Ω–æ–≥–¥–∞)
                if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                    logger.debug("üîÑ Mini refresh (F5)")
                    driver.refresh()
                    time.sleep(random.uniform(2, 5))
                    
        except Exception as e:
            logger.debug(f"Uncertainty simulation failed: {e}")
    
    @staticmethod
    def simulate_wrong_click(driver, correct_element: WebElement, nearby_elements: List[WebElement] = None) -> bool:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        
        Args:
            driver: WebDriver
            correct_element: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            nearby_elements: –ë–ª–∏–∑–ª–µ–∂–∞—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∫–ª–∏–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–ª–∏–∫–∞
        """
        if random.random() > BehavioralCamouflage.WRONG_CLICK_PROBABILITY:
            return False
        
        logger.debug("‚ùå Simulating wrong click")
        
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–∏–∑–ª–µ–∂–∞—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–ª–∏–∫–∞–µ–º –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö
            if nearby_elements:
                wrong_element = random.choice(nearby_elements)
                try:
                    wrong_element.click()
                    logger.debug("üîÑ Clicked wrong element, correcting...")
                    
                    # –ü–∞—É–∑–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏—è –æ—à–∏–±–∫–∏
                    time.sleep(random.uniform(1.0, 2.5))
                    
                    # –¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    correct_element.click()
                    return True
                    
                except:
                    # –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –Ω–µ —É–¥–∞–ª—Å—è, –∫–ª–∏–∫–∞–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É
                    correct_element.click()
                    return False
            else:
                # –ö–ª–∏–∫–∞–µ–º —Ä—è–¥–æ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º (–ø—Ä–æ–º–∞—Ö)
                try:
                    offset_x = random.randint(-30, 30)
                    offset_y = random.randint(-20, 20)
                    
                    ActionChains(driver).move_to_element_with_offset(
                        correct_element, offset_x, offset_y
                    ).click().perform()
                    
                    # –ü–∞—É–∑–∞
                    time.sleep(random.uniform(0.8, 1.5))
                    
                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∏–∫
                    correct_element.click()
                    return True
                    
                except:
                    correct_element.click()
                    return False
                    
        except Exception as e:
            logger.debug(f"Wrong click simulation failed: {e}")
            try:
                correct_element.click()
            except:
                pass
            return False
    
    @staticmethod
    def natural_form_filling_order(form_fields: List[Tuple[str, WebElement]]) -> List[Tuple[str, WebElement]]:
        """
        –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (–Ω–µ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
        
        Args:
            form_fields: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–ª—è, —ç–ª–µ–º–µ–Ω—Ç)
            
        Returns:
            List: –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
        """
        if len(form_fields) <= 2:
            return form_fields
        
        # 70% —à–∞–Ω—Å –∑–∞–ø–æ–ª–Ω—è—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if random.random() < 0.7:
            return form_fields
        
        logger.debug("üîÄ Using natural form filling order")
        
        # –ò–Ω–æ–≥–¥–∞ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ (–Ω–æ –ª–æ–≥–∏—á–Ω–æ)
        reordered = form_fields.copy()
        
        # –ú–æ–∂–µ–º –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —Å–æ—Å–µ–¥–Ω–∏–µ –ø–æ–ª—è
        if len(reordered) >= 3:
            swap_idx = random.randint(0, len(reordered) - 2)
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å
                reordered[swap_idx], reordered[swap_idx + 1] = reordered[swap_idx + 1], reordered[swap_idx]
        
        return reordered
    
    @staticmethod
    def add_focus_unfocus_events(driver, element: WebElement) -> None:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Ñ–æ–∫—É—Å–∞/–ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è)
        
        Args:
            driver: WebDriver
            element: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å —Ñ–æ–∫—É—Å–æ–º
        """
        if random.random() < 0.2:  # 20% —à–∞–Ω—Å
            logger.debug("üëÅÔ∏è Adding focus/unfocus events")
            
            try:
                # –§–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
                element.click()
                time.sleep(random.uniform(0.3, 0.8))
                
                # –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å (–∫–ª–∏–∫–∞–µ–º –≤ —Å—Ç–æ—Ä–æ–Ω—É)
                try:
                    body = driver.find_element(By.TAG_NAME, "body")
                    ActionChains(driver).move_to_element_with_offset(
                        body, random.randint(50, 200), random.randint(50, 200)
                    ).click().perform()
                    
                    time.sleep(random.uniform(0.5, 1.5))
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–∫—É—Å
                    element.click()
                    
                except:
                    pass
                    
            except Exception as e:
                logger.debug(f"Focus/unfocus simulation failed: {e}")
    
    @staticmethod
    def simulate_page_leave_return(driver, probability: float = 0.05) -> bool:
        """
        –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—Ö–æ–¥–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
        
        Args:
            driver: WebDriver
            probability: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5%)
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        """
        if random.random() > probability:
            return False
        
        logger.debug("üîÑ Simulating page leave/return")
        
        try:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
            original_url = driver.current_url
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥—É—é –≤–∫–ª–∞–¥–∫—É (–æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É)
            driver.execute_script("window.open('about:blank', '_blank');")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            driver.switch_to.window(driver.window_handles[-1])
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            time.sleep(random.uniform(2, 5))
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
            driver.close()
            driver.switch_to.window(driver.window_handles[0])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
            time.sleep(random.uniform(1, 3))
            
            return True
            
        except Exception as e:
            logger.debug(f"Page leave/return failed: {e}")
            return False