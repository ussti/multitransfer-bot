"""
OPTIMIZED MultiTransfer.ru Browser Automation with SECOND CAPTCHA support
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò (50% —Å–ª—É—á–∞–µ–≤)
"""

import logging
import asyncio
import random
import time
import re
import os
import tempfile
import zipfile
import json
from typing import Dict, Any, Optional
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc
from web.captcha.solver import CaptchaSolver

logger = logging.getLogger(__name__)

class MultiTransferAutomation:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è multitransfer.ru —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò"""
    
    def __init__(self, proxy: Optional[Dict[str, Any]] = None, config: Optional[Dict[str, Any]] = None, proxy_manager=None):
        self.proxy = proxy
        self.config = config or {}
        self.base_url = "https://multitransfer.ru"
        self._driver = None
        self.captcha_solver = CaptchaSolver(config)
        self.proxy_manager = proxy_manager
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.screenshot_enabled = config.get('development', {}).get('screenshots_enabled', False)
        self.fast_mode = config.get('multitransfer', {}).get('fast_mode', True)
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ
        self.selectors = {
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (—Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            'transfer_abroad_btn': [
                "//button[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ')]"
            ],
            
            'tajikistan_select': [
                "//span[text()='–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω']/parent::div",
                "//div[contains(text(), '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')]"
            ],
            
            'amount_input': [
                "//input[contains(@placeholder, 'RUB')]",
                "//input[@type='number']"
            ],
            
            'currency_tjs': [
                "//button[contains(text(), 'TJS')]",
                "//*[text()='TJS']"
            ],
            
            'transfer_method_dropdown': [
                "//div[contains(text(), '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞')]//following-sibling::*",
                "//*[contains(text(), '—Å–ø–æ—Å–æ–±')]"
            ],
            
            'korti_milli_option': [
                "//*[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]"
            ],
            
            'continue_btn': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ],
            
            'recipient_card': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã']",
                "//input[contains(@placeholder, '–∫–∞—Ä—Ç—ã')]"
            ],
            
            'passport_rf_toggle': [
                "//button[contains(text(), '–ü–∞—Å–ø–æ—Ä—Ç –†–§')]"
            ],
            
            # –ü–æ–ª—è —Ñ–æ—Ä–º—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            'passport_series': [
                "//input[@placeholder='–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞']"
            ],
            
            'passport_number': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞']"
            ],
            
            'passport_date': [
                "//label[contains(text(), '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[2]"
            ],
            
            'surname': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é']"
            ],
            
            'name': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –∏–º—è']"
            ],
            
            'birthdate': [
                "//label[contains(text(), '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[1]"
            ],
            
            'phone': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']"
            ],
            
            'agreement_checkbox': [
                "//input[@type='checkbox']"
            ],
            
            'final_continue': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ],
            
            # Step 12: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            'data_verification_modal': [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]"
            ],
            
            'modal_continue_btn': [
                "(//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')])[last()]",
                "//*[contains(@class, 'modal')]//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ]
        }
    
    async def _setup_driver(self):
        """–ë–´–°–¢–†–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            logger.info("üöÄ Fast Chrome driver setup...")
            
            options = uc.ChromeOptions()
            
            # DEBUG MODE START - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
            debug_mode = os.getenv('DEBUG_BROWSER', 'false').lower() == 'true'
            proxy_disabled_file = "/tmp/proxy_disabled"
            visual_debug = os.path.exists(proxy_disabled_file) or debug_mode
            
            if visual_debug:
                # –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò - –±—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–∏–º—ã–º –∏ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
                logger.info("üîç DEBUG MODE: Browser will be visible for debugging")
                options.add_argument('--window-size=1400,1000')
                options.add_argument('--start-maximized')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage') 
                options.add_argument('--disable-blink-features=AutomationControlled')
                options.add_argument('--disable-web-security')
                # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, JS, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                logger.info("üé® DEBUG: Enabling images, JavaScript and extensions for better debugging")
            else:
                # –ü–†–û–î–ê–ö–®–ï–ù –†–ï–ñ–ò–ú - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                logger.info("‚ö° PRODUCTION MODE: Optimized settings for speed")
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                options.add_argument('--disable-gpu')
                # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º extensions –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ (–Ω—É–∂–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
                if not self.proxy:
                    options.add_argument('--disable-extensions')
                options.add_argument('--disable-plugins')
                options.add_argument('--disable-images')  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º JavaScript –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ (–Ω—É–∂–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
                if not self.proxy:
                    options.add_argument('--disable-javascript')
                options.add_argument('--window-size=1920,1080')
            # DEBUG MODE END
            
            # –ü—Ä–æ–∫—Å–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            if self.proxy:
                proxy_string = f"{self.proxy['ip']}:{self.proxy['port']}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–∫—Å–∏
                if self.proxy.get('user') and self.proxy.get('pass'):
                    logger.info(f"üîê Setting up authenticated proxy: {proxy_string}")
                    
                    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    auth_extension_path = self._create_proxy_auth_extension(
                        self.proxy['user'], 
                        self.proxy['pass']
                    )
                    
                    if auth_extension_path:
                        options.add_argument(f'--load-extension={auth_extension_path}')
                        logger.info(f"‚úÖ Added proxy auth extension")
                    else:
                        logger.error(f"‚ùå Failed to create auth extension, proxy may not work")
                else:
                    logger.warning(f"‚ö†Ô∏è Proxy credentials missing - using unauthenticated proxy")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä 
                proxy_type = self.proxy.get('type', 'http').lower()
                if proxy_type == 'socks5':
                    options.add_argument(f'--proxy-server=socks5://{proxy_string}')
                else:
                    options.add_argument(f'--proxy-server=http://{proxy_string}')
                    
                logger.info(f"üåê Using {proxy_type} proxy: {proxy_string}")
            
            # –ë—ã—Å—Ç—Ä—ã–π user agent
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36')
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å –±—ã—Å—Ç—Ä—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self._driver = uc.Chrome(options=options)
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
            if self.proxy:
                self._driver.implicitly_wait(10)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
                self._driver.set_page_load_timeout(60)  # 60 —Å–µ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
                logger.info("‚è±Ô∏è PROXY MODE: Extended timeouts enabled (10s implicit, 60s page load)")
            else:
                self._driver.implicitly_wait(3)   # –ë—ã—Å—Ç—Ä–æ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                self._driver.set_page_load_timeout(30)  # 30 —Å–µ–∫ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                logger.info("‚ö° DIRECT MODE: Fast timeouts enabled (3s implicit, 30s page load)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if visual_debug:
                logger.info("‚è±Ô∏è DEBUG MODE: Adding extra delay for browser stability")
                await asyncio.sleep(2)
            
            logger.info("‚úÖ Fast Chrome driver ready")
            return self._driver
            
        except Exception as e:
            logger.error(f"‚ùå Failed to setup Chrome driver: {e}")
            return None
    
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def find_element_fast(self, by, selector, timeout=2):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ (2 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 5)"""
        try:
            element = WebDriverWait(self._driver, timeout).until(
                EC.presence_of_element_located((by, selector))
            )
            return element
        except:
            return None
    
    def find_elements_fast(self, by, selector):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
        try:
            return self._driver.find_elements(by, selector)
        except:
            return []
    
    def click_element_fast(self, element):
        """–ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫"""
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
            self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∫–ª–∏–∫
            element.click()
            return True
        except:
            try:
                self._driver.execute_script("arguments[0].click();", element)
                return True
            except:
                return False
    
    def type_text_fast(self, element, text):
        """–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏)"""
        try:
            element.clear()
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            element.send_keys(text)
            return True
        except:
            return False
    
    def _create_proxy_auth_extension(self, username: str, password: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            manifest_json = {
                "version": "1.0.0",
                "manifest_version": 2,
                "name": "Proxy Auth",
                "permissions": [
                    "proxy",
                    "tabs",
                    "unlimitedStorage",
                    "storage",
                    "<all_urls>",
                    "webRequest",
                    "webRequestBlocking"
                ],
                "background": {"scripts": ["background.js"], "persistent": True},
                "minimum_chrome_version": "22.0.0"
            }
            
            background_js = f"""
            var config = {{
                mode: "fixed_servers",
                rules: {{
                    singleProxy: {{
                        scheme: "http",
                        host: "{self.proxy['ip']}",
                        port: parseInt("{self.proxy['port']}")
                    }},
                    bypassList: ["localhost"]
                }}
            }};
            
            chrome.proxy.settings.set({{value: config, scope: "regular"}}, function() {{}});
            
            function callbackFn(details) {{
                return {{
                    authCredentials: {{
                        username: "{username}",
                        password: "{password}"
                    }}
                }};
            }}
            
            chrome.webRequest.onAuthRequired.addListener(
                callbackFn,
                {{urls: ["<all_urls>"]}},
                ['blocking']
            );
            """
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            extension_dir = tempfile.mkdtemp()
            extension_path = f"{extension_dir}/proxy_auth_extension"
            os.makedirs(extension_path, exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            with open(f"{extension_path}/manifest.json", 'w') as f:
                json.dump(manifest_json, f)
            
            with open(f"{extension_path}/background.js", 'w') as f:
                f.write(background_js)
            
            logger.info(f"‚úÖ Created proxy auth extension: {extension_path}")
            return extension_path
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create proxy auth extension: {e}")
            return None
    
    def take_screenshot_conditional(self, filename):
        """–°–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        if self.screenshot_enabled:
            try:
                import os
                os.makedirs("logs/automation", exist_ok=True)
                self._driver.save_screenshot(f"logs/automation/{filename}")
                logger.debug(f"üì∏ Screenshot: {filename}")
            except:
                pass
    
    def take_debug_screenshot(self, filename: str, force: bool = False):
        """DEBUG —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        import os
        from datetime import datetime
        
        debug_enabled = os.getenv('DEBUG_SCREENSHOTS', 'false').lower() == 'true'
        
        if not force and not debug_enabled:
            return
        
        if not self._driver:
            return
            
        try:
            timestamp = datetime.now().strftime("%H%M%S")
            debug_filename = f"{timestamp}_{filename}"
            
            os.makedirs("logs/automation/debug_screenshots", exist_ok=True)
            
            screenshot_path = f"logs/automation/debug_screenshots/{debug_filename}"
            self._driver.save_screenshot(screenshot_path)
            logger.info(f"üêõ DEBUG Screenshot: {screenshot_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to save debug screenshot: {e}")
    
    def check_connection_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º"""
        try:
            current_url = self._driver.current_url
            page_source = self._driver.page_source
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_errors = [
                "can't be reached",
                "ERR_TIMED_OUT", 
                "ERR_CONNECTION_REFUSED",
                "ERR_PROXY_CONNECTION_FAILED",
                "This site can't be reached",
                "took too long to respond",
                "No internet"
            ]
            
            for error in connection_errors:
                if error in page_source:
                    logger.error(f"‚ùå Connection error detected: {error}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–∞–π—Ç–µ
            if "multitransfer" not in current_url.lower():
                logger.error(f"‚ùå Wrong site detected. Current URL: {current_url}")
                return False
                
            logger.debug(f"‚úÖ Connection healthy. URL: {current_url}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error checking connection health: {e}")
            return False
    
    async def switch_proxy_and_retry(self, operation_func, operation_name: str = "operation") -> Any:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.proxy_manager:
            logger.warning("‚ö†Ô∏è No proxy manager available for automatic switching")
            return await operation_func()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            old_proxy = self.proxy
            if old_proxy and self.proxy_manager:
                logger.info(f"üö´ Marking failed proxy: {old_proxy['ip']}:{old_proxy['port']}")
                await self.proxy_manager.mark_proxy_failed(old_proxy['ip'], old_proxy['port'])
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            logger.info(f"üîÑ Getting new proxy for {operation_name}")
            new_proxy = await self.proxy_manager.get_proxy()
            
            if not new_proxy:
                logger.warning("‚ö†Ô∏è No alternative proxy available - trying direct connection")
                # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                return await self._try_direct_connection(operation_func, operation_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            if old_proxy and new_proxy['ip'] == old_proxy['ip'] and new_proxy['port'] == old_proxy['port']:
                logger.warning(f"‚ö†Ô∏è Got same proxy again: {new_proxy['ip']}:{new_proxy['port']}")
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω
                new_proxy = await self.proxy_manager.get_proxy()
                if not new_proxy:
                    logger.warning("‚ö†Ô∏è No different proxy available - trying direct connection")
                    return await self._try_direct_connection(operation_func, operation_name)
                elif new_proxy['ip'] == old_proxy['ip'] and new_proxy['port'] == old_proxy['port']:
                    logger.warning("‚ö†Ô∏è Still same proxy - trying direct connection")
                    return await self._try_direct_connection(operation_func, operation_name)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            if self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
            self.proxy = new_proxy
            logger.info(f"üåê Switched from {old_proxy['ip'] if old_proxy else 'direct'} to {new_proxy['ip']}:{new_proxy['port']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
            await self._setup_driver()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
            logger.info(f"üåê Re-opening website with new proxy: {self.base_url}")
            self._driver.get(self.base_url)
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            if not self.check_connection_health():
                logger.error("‚ùå New proxy also failed to load site - trying direct connection")
                return await self._try_direct_connection(operation_func, operation_name)
            
            logger.info("‚úÖ Successfully switched proxy and loaded site")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
            result = await operation_func()
                
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Proxy switch failed: {e} - trying direct connection")
            return await self._try_direct_connection(operation_func, operation_name)
    
    async def _try_direct_connection(self, operation_func, operation_name: str) -> Any:
        """Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"""
        try:
            logger.info(f"üåê Trying direct connection for {operation_name}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            if self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
            old_proxy = self.proxy
            self.proxy = None
            logger.info(f"üîÄ Switched from proxy {old_proxy['ip'] if old_proxy else 'unknown'} to direct connection")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            await self._setup_driver()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –Ω–∞–ø—Ä—è–º—É—é
            logger.info(f"üåê Opening website directly: {self.base_url}")
            self._driver.get(self.base_url)
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            if not self.check_connection_health():
                logger.error("‚ùå Direct connection also failed")
                raise Exception("Both proxy and direct connection failed")
            
            logger.info("‚úÖ Successfully switched to direct connection")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø—Ä—è–º—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
            result = await operation_func()
                
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Direct connection failed: {e}")
            raise Exception(f"All connection methods failed: {e}")
    
    async def retry_on_connection_failure(self, operation_func, max_retries: int = 2, operation_name: str = "operation"):
        """Retry –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        for attempt in range(max_retries + 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π
                if not self.check_connection_health():
                    if attempt < max_retries:
                        logger.warning(f"üîÑ Connection unhealthy, retry {attempt + 1}/{max_retries} for {operation_name}")
                        
                        # –ù–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        if attempt == 0:
                            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                            try:
                                self._driver.refresh()
                                await asyncio.sleep(3)
                                continue
                            except:
                                logger.warning("‚ö†Ô∏è Page refresh failed")
                        
                        # –ù–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                        if attempt >= 1 and self.proxy_manager:
                            try:
                                return await self.switch_proxy_and_retry(operation_func, operation_name)
                            except Exception as switch_error:
                                logger.error(f"‚ùå Proxy switch failed: {switch_error}")
                                
                        await asyncio.sleep(5)
                        continue
                    else:
                        raise Exception(f"Connection failed after {max_retries} retries for {operation_name}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                return await operation_func()
                
            except Exception as e:
                if attempt < max_retries and ("connection" in str(e).lower() or "timeout" in str(e).lower()):
                    logger.warning(f"üîÑ {operation_name} failed (attempt {attempt + 1}), retrying: {e}")
                    await asyncio.sleep(5)
                    continue
                else:
                    raise e
        
        raise Exception(f"All retry attempts failed for {operation_name}")
    
    # –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î
    
    async def create_payment(self, payment_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò (—Ü–µ–ª—å: –¥–æ 40 —Å–µ–∫—É–Ω–¥)"""
        start_time = time.time()
        try:
            logger.info(f"üöÄ FIXED payment creation: {payment_data['amount']} {payment_data.get('currency_from', 'RUB')}")
            
            # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            driver = await self._setup_driver()
            if not driver:
                return {'success': False, 'error': 'Failed to setup browser driver'}
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
            async def open_website():
                logger.info(f"üåê Opening website: {self.base_url}")
                self._driver.get(self.base_url)
                logger.info("‚úÖ Website opened successfully")
                self.take_screenshot_conditional("00_homepage.png")
                return True
            
            try:
                await self.retry_on_connection_failure(open_website, max_retries=2, operation_name="opening website")
            except Exception as e:
                logger.error(f"‚ùå Failed to open website: {e}")
                if "target window already closed" in str(e):
                    logger.error("üí° Browser window was closed. This might be due to Chrome flags in debug mode.")
                    logger.error("üîß Try running again - sometimes undetected_chromedriver needs a retry.")
                raise Exception(f"Failed to open website: {e}")
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            await self._fast_country_and_amount(payment_data)
            await self._fast_fill_forms(payment_data)
            await self._fast_submit_and_captcha()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Step 12: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö" —Å –í–¢–û–†–û–ô –ö–ê–ü–ß–ï–ô
            await self._fast_handle_modal_with_second_captcha()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = await self._get_payment_result()
            
            total_time = time.time() - start_time
            logger.info(f"‚úÖ FIXED payment completed in {total_time:.1f}s!")
            return result
            
        except Exception as e:
            total_time = time.time() - start_time
            logger.error(f"‚ùå Payment failed after {total_time:.1f}s: {e}")
            self.take_screenshot_conditional("error_final.png")
            return {'success': False, 'error': str(e)}
            
        finally:
            if hasattr(self, '_driver') and self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
    
    async def _fast_country_and_amount(self, payment_data: Dict[str, Any]):
        """–ë–´–°–¢–†–´–ï —à–∞–≥–∏ 1-6: —Å—Ç—Ä–∞–Ω–∞ –∏ —Å—É–º–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ (—Ü–µ–ª—å: 8-10 —Å–µ–∫—É–Ω–¥)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast steps 1-6: country and amount")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.retry_on_connection_failure(
            lambda: self._do_country_and_amount_steps(payment_data),
            max_retries=2,
            operation_name="country and amount selection"
        )
    
    async def _do_country_and_amount_steps(self, payment_data: Dict[str, Any]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–æ–≤ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏ —Å—É–º–º—ã"""
        # –®–∞–≥ 1: –ö–ª–∏–∫ "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" - –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö
        await asyncio.sleep(1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" in (btn.text or ""):
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 1: Transfer abroad clicked")
                    break
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        for selector in self.selectors['tajikistan_select']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 2: Tajikistan selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º—ã - –ú–ì–ù–û–í–ï–ù–ù–û
        await asyncio.sleep(0.5)
        
        for selector in self.selectors['amount_input']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.type_text_fast(element, str(int(payment_data['amount']))):
                    logger.info("‚úÖ Step 3: Amount filled")
                    break
        
        # –®–∞–≥ 4: –í–∞–ª—é—Ç–∞ TJS - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        for selector in self.selectors['currency_tjs']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 4: TJS currency selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 5: –°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
        for selector in self.selectors['transfer_method_dropdown']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    break
        
        await asyncio.sleep(0.3)
        
        # DEBUG: –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –±–∞–Ω–∫–∞
        self.take_debug_screenshot("bank_selection_before.png")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –±–∞–Ω–∫–∞
        if not self.check_connection_health():
            logger.error("‚ùå CRITICAL: Connection unhealthy before bank selection!")
            self.take_debug_screenshot("connection_failed_before_bank.png", force=True)
            raise Exception("Connection lost or unhealthy - cannot proceed with bank selection")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ –∏–ª–∏ fallback –Ω–∞ "–í—Å–µ –∫–∞—Ä—Ç—ã"
        korti_selected = False
        for selector in self.selectors['korti_milli_option']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 5: Korti Milli selected")
                    korti_selected = True
                    break
            if korti_selected:
                break
        
        # Fallback: –µ—Å–ª–∏ –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º "–í—Å–µ –∫–∞—Ä—Ç—ã"
        if not korti_selected:
            logger.warning("‚ö†Ô∏è Korti Milli not found, trying '–í—Å–µ –∫–∞—Ä—Ç—ã' fallback")
            
            # DEBUG: –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ fallback
            self.take_debug_screenshot("korti_milli_not_found.png")
            
            fallback_selectors = [
                "//*[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
                "//*[contains(text(), '–í–°–ï –ö–ê–†–¢–´')]",
                "//button[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
                "//div[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
                "//span[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",     # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                "//label[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",    # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                "//*[contains(text(), '–î—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏')]",     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                "//*[contains(@class, 'bank') and contains(text(), '–í—Å–µ')]"
            ]
            
            for selector in fallback_selectors:
                elements = self.find_elements_fast(By.XPATH, selector)
                for element in elements:
                    if element.is_displayed() and self.click_element_fast(element):
                        logger.info("‚úÖ Step 5: '–í—Å–µ –∫–∞—Ä—Ç—ã' selected as fallback")
                        korti_selected = True
                        break
                if korti_selected:
                    break
        
        if not korti_selected:
            logger.error("‚ùå CRITICAL: Neither Korti Milli nor '–í—Å–µ –∫–∞—Ä—Ç—ã' could be selected")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
            if not self.check_connection_health():
                logger.error("‚ùå DOUBLE CHECK: Connection lost during bank selection!")
                self.take_debug_screenshot("connection_lost_during_bank_selection.png", force=True)
                raise Exception("Connection lost during bank selection - this explains why banks were not found")
            
            # –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "–∫–∞—Ä—Ç"
            try:
                card_elements = self._driver.find_elements(By.XPATH, "//*[contains(text(), '–∫–∞—Ä—Ç') or contains(text(), '–ö–ê–†–¢')]")[:5]
                logger.error(f"üîç Found {len(card_elements)} elements with '–∫–∞—Ä—Ç':")
                for i, elem in enumerate(card_elements):
                    try:
                        logger.error(f"  {i+1}. '{elem.text.strip()[:30]}' (visible: {elem.is_displayed()})")
                    except:
                        pass
            except:
                pass
            
            # DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ–≤–∞–ª–µ
            self.take_debug_screenshot("bank_selection_failed_critical.png", force=True)
            self.take_screenshot_conditional("bank_selection_failed.png")
            raise Exception("Bank selection failed - cannot continue without selecting a bank")
        
        # –®–∞–≥ 6: –ü–†–û–î–û–õ–ñ–ò–¢–¨ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in (btn.text or "").upper():
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 6: Continue clicked")
                    break
        
        await asyncio.sleep(0.5)
        self.take_screenshot_conditional("fast_steps_1-6.png")
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Steps 1-6 completed FAST!")
    
    async def _fast_fill_forms(self, payment_data: Dict[str, Any]):
        """–ë–´–°–¢–†–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º 7-9 —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ (—Ü–µ–ª—å: 8-10 —Å–µ–∫—É–Ω–¥)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast form filling steps 7-9")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.retry_on_connection_failure(
            lambda: self._do_fill_forms_steps(payment_data),
            max_retries=2,
            operation_name="form filling"
        )
    
    async def _do_fill_forms_steps(self, payment_data: Dict[str, Any]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º"""
        # –®–∞–≥ 7: –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è - –ú–ì–ù–û–í–ï–ù–ù–û
        card_number = payment_data.get('recipient_card', '')
        for selector in self.selectors['recipient_card']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.type_text_fast(element, card_number):
                    logger.info("‚úÖ Step 7: Recipient card filled")
                    break
        
        # –®–∞–≥–∏ 8-9: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –ë–´–°–¢–†–û
        passport_data = payment_data.get('passport_data', {})
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ü–∞—Å–ø–æ—Ä—Ç –†–§
        for selector in self.selectors['passport_rf_toggle']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                self.click_element_fast(element)
                break
        
        # –ë–´–°–¢–†–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        fields_to_fill = [
            ('passport_series', passport_data.get('passport_series', '')),
            ('passport_number', passport_data.get('passport_number', '')),
            ('passport_date', passport_data.get('passport_date', '')),
            ('surname', passport_data.get('surname', '')),
            ('name', passport_data.get('name', '')),
            ('birthdate', passport_data.get('birthdate', '')),
            ('phone', self._generate_phone())
        ]
        
        for field_key, value in fields_to_fill:
            if not value:
                continue
                
            for selector in self.selectors[field_key]:
                element = self.find_element_fast(By.XPATH, selector, timeout=1)
                if element and element.is_displayed() and element.is_enabled():
                    if self.type_text_fast(element, str(value)):
                        logger.debug(f"‚úÖ {field_key} filled")
                        break
                else:
                    continue
                break
        
        # –®–∞–≥ 9: Checkbox —Å–æ–≥–ª–∞—Å–∏—è - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
        await asyncio.sleep(0.3)
        
        checkboxes = self.find_elements_fast(By.XPATH, "//input[@type='checkbox']")
        for cb in checkboxes:
            try:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
                self._driver.execute_script("arguments[0].click();", cb)
                if cb.is_selected():
                    logger.info("‚úÖ Step 9: Agreement checkbox checked")
                    break
            except:
                continue
        
        self.take_screenshot_conditional("fast_forms_filled.png")
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Forms filled FAST!")
    
    async def _fast_submit_and_captcha(self):
        """–ë–´–°–¢–†–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –ü–ï–†–í–û–ô –∫–∞–ø—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ (—Ü–µ–ª—å: –¥–æ 35 —Å–µ–∫—É–Ω–¥ —Å –∫–∞–ø—á–µ–π)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast submit and FIRST captcha steps 10-11")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.retry_on_connection_failure(
            lambda: self._do_submit_and_captcha_steps(),
            max_retries=2,
            operation_name="submit and captcha"
        )
    
    async def _do_submit_and_captcha_steps(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
        
        # –®–∞–≥ 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in (btn.text or "").upper():
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 10: Final form submitted")
                    break
        
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –®–∞–≥ 11: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —Ä–µ—à–µ–Ω–∏–µ –ü–ï–†–í–û–ô –∫–∞–ø—á–∏
        logger.info("üîê Step 11: CRITICAL FIRST CAPTCHA solving")
        captcha_solved = await self.captcha_solver.solve_captcha(self._driver)
        
        if captcha_solved:
            logger.info("‚úÖ Step 11: FIRST CAPTCHA solved successfully")
        else:
            logger.error("‚ùå Step 11: FIRST CAPTCHA solve FAILED - cannot proceed")
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ - –°–¢–û–ü
            raise Exception("FIRST CAPTCHA solve failed - payment process cannot continue")
        
        self.take_screenshot_conditional("fast_first_captcha_solved.png")
    
    async def _fast_handle_modal_with_second_captcha(self):
        """
        –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –≤–µ—Ä—Å–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        """
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Step 12: DIAGNOSTIC modal + SECOND CAPTCHA handling")
        
        await asyncio.sleep(2)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        # –°–¢–†–û–ì–ò–ô –ø–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        modal_selectors = [
            "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
            "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]",
            "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
            "//h2[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
            "//h3[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]"
        ]
        
        modal_found = False
        modal_element = None
        for selector in modal_selectors:
            element = self.find_element_fast(By.XPATH, selector, timeout=3)
            if element and element.is_displayed():
                logger.info(f"‚úÖ Found '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal with selector: {selector}")
                modal_found = True
                modal_element = element
                break
        
        if not modal_found:
            logger.warning("‚ö†Ô∏è No '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal found - checking for form return scenario")
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.take_screenshot_conditional("no_modal_found_diagnostic.png")
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å–∞–π—Ç –≤–µ—Ä–Ω—É–ª –∫ —Ñ–æ—Ä–º–µ - –∏—â–µ–º —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            await self._handle_form_return_scenario()
            return
        
        self.take_screenshot_conditional("step12_modal_found.png")
        
        # –ü–†–û–í–ï–†–ö–ê –í–¢–û–†–û–ô –ö–ê–ü–ß–ò
        logger.info("üîç CRITICAL: Checking for SECOND CAPTCHA (50% probability)")
        await self._handle_potential_second_captcha()
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó DOM
        logger.info("üîç DIAGNOSTIC: Full DOM analysis for modal button")
        await self._diagnostic_dom_analysis()
        
        # –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ø–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞
        logger.info("üéØ DIAGNOSTIC: Enhanced button finding with full analysis")
        button_clicked = await self._diagnostic_button_click()
        
        if button_clicked:
            logger.info("‚úÖ DIAGNOSTIC SUCCESS: Modal handled successfully!")
            await asyncio.sleep(2)
            self.take_screenshot_conditional("step12_modal_success.png")
        else:
            logger.error("‚ùå DIAGNOSTIC FAILURE: Could not handle modal")
            self.take_screenshot_conditional("step12_modal_failure.png")
            raise Exception("DIAGNOSTIC: Failed to handle modal - payment cannot be completed")
        
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Step 12 DIAGNOSTIC completion - proceeding to result extraction")
    
    async def _handle_form_return_scenario(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–æ—Ä–º–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–∞–ø—á—É, –ø–æ—Ç–æ–º –∏—â–µ–º —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        """
        logger.info("üîç Handling form return scenario - checking for second captcha first")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.take_screenshot_conditional("form_return_scenario.png")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–∞–ø—á—É
        logger.info("üîç CHECKING for potential SECOND CAPTCHA in form return scenario...")
        await self._handle_potential_second_captcha()
        
        logger.info("üîç Now looking for blue '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' button after captcha check")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
        current_url = self._driver.current_url
        logger.info(f"üìç Current location before button search: {current_url}")
        
        # –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ
        if current_url == "https://multitransfer.ru/" or "/transfer/" not in current_url:
            logger.error("‚ùå Already on homepage - payment process failed earlier!")
            logger.error("üí° This means the form submission or previous steps failed")
            self.take_screenshot_conditional("already_on_homepage.png")
            raise Exception("Payment process failed - redirected to homepage before button search")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è 
        continue_button_selectors = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            "//button[contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]", 
            "//input[@type='submit' and contains(@value, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//input[@type='submit' and contains(@value, '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
            "//button[contains(@class, 'btn') and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//button[contains(@class, 'btn-primary') and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//a[contains(@class, 'btn') and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[@type='submit' and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[contains(@class, 'btn') and contains(., '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
            "//button[contains(text(), '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')]",
            "//button[contains(text(), '–û–¢–ü–†–ê–í–ò–¢–¨')]",
            "//button[contains(text(), '–î–∞–ª–µ–µ')]",
            "//button[contains(text(), '–î–ê–õ–ï–ï')]",
            "//button[contains(text(), '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]",
            "//button[contains(text(), '–ü–û–î–¢–í–ï–†–î–ò–¢–¨')]",
            "//button[contains(text(), '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥')]",
            "//button[contains(text(), '–°–û–ó–î–ê–¢–¨ –ü–ï–†–ï–í–û–î')]",
            "//button[contains(text(), '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')]",
            "//button[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò')]",
            
            # Submit –∫–Ω–æ–ø–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            "//input[@type='submit' and contains(@value, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')]",
            "//input[@type='submit' and contains(@value, '–î–∞–ª–µ–µ')]",
            "//input[@type='submit' and contains(@value, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]",
            "//input[@type='submit' and contains(@value, '–°–æ–∑–¥–∞—Ç—å')]",
            
            # Submit —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–æ –ù–ï —Å —Ç–µ–∫—Å—Ç–æ–º Reload/Details)
            "//button[@type='submit' and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            "//input[@type='submit' and not(contains(@value, 'Reload')) and not(contains(@value, 'Details'))]",
            
            # –°–∏–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º (–ù–û –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
            "//button[contains(@class, 'btn-primary') and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            "//button[contains(@class, 'primary') and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            
            # –õ—é–±—ã–µ submit —ç–ª–µ–º–µ–Ω—Ç—ã (–∫—Ä–æ–º–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö)
            "//*[@type='submit' and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            
            # –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º btn (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
            "//button[contains(@class, 'btn') and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ª—é–±—ã–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            "//*[contains(text(), '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[contains(text(), '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')]", 
            "//*[contains(text(), '–¥–∞–ª–µ–µ')]",
            "//*[contains(text(), '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]"
        ]
        
        button_found = False
        for i, selector in enumerate(continue_button_selectors):
            try:
                logger.debug(f"üîç Trying selector {i+1}/{len(continue_button_selectors)}: {selector}")
                button = self.find_element_fast(By.XPATH, selector, timeout=2)
                if button and button.is_displayed():
                    button_text = button.text.strip() if hasattr(button, 'text') else ''
                    button_value = button.get_attribute('value') if button.get_attribute('value') else ''
                    button_tag = button.tag_name.lower()
                    
                    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –≤—Ä–µ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                    bad_buttons = ['reload', 'details', '–Ω–∞–∑–∞–¥', 'back', 'cancel', '–æ—Ç–º–µ–Ω–∞', 'close', '–∑–∞–∫—Ä—ã—Ç—å']
                    if (button_tag not in ['button', 'input', 'a'] or 
                        len(button_text) > 100 or  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        any(bad in button_text.lower() for bad in bad_buttons)):
                        logger.debug(f"   Skipping: bad button - '{button_text}'")
                        continue
                    
                    logger.info(f"‚úÖ Found valid button with selector: {selector}")
                    logger.info(f"   Button: tag='{button_tag}', text='{button_text}', value='{button_value}'")
                    
                    # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ –∏ –∫–ª–∏–∫–∞–µ–º
                    self._driver.execute_script("arguments[0].scrollIntoView(true);", button)
                    await asyncio.sleep(1)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å
                    try:
                        button.click()
                        logger.info("‚úÖ Successfully clicked button with normal click")
                        button_found = True
                        break
                    except Exception as click_error:
                        logger.warning(f"‚ö†Ô∏è Failed to click button with normal click: {click_error}")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                        try:
                            self._driver.execute_script("arguments[0].click();", button)
                            logger.info("‚úÖ Successfully clicked button via JavaScript")
                            button_found = True
                            break
                        except Exception as js_error:
                            logger.warning(f"‚ö†Ô∏è JavaScript click also failed: {js_error}")
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ ActionChains
                            try:
                                from selenium.webdriver.common.action_chains import ActionChains
                                ActionChains(self._driver).move_to_element(button).click().perform()
                                logger.info("‚úÖ Successfully clicked button via ActionChains")
                                button_found = True
                                break
                            except Exception as action_error:
                                logger.warning(f"‚ö†Ô∏è ActionChains click also failed: {action_error}")
                                continue
            except Exception as e:
                logger.debug(f"Selector {selector} failed: {e}")
                continue
        
        if button_found:
            logger.info("‚úÖ Button clicked - verifying page change...")
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            url_before = self._driver.current_url
            await asyncio.sleep(3)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã
            url_after = self._driver.current_url
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –æ—à–∏–±–∫–∏
            error_indicators = [
                "–ü–∞—Å–ø–æ—Ä—Ç –†–§",
                "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –ü–∞—Å–ø–æ—Ä—Ç", 
                "–í–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞",
                "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞",
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
            ]
            
            page_source = self._driver.page_source
            errors_found = [error for error in error_indicators if error in page_source]
            
            if errors_found:
                logger.error(f"‚ùå Click failed - page returned to form validation! Errors: {errors_found}")
                logger.error(f"üìç URL before: {url_before}")
                logger.error(f"üìç URL after: {url_after}")
                self.take_screenshot_conditional("form_return_failed_validation.png")
                
                # –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É
                logger.warning("‚ö†Ô∏è Attempting to handle validation errors...")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                additional_selectors = [
                    "//button[contains(@class, 'btn-primary') and (contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') or contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨'))]",
                    "//input[@type='submit' and (contains(@value, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') or contains(@value, '–ü–†–û–î–û–õ–ñ–ò–¢–¨'))]",
                    "//button[@type='submit']",
                    "//*[@type='submit' and @form]"
                ]
                
                retry_success = False
                for selector in additional_selectors:
                    try:
                        retry_btn = self.find_element_fast(By.XPATH, selector, timeout=2)
                        if retry_btn and retry_btn.is_displayed():
                            logger.info(f"üîÑ Trying alternative button: {selector}")
                            self._driver.execute_script("arguments[0].click();", retry_btn)
                            await asyncio.sleep(2)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            new_page_source = self._driver.page_source
                            new_errors = [error for error in error_indicators if error in new_page_source]
                            if not new_errors:
                                logger.info("‚úÖ Alternative button worked!")
                                retry_success = True
                                break
                    except:
                        continue
                
                if not retry_success:
                    logger.error("‚ùå All retry attempts failed - form validation errors persist")
                    raise Exception("Form return scenario failed - validation errors after button click")
            else:
                logger.info("‚úÖ Form return scenario handled successfully - no validation errors")
                self.take_screenshot_conditional("form_return_success.png")
        else:
            logger.error("‚ùå Could not find any button in form return scenario")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
                current_url = self._driver.current_url
                logger.error(f"üìç Current URL: {current_url}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_title = self._driver.title
                logger.error(f"üìÑ Page title: {page_title}")
                
                # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                all_buttons = self._driver.find_elements(By.TAG_NAME, "button")
                logger.error(f"üîç Found {len(all_buttons)} button elements on page")
                
                for i, btn in enumerate(all_buttons[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–Ω–æ–ø–æ–∫
                    try:
                        btn_text = btn.text.strip()
                        btn_class = btn.get_attribute("class")
                        btn_type = btn.get_attribute("type")
                        btn_visible = btn.is_displayed()
                        logger.error(f"  Button {i+1}: text='{btn_text}', class='{btn_class}', type='{btn_type}', visible={btn_visible}")
                    except:
                        pass
                
                # –ò—â–µ–º –≤—Å–µ input submit —ç–ª–µ–º–µ–Ω—Ç—ã
                all_inputs = self._driver.find_elements(By.XPATH, "//input[@type='submit']")
                logger.error(f"üîç Found {len(all_inputs)} input[type='submit'] elements")
                
                for i, inp in enumerate(all_inputs[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω–ø—É—Ç–æ–≤
                    try:
                        inp_value = inp.get_attribute("value")
                        inp_class = inp.get_attribute("class")
                        inp_visible = inp.is_displayed()
                        logger.error(f"  Input {i+1}: value='{inp_value}', class='{inp_class}', visible={inp_visible}")
                    except:
                        pass
                        
            except Exception as diag_error:
                logger.error(f"‚ùå Error during diagnostic: {diag_error}")
            
            self.take_screenshot_conditional("form_return_failure.png")
            raise Exception("Failed to handle form return scenario - no suitable button found")
    
    async def _handle_potential_second_captcha(self):
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò (50% —Å–ª—É—á–∞–µ–≤)
        
        –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ü–û–°–õ–ï –ø–µ—Ä–≤–æ–π –∫–∞–ø—á–∏, –ü–ï–†–ï–î –∫–ª–∏–∫–æ–º "–ü–†–û–î–û–õ–ñ–ò–¢–¨" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.
        –¢–∏–ø: Yandex Smart Captcha - slider puzzle "Move the slider to complete the puzzle"
        """
        logger.info("üîç CHECKING for potential SECOND CAPTCHA (50% probability)...")
        
        # –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–∞–ø—á–∏
        start_time = time.time()
        second_captcha_timeout = 5  # —Å–µ–∫—É–Ω–¥
        
        while time.time() - start_time < second_captcha_timeout:
            await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –í–¢–û–†–û–ô –∫–∞–ø—á–∏
            second_captcha_indicators = [
                # Yandex Smart Captcha (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
                "//div[contains(@class, 'CheckboxCaptcha')]",
                "//div[contains(@class, 'captcha-checkbox')]", 
                "//iframe[contains(@src, 'captcha.yandex')]",
                "//*[contains(@class, 'ya-captcha')]",
                "//*[contains(@class, 'smart-captcha')]",
                "//*[contains(text(), 'SmartCaptcha by Yandex')]",
                "//*[contains(text(), 'SmartCaptcha by Yandex Cloud')]",
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è slider puzzle (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
                "//*[contains(text(), 'Move the slider')]",
                "//*[contains(text(), 'complete the puzzle')]",
                "//*[contains(text(), 'Pull to the right')]",
                "//div[contains(@class, 'slider')]//following-sibling::*[contains(text(), 'puzzle')]",
                
                # Generic captcha indicators (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                "//div[contains(@class, 'captcha')]",
                "//*[contains(@id, 'captcha')]",
                "//*[contains(text(), 'captcha')]"
            ]
            
            second_captcha_found = False
            for selector in second_captcha_indicators:
                try:
                    elements = self.find_elements_fast(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed():
                            logger.info(f"üö® SECOND CAPTCHA DETECTED with selector: {selector}")
                            second_captcha_found = True
                            break
                    if second_captcha_found:
                        break
                except:
                    continue
            
            if second_captcha_found:
                logger.info("üîê CRITICAL: SECOND CAPTCHA found - solving via Anti-Captcha...")
                self.take_screenshot_conditional("second_captcha_detected.png")
                
                # –†–µ—à–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–∞–ø—á—É —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ CaptchaSolver
                try:
                    captcha_solved = await self.captcha_solver.solve_captcha(self._driver)
                    
                    if captcha_solved:
                        logger.info("‚úÖ SECOND CAPTCHA solved successfully!")
                        self.take_screenshot_conditional("second_captcha_solved.png")
                        return True
                    else:
                        logger.error("‚ùå SECOND CAPTCHA solve FAILED!")
                        self.take_screenshot_conditional("second_captcha_failed.png")
                        # –ù–ï –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                        return False
                        
                except Exception as e:
                    logger.error(f"‚ùå SECOND CAPTCHA solve error: {e}")
                    self.take_screenshot_conditional("second_captcha_error.png")
                    return False
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            logger.debug(f"‚è≥ Waiting for second captcha... ({int(time.time() - start_time)}s/{second_captcha_timeout}s)")
        
        # –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫
        logger.info("‚úÖ No SECOND CAPTCHA detected after 5s - proceeding to modal button click")
        return True
    
    def _generate_phone(self) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        return f"+7{random.randint(900, 999)}{random.randint(1000000, 9999999)}"
    
    async def _get_payment_result(self) -> Dict[str, Any]:
        """–°–¢–†–û–ì–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        logger.info("üîç STRICT result extraction with validation")
        
        await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.take_screenshot_conditional("final_result_page.png")
        
        current_url = self._driver.current_url
        logger.info(f"üìç Current URL: {current_url}")
        
        # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ù–ï –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if current_url == self.base_url or current_url == f"{self.base_url}/":
            logger.error("‚ùå CRITICAL: Still on homepage - payment process FAILED")
            return {
                'success': False,
                'error': 'Payment process failed - still on homepage',
                'current_url': current_url
            }
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ QR-–∫–æ–¥–∞
        qr_code_url = None
        qr_selectors = [
            "//img[contains(@src, 'qr')]",
            "//img[contains(@alt, 'QR')]",
            "//canvas[contains(@class, 'qr')]",
            "//img[contains(@src, 'data:image') and contains(@src, 'qr')]",
            "//*[contains(@class, 'qr-code')]//img"
        ]
        
        for selector in qr_selectors:
            element = self.find_element_fast(By.XPATH, selector, timeout=2)
            if element and element.is_displayed():
                qr_url = element.get_attribute("src")
                if qr_url and ('qr' in qr_url.lower() or 'data:image' in qr_url):
                    qr_code_url = qr_url
                    logger.info(f"‚úÖ QR found: {qr_url[:50]}...")
                    break
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = current_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π URL –∫–∞–∫ –±–∞–∑–æ–≤—ã–π
        payment_selectors = [
            "//a[contains(@href, 'pay')]",
            "//a[contains(@href, 'payment')]",
            "//button[contains(text(), '–û–ø–ª–∞—Ç–∏—Ç—å')]",
            "//a[contains(@href, 'checkout')]"
        ]
        
        for selector in payment_selectors:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element:
                href = element.get_attribute("href")
                if href and ('pay' in href or 'payment' in href or 'checkout' in href):
                    payment_url = href
                    logger.info(f"‚úÖ Payment URL found: {href[:50]}...")
                    break
        
        # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–•–ê
        success_indicators = {
            'qr_code_found': bool(qr_code_url),
            'payment_url_valid': payment_url != self.base_url and payment_url != current_url,
            'url_changed': current_url != self.base_url,
            'no_error_messages': await self._check_no_error_messages()
        }
        
        logger.info(f"üìä Success indicators: {success_indicators}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö: QR –Ω–∞–π–¥–µ–Ω –ò–õ–ò URL –∏–∑–º–µ–Ω–∏–ª—Å—è –ò –Ω–µ—Ç –æ—à–∏–±–æ–∫
        success = (
            success_indicators['qr_code_found'] or 
            (success_indicators['url_changed'] and success_indicators['no_error_messages'])
        )
        
        result = {
            'success': success,
            'qr_code_url': qr_code_url,
            'payment_url': payment_url,
            'current_url': current_url,
            'validation': success_indicators
        }
        
        if not success:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            error_messages = await self._extract_error_messages()
            result['error'] = f'Payment result validation failed. Error messages: {error_messages}'
            result['error_details'] = error_messages
        
        logger.info(f"üìä STRICT result: success={success}")
        if success:
            logger.info("‚úÖ Payment process completed successfully!")
        else:
            logger.error("‚ùå Payment process validation FAILED!")
            
        return result
    
    async def _check_no_error_messages(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        try:
            error_selectors = [
                "//*[contains(@class, 'error')]",
                "//*[contains(@class, 'alert')]",
                "//*[contains(@class, 'warning')]",
                "//*[contains(text(), '–æ—à–∏–±–∫–∞')]",
                "//*[contains(text(), '–û—à–∏–±–∫–∞')]",
                "//*[contains(text(), 'ERROR')]",
                "//*[contains(text(), '–Ω–µ–≤–µ—Ä–Ω')]",
                "//*[contains(text(), '–Ω–µ —É–¥–∞–ª–æ—Å—å')]"
            ]
            
            for selector in error_selectors:
                elements = self.find_elements_fast(By.XPATH, selector)
                for element in elements:
                    if element.is_displayed():
                        error_text = element.text.strip()
                        if error_text:
                            logger.warning(f"‚ö†Ô∏è Error message found: {error_text}")
                            return False
            
            return True
            
        except Exception as e:
            logger.debug(f"Error checking failed: {e}")
            return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
    
    async def _extract_error_messages(self) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            error_messages = []
            error_selectors = [
                "//*[contains(@class, 'error')]",
                "//*[contains(@class, 'alert')]",
                "//*[contains(text(), '–æ—à–∏–±–∫–∞')]",
                "//*[contains(text(), '–û—à–∏–±–∫–∞')]"
            ]
            
            for selector in error_selectors:
                elements = self.find_elements_fast(By.XPATH, selector)
                for element in elements:
                    if element.is_displayed():
                        text = element.text.strip()
                        if text and text not in error_messages:
                            error_messages.append(text)
            
            return "; ".join(error_messages) if error_messages else "No specific error messages found"
            
        except Exception as e:
            logger.debug(f"Extract error messages failed: {e}")
            return "Error extracting error messages"
    
    async def _diagnostic_dom_analysis(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑ DOM –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            logger.info("üîç DIAGNOSTIC: Starting full DOM analysis...")
            
            # 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_buttons_script = """
            var buttons = document.querySelectorAll('button, input[type="button"], input[type="submit"], a[role="button"]');
            var buttonData = [];
            for (var i = 0; i < buttons.length; i++) {
                var btn = buttons[i];
                if (btn.offsetWidth > 0 && btn.offsetHeight > 0) {  // Visible elements only
                    buttonData.push({
                        index: i,
                        tagName: btn.tagName,
                        text: btn.textContent || btn.innerText || btn.value || '',
                        className: btn.className || '',
                        id: btn.id || '',
                        type: btn.type || '',
                        visible: btn.offsetParent !== null,
                        enabled: !btn.disabled,
                        style: btn.getAttribute('style') || ''
                    });
                }
            }
            return buttonData;
            """
            
            button_data = self._driver.execute_script(all_buttons_script)
            logger.info(f"üîç DIAGNOSTIC: Found {len(button_data)} visible buttons")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            for i, btn in enumerate(button_data[:20]):  # –ü–µ—Ä–≤—ã–µ 20 –∫–Ω–æ–ø–æ–∫
                logger.info(f"Button {i}: text='{btn['text'][:50]}', class='{btn['className'][:30]}', enabled={btn['enabled']}")
            
            # 2. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ—Ö–æ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–º
            continue_buttons = []
            for btn in button_data:
                text = btn['text'].strip().upper()
                if any(keyword in text for keyword in ['–ü–†–û–î–û–õ–ñ–ò–¢–¨', 'CONTINUE', 'NEXT', '–î–ê–õ–ï–ï', 'OK', '–ì–û–¢–û–í–û']):
                    continue_buttons.append(btn)
                    logger.info(f"üéØ DIAGNOSTIC: Found potential continue button: '{btn['text']}' (class: {btn['className']})")
            
            # 3. –ê–Ω–∞–ª–∏–∑ iframe (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ iframe)
            iframe_script = """
            var iframes = document.querySelectorAll('iframe');
            var iframeData = [];
            for (var i = 0; i < iframes.length; i++) {
                var iframe = iframes[i];
                iframeData.push({
                    src: iframe.src || '',
                    id: iframe.id || '',
                    className: iframe.className || '',
                    visible: iframe.offsetParent !== null
                });
            }
            return iframeData;
            """
            
            iframe_data = self._driver.execute_script(iframe_script)
            if iframe_data:
                logger.info(f"üîç DIAGNOSTIC: Found {len(iframe_data)} iframes")
                for iframe in iframe_data:
                    logger.info(f"Iframe: src='{iframe['src'][:50]}', class='{iframe['className']}'")
            
            # 4. –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∫–ª–∏–∫–∞
            clickable_script = """
            var clickableElements = [];
            var allElements = document.querySelectorAll('*');
            for (var i = 0; i < allElements.length; i++) {
                var el = allElements[i];
                var hasClick = el.onclick || el.getAttribute('onclick') || 
                              el.addEventListener || window.getComputedStyle(el).cursor === 'pointer';
                if (hasClick && el.offsetWidth > 0 && el.offsetHeight > 0) {
                    var text = el.textContent || el.innerText || '';
                    if (text.includes('–ü–†–û–î–û–õ–ñ–ò–¢–¨') || text.includes('CONTINUE')) {
                        clickableElements.push({
                            tagName: el.tagName,
                            text: text.substring(0, 50),
                            className: el.className || '',
                            id: el.id || ''
                        });
                    }
                }
            }
            return clickableElements;
            """
            
            clickable_data = self._driver.execute_script(clickable_script)
            if clickable_data:
                logger.info(f"üîç DIAGNOSTIC: Found {len(clickable_data)} clickable continue elements")
                for el in clickable_data:
                    logger.info(f"Clickable: {el['tagName']} '{el['text']}' (class: {el['className']})")
            
            return {
                'total_buttons': len(button_data),
                'continue_buttons': continue_buttons,
                'iframes': iframe_data,
                'clickable_elements': clickable_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå DIAGNOSTIC DOM analysis error: {e}")
            return None

    async def _diagnostic_button_click(self) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        try:
            logger.info("üéØ DIAGNOSTIC: Starting enhanced button click methods")
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ JavaScript –ø–æ —Ç–µ–∫—Å—Ç—É
            js_button_click_script = """
            // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            function findContinueButton() {
                var keywords = ['–ü–†–û–î–û–õ–ñ–ò–¢–¨', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'CONTINUE', 'Continue', '–î–ê–õ–ï–ï', '–¥–∞–ª–µ–µ', 'NEXT'];
                var allElements = document.querySelectorAll('*');
                
                for (var i = 0; i < allElements.length; i++) {
                    var el = allElements[i];
                    var text = el.textContent || el.innerText || el.value || '';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    for (var j = 0; j < keywords.length; j++) {
                        if (text.trim() === keywords[j] || text.trim().toUpperCase() === keywords[j].toUpperCase()) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
                            if ((el.tagName === 'BUTTON' || el.tagName === 'A' || el.tagName === 'INPUT') && 
                                el.offsetWidth > 0 && el.offsetHeight > 0 && !el.disabled) {
                                return el;
                            }
                        }
                    }
                }
                return null;
            }
            
            var button = findContinueButton();
            if (button) {
                button.click();
                return {success: true, element: button.tagName, text: button.textContent};
            }
            return {success: false};
            """
            
            logger.info("üéØ DIAGNOSTIC: Method 1 - JavaScript text search")
            result = self._driver.execute_script(js_button_click_script)
            if result.get('success'):
                logger.info(f"‚úÖ DIAGNOSTIC: Method 1 SUCCESS - clicked {result.get('element')} with text '{result.get('text')}'")
                await asyncio.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
                if await self._check_modal_disappeared():
                    return True
            
            # –ú–µ—Ç–æ–¥ 2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –∫–ª–∏–∫ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info("üéØ DIAGNOSTIC: Method 2 - Coordinate click")
            modal_coordinate_script = """
            var modalElements = document.querySelectorAll('*');
            for (var i = 0; i < modalElements.length; i++) {
                var el = modalElements[i];
                var text = el.textContent || el.innerText || '';
                if (text.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö') || text.includes('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ')) {
                    var rect = el.getBoundingClientRect();
                    // –ö–ª–∏–∫ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª (–≥–¥–µ –æ–±—ã—á–Ω–æ –∫–Ω–æ–ø–∫–∏)
                    var clickX = rect.right - 100;
                    var clickY = rect.bottom - 30;
                    
                    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                    var event = new MouseEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: true,
                        clientX: clickX,
                        clientY: clickY
                    });
                    
                    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤ —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                    var targetElement = document.elementFromPoint(clickX, clickY);
                    if (targetElement) {
                        targetElement.dispatchEvent(event);
                        return {success: true, coordinates: [clickX, clickY], target: targetElement.tagName};
                    }
                }
            }
            return {success: false};
            """
            
            result = self._driver.execute_script(modal_coordinate_script)
            if result.get('success'):
                logger.info(f"‚úÖ DIAGNOSTIC: Method 2 SUCCESS - coordinate click at {result.get('coordinates')}")
                await asyncio.sleep(2)
                
                if await self._check_modal_disappeared():
                    return True
            
            # –ú–µ—Ç–æ–¥ 3: –≠–º—É–ª—è—Ü–∏—è Enter/Space/Escape
            logger.info("üéØ DIAGNOSTIC: Method 3 - Keyboard events")
            keyboard_script = """
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            var events = ['Enter', 'Space', 'Escape'];
            for (var i = 0; i < events.length; i++) {
                var event = new KeyboardEvent('keydown', {
                    key: events[i],
                    code: events[i],
                    bubbles: true
                });
                document.dispatchEvent(event);
            }
            return {success: true};
            """
            
            self._driver.execute_script(keyboard_script)
            await asyncio.sleep(2)
            
            if await self._check_modal_disappeared():
                logger.info("‚úÖ DIAGNOSTIC: Method 3 SUCCESS - keyboard event")
                return True
            
            # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –≤—Å–µ–º –≤–∏–¥–∏–º—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info("üéØ DIAGNOSTIC: Method 4 - Area click")
            area_click_script = """
            var modalArea = null;
            var allElements = document.querySelectorAll('*');
            
            // –ù–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            for (var i = 0; i < allElements.length; i++) {
                var el = allElements[i];
                var text = el.textContent || el.innerText || '';
                if (text.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')) {
                    modalArea = el;
                    break;
                }
            }
            
            if (modalArea) {
                var clickableInModal = modalArea.querySelectorAll('button, a, input, div[onclick], span[onclick]');
                for (var j = 0; j < clickableInModal.length; j++) {
                    var clickable = clickableInModal[j];
                    if (clickable.offsetWidth > 0 && clickable.offsetHeight > 0) {
                        clickable.click();
                        return {success: true, clicked: clickable.tagName, text: clickable.textContent};
                    }
                }
            }
            return {success: false};
            """
            
            result = self._driver.execute_script(area_click_script)
            if result.get('success'):
                logger.info(f"‚úÖ DIAGNOSTIC: Method 4 SUCCESS - area click on {result.get('clicked')}")
                await asyncio.sleep(2)
                
                if await self._check_modal_disappeared():
                    return True
            
            logger.error("‚ùå DIAGNOSTIC: All methods failed")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå DIAGNOSTIC button click error: {e}")
            return False

    async def _check_modal_disappeared(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            modal_selectors = [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]"
            ]
            
            for selector in modal_selectors:
                element = self.find_element_fast(By.XPATH, selector, timeout=1)
                if element and element.is_displayed():
                    return False
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL
            current_url = self._driver.current_url
            url_changed = current_url != self.base_url
            
            logger.info(f"üìç URL check: {current_url}, changed: {url_changed}")
            return url_changed
            
        except Exception as e:
            logger.debug(f"Modal check error: {e}")
            return False