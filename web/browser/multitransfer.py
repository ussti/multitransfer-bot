"""
OPTIMIZED MultiTransfer.ru Browser Automation with SECOND CAPTCHA support
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò (50% —Å–ª—É—á–∞–µ–≤)
"""

import logging
import asyncio
import random
import time
import re
import os
import tempfile
import zipfile
import json
from typing import Dict, Any, Optional
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc
from web.captcha.solver import CaptchaSolver
from .system_proxy_helper import system_proxy_manager

logger = logging.getLogger(__name__)

class MultiTransferAutomation:
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è multitransfer.ru —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò"""
    
    def __init__(self, proxy: Optional[Dict[str, Any]] = None, config: Optional[Dict[str, Any]] = None, proxy_manager=None):
        self.proxy = proxy
        self.config = config or {}
        self.base_url = "https://multitransfer.ru"
        self._driver = None
        self.captcha_solver = CaptchaSolver(config)
        self.proxy_manager = proxy_manager
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.screenshot_enabled = config.get('development', {}).get('screenshots_enabled', False)
        self.fast_mode = config.get('multitransfer', {}).get('fast_mode', True)
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ
        self.selectors = {
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (—Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            'transfer_abroad_btn': [
                "//button[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ')]"
            ],
            
            'tajikistan_select': [
                "//span[text()='–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω']/parent::div",
                "//div[contains(text(), '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')]"
            ],
            
            'amount_input': [
                "//input[contains(@placeholder, 'RUB')]",
                "//input[@type='number']"
            ],
            
            'currency_tjs': [
                "//*[text()='TJS']"  # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            ],
            
            'transfer_method_dropdown': [
                "//*[contains(text(), '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±') or contains(text(), '—Å–ø–æ—Å–æ–±')]"  # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            ],
            
            'korti_milli_option': [
                "//*[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]"
            ],
            
            'continue_btn': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ],
            
            'recipient_card': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã']",
                "//input[contains(@placeholder, '–∫–∞—Ä—Ç—ã')]"
            ],
            
            'passport_rf_toggle': [
                "//button[contains(text(), '–ü–∞—Å–ø–æ—Ä—Ç –†–§')]"
            ],
            
            # –ü–æ–ª—è —Ñ–æ—Ä–º—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            'passport_series': [
                "//input[@placeholder='–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞']"
            ],
            
            'passport_number': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞']"
            ],
            
            'passport_date': [
                "//label[contains(text(), '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[2]"
            ],
            
            'surname': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é']"
            ],
            
            'name': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –∏–º—è']"
            ],
            
            'birthdate': [
                "//label[contains(text(), '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[1]"
            ],
            
            'phone': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']"
            ],
            
            'agreement_checkbox': [
                "//input[@type='checkbox']"
            ],
            
            'final_continue': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ],
            
            # Step 12: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            'data_verification_modal': [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]"
            ],
            
            'modal_continue_btn': [
                "(//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')])[last()]",
                "//*[contains(@class, 'modal')]//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ]
        }
    
    async def _setup_driver(self):
        """–ë–´–°–¢–†–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            logger.info("üöÄ Fast Chrome driver setup...")
            
            # –†–ê–ë–û–ß–ò–ô –ü–û–î–•–û–î: Chrome Extension –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            extension_path = None
            if self.proxy and self.proxy.get('user') and self.proxy.get('pass'):
                logger.info("üîß Creating Chrome Extension for proxy auth...")
                try:
                    extension_path = self._create_proxy_auth_extension(
                        self.proxy['user'], 
                        self.proxy['pass']
                    )
                    logger.info("‚úÖ Proxy auth extension created")
                except Exception as e:
                    logger.error(f"‚ùå Failed to create proxy extension: {e}")
                    self.proxy = None
            
            options = uc.ChromeOptions()
            
            # DEBUG MODE START - –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
            debug_mode = os.getenv('DEBUG_BROWSER', 'false').lower() == 'true'
            visual_debug = debug_mode
            
            if visual_debug:
                # –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò - –±—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–∏–º—ã–º –∏ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
                logger.info("üîç DEBUG MODE: Browser will be visible for debugging")
                options.add_argument('--window-size=1400,1000')
                options.add_argument('--start-maximized')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage') 
                options.add_argument('--disable-blink-features=AutomationControlled')
                # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º --disable-web-security –∑–¥–µ—Å—å - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ PROXY —Ä–µ–∂–∏–º–µ
                # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–ª–∞–¥–∫–∏ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, JS, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                logger.info("üé® DEBUG: Enabling images, JavaScript and extensions for better debugging")
            else:
                # –ü–†–û–î–ê–ö–®–ï–ù –†–ï–ñ–ò–ú - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                logger.info("‚ö° PRODUCTION MODE: Optimized settings for speed")
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                options.add_argument('--disable-gpu')
                # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è Proxy6)
                options.add_argument('--disable-blink-features=AutomationControlled')
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - –æ–Ω –∫—ç—à–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏
                # temp_profile = tempfile.mkdtemp(prefix="chrome_profile_")
                # options.add_argument(f'--user-data-dir={temp_profile}')
                options.add_argument('--incognito')  # –í—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∞—è —Å–µ—Å—Å–∏—è
                logger.info("üîß PROXY MODE: Using incognito mode for fresh proxy auth")
                # –ù–ï –æ—Ç–∫–ª—é—á–∞–µ–º extensions –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ (–Ω—É–∂–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
                if not self.proxy:
                    options.add_argument('--disable-extensions')
                options.add_argument('--disable-plugins')
                options.add_argument('--disable-images')  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê –≤–∫–ª—é—á–∞–µ–º JavaScript –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤
                # if not self.proxy:
                #     options.add_argument('--disable-javascript')
                logger.info("üîß PROXY MODE: JavaScript enabled for dynamic content loading")
                options.add_argument('--window-size=1920,1080')
            # DEBUG MODE END
            
            # –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø –õ–û–ì–ò–ö–ò –ò–ó BrowserManager
            if self.proxy:
                proxy_type = self.proxy.get('type', 'http')
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–∫–∞–∫ –≤ BrowserManager)
                if proxy_type == 'http':
                    options.add_argument(f"--proxy-server=http://{self.proxy['ip']}:{self.proxy['port']}")
                else:
                    options.add_argument(f"--proxy-server=socks5://{self.proxy['ip']}:{self.proxy['port']}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º extension –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–∞–∫ –≤ BrowserManager)
                if extension_path:
                    options.add_argument(f"--load-extension={extension_path}")
                    logger.info(f"‚úÖ Proxy auth extension loaded: {extension_path}")
                    
                logger.info(f"üîß Using {proxy_type.upper()} proxy: {self.proxy['ip']}:{self.proxy['port']} (with extension auth)")
                
                if self.proxy.get('provider') == 'ssh_tunnel':
                    logger.info("‚úÖ SSH tunnel proxy configured - no Chrome auth dialogs expected")
                else:
                    logger.info("‚úÖ Chrome Extension proxy configured - no Chrome auth dialogs expected")
            
            # –ë—ã—Å—Ç—Ä—ã–π user agent
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36')
            
            # –£–ë–†–ê–ù–´ –í–°–ï –õ–ò–®–ù–ò–ï –§–õ–ê–ì–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∫–∞–∫ –≤ BrowserManager
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            logger.info("üöÄ Creating Chrome driver with Proxy6 optimizations")
            
            self._driver = uc.Chrome(options=options)
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ (—É–≤–µ–ª–∏—á–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π Proxy6)
            if self.proxy:
                self._driver.implicitly_wait(20)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏ –Ω–∞ macOS
                self._driver.set_page_load_timeout(120)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è Chrome extension auth –Ω–∞ macOS+VPN
                logger.info("‚è±Ô∏è PROXY MODE: Extended timeouts for macOS stability (20s implicit, 120s page load)")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                await asyncio.sleep(3)
                logger.info("‚è≥ PROXY MODE: Extension initialization delay completed")
            else:
                self._driver.implicitly_wait(3)   # –ë—ã—Å—Ç—Ä–æ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                self._driver.set_page_load_timeout(30)  # 30 —Å–µ–∫ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                logger.info("‚ö° DIRECT MODE: Fast timeouts enabled (3s implicit, 30s page load)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if visual_debug:
                logger.info("‚è±Ô∏è DEBUG MODE: Adding extra delay for browser stability")
                await asyncio.sleep(2)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø—Ä–æ–∫—Å–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏  
            if self.proxy:
                logger.info("üîê PROXY MODE: Testing built-in proxy authentication...")
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                await asyncio.sleep(3)
                
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏
                try:
                    logger.info("üåê PROXY TEST: Quick multitransfer.ru test...")
                    self._driver.get("https://multitransfer.ru")
                    await asyncio.sleep(5)
                    
                    page_length = len(self._driver.page_source)
                    logger.info(f"üîç PROXY TEST: Content length={page_length}")
                    
                    if page_length < 1000:
                        # –î–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (SOCKS5 –∏ HTTP —Å URL-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π) –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω—É–∂–µ–Ω
                        if self.proxy.get('type', 'http').lower() in ['socks5', 'http']:
                            logger.warning("‚ö†Ô∏è Proxy auth failed - proxy may be blocked or invalid")
                            logger.warning(f"‚ö†Ô∏è Proxy type: {self.proxy.get('type', 'unknown')}, IP: {self.proxy.get('ip', 'unknown')}")
                        else:
                            # –¢–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±—É–µ–º –¥–∏–∞–ª–æ–≥
                            logger.warning("‚ö†Ô∏è Unknown proxy type - checking for dialog...")
                            await self._handle_proxy_auth_dialog()
                            await asyncio.sleep(3)
                            
                            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                            page_length = len(self._driver.page_source)
                            logger.info(f"üîç PROXY TEST: After manual auth length={page_length}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –¥–ª—è —à—Ç–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                    self._driver.get("about:blank")
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"‚ùå PROXY TEST: Failed: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∫–∞–∫ fallback
                    await self._handle_proxy_auth_dialog()
            
            logger.info("‚úÖ Fast Chrome driver ready")
            return self._driver
            
        except Exception as e:
            logger.error(f"‚ùå Failed to setup Chrome driver: {e}")
            return None
    
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def find_element_fast(self, by, selector, timeout=2):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ (2 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 5)"""
        try:
            element = WebDriverWait(self._driver, timeout).until(
                EC.presence_of_element_located((by, selector))
            )
            return element
        except:
            return None
    
    def find_elements_fast(self, by, selector):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
        try:
            return self._driver.find_elements(by, selector)
        except:
            return []
    
    def click_element_fast(self, element):
        """–ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫"""
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
            self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∫–ª–∏–∫
            element.click()
            return True
        except:
            try:
                self._driver.execute_script("arguments[0].click();", element)
                return True
            except:
                return False
    
    def type_text_fast(self, element, text):
        """–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏)"""
        try:
            element.clear()
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            element.send_keys(text)
            return True
        except:
            return False
    
    async def monitor_verification_modal(self):
        """–ù–ï–ü–†–ï–†–´–í–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' - –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç"""
        try:
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            modal_selectors = [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//h2[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//h3[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//div[contains(@class, 'modal') and contains(., '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]"
            ]
            
            for selector in modal_selectors:
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å timeout=1 —Å–µ–∫—É–Ω–¥–∞
                    element = self.find_element_fast(By.XPATH, selector, timeout=1)
                    if element and element.is_displayed():
                        logger.warning("üö® URGENT: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal detected during operation!")
                        return True
                except:
                    continue
            
            return False
            
        except Exception as e:
            logger.debug(f"Modal monitoring error: {e}")
            return False
    
    async def handle_verification_modal_if_present(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' –µ—Å–ª–∏ –æ–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"""
        try:
            modal_detected = await self.monitor_verification_modal()
            if modal_detected:
                logger.info("üö® HANDLING: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal found - processing immediately")
                
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                self.take_screenshot_conditional("urgent_modal_detected.png")
                
                # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                await self._fast_handle_modal_with_second_captcha()
                
                logger.info("‚úÖ HANDLED: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal processed")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error handling verification modal: {e}")
            return False

    
    
    def take_screenshot_conditional(self, filename):
        """–°–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        if self.screenshot_enabled:
            try:
                import os
                os.makedirs("logs/automation", exist_ok=True)
                self._driver.save_screenshot(f"logs/automation/{filename}")
                logger.debug(f"üì∏ Screenshot: {filename}")
            except:
                pass
    
    def take_debug_screenshot(self, filename: str, force: bool = False):
        """DEBUG —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        import os
        from datetime import datetime
        
        debug_enabled = os.getenv('DEBUG_SCREENSHOTS', 'false').lower() == 'true'
        
        if not force and not debug_enabled:
            return
        
        if not self._driver:
            return
            
        try:
            timestamp = datetime.now().strftime("%H%M%S")
            debug_filename = f"{timestamp}_{filename}"
            
            os.makedirs("logs/automation/debug_screenshots", exist_ok=True)
            
            screenshot_path = f"logs/automation/debug_screenshots/{debug_filename}"
            self._driver.save_screenshot(screenshot_path)
            logger.info(f"üêõ DEBUG Screenshot: {screenshot_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Failed to save debug screenshot: {e}")
    
    def _create_proxy_auth_extension(self, username: str, password: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç Chrome extension –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∫—Å–∏
            password: –ü–∞—Ä–æ–ª—å –ø—Ä–æ–∫—Å–∏
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (.crx —Ñ–∞–π–ª—É)
        """
        try:
            logger.info(f"üîß Creating proxy auth extension for user: {username}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è extension (—Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ BrowserManager)
            extension_dir = os.path.join(os.getcwd(), 'proxy_auth_extension')
            os.makedirs(extension_dir, exist_ok=True)
            
            # Manifest —Ñ–∞–π–ª –¥–ª—è Chrome extension
            manifest = {
                "version": "1.0.0",
                "manifest_version": 2,
                "name": "Chrome Proxy Auth",
                "permissions": [
                    "proxy",
                    "tabs",
                    "unlimitedStorage",
                    "storage",
                    "<all_urls>",
                    "webRequest",
                    "webRequestBlocking"
                ],
                "background": {
                    "scripts": ["background.js"]
                },
                "minimum_chrome_version": "22.0.0"
            }
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π Background script –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Proxy6)
            background_js = f"""
console.log('Proxy6 Auth Extension: Starting');

var config = {{
    mode: "fixed_servers",
    rules: {{
        singleProxy: {{
            scheme: "http",
            host: "{self.proxy['ip']}",
            port: parseInt("{self.proxy['port']}")
        }},
        bypassList: ["localhost", "127.0.0.1", "::1"]
    }}
}};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
chrome.proxy.settings.set({{value: config, scope: "regular"}}, function() {{
    if (chrome.runtime.lastError) {{
        console.error('Proxy6 Auth Extension: Error setting proxy:', chrome.runtime.lastError);
    }} else {{
        console.log('Proxy6 Auth Extension: Proxy configured successfully');
    }}
}});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function callbackFn(details) {{
    console.log('Proxy6 Auth Extension: Auth request for', details.url);
    return {{
        authCredentials: {{
            username: "{username}",
            password: "{password}"
        }}
    }};
}}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
chrome.webRequest.onAuthRequired.addListener(
    callbackFn,
    {{urls: ["<all_urls>"]}},
    ['blocking']
);

console.log('Proxy6 Auth Extension: Ready');
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã extension
            with open(os.path.join(extension_dir, "manifest.json"), 'w', encoding='utf-8') as f:
                json.dump(manifest, f, indent=2)
            
            with open(os.path.join(extension_dir, "background.js"), 'w', encoding='utf-8') as f:
                f.write(background_js)
            
            # –°–æ–∑–¥–∞–µ–º .crx –∞—Ä—Ö–∏–≤
            # –ù–ï —Å–æ–∑–¥–∞–µ–º .crx —Ñ–∞–π–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–∫–∞–∫ –≤ BrowserManager)
            logger.info(f"‚úÖ Proxy auth extension created: {extension_dir}")
            return extension_dir
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create proxy auth extension: {e}")
            raise Exception(f"Proxy auth extension creation failed: {e}")
    
    async def _handle_proxy_auth_dialog(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ Chrome
        """
        try:
            logger.info("üîç Looking for Chrome proxy authentication dialog...")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥—É –ø–æ—è–≤–∏—Ç—å—Å—è
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞
            
            # –°–ø–æ—Å–æ–± 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à–∏ –ø—Ä—è–º–æ –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
            try:
                logger.info("üî§ Trying to fill auth via direct key sending...")
                
                # –ù–∞–∂–∏–º–∞–µ–º Tab —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤ –ø–æ–ª–µ username
                self._driver.switch_to.active_element.send_keys(Keys.TAB)
                await asyncio.sleep(0.5)
                
                # –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º username
                self._driver.switch_to.active_element.clear()
                self._driver.switch_to.active_element.send_keys(self.proxy['user'])
                await asyncio.sleep(0.5)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—é password
                self._driver.switch_to.active_element.send_keys(Keys.TAB)
                await asyncio.sleep(0.5)
                
                # –í–≤–æ–¥–∏–º password
                self._driver.switch_to.active_element.send_keys(self.proxy['pass'])
                await asyncio.sleep(0.5)
                
                # –ù–∞–∂–∏–º–∞–µ–º Enter –∏–ª–∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É Sign In
                self._driver.switch_to.active_element.send_keys(Keys.ENTER)
                
                logger.info("‚úÖ Proxy credentials sent via direct key input")
                await asyncio.sleep(2)
                return True
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Direct key method failed: {e}")
            
            # –°–ø–æ—Å–æ–± 2: –ü–æ–ø—Ä–æ–±—É–µ–º alert
            try:
                alert = self._driver.switch_to.alert
                alert_text = alert.text
                logger.info(f"üîç Found alert: {alert_text}")
                
                if "proxy" in alert_text.lower() or "username" in alert_text.lower():
                    # –î–ª—è –±–∞–∑–æ–≤–æ–π HTTP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    credentials = f"{self.proxy['user']}:{self.proxy['pass']}"
                    alert.send_keys(credentials)
                    alert.accept()
                    logger.info("‚úÖ Credentials sent via alert")
                    return True
                else:
                    alert.dismiss()
                    
            except Exception as e:
                logger.debug(f"No alert found: {e}")
            
            # –°–ø–æ—Å–æ–± 3: –ò—â–µ–º –≤ DOM (fallback)
            try:
                logger.info("üîç Searching for auth fields in DOM...")
                username_selectors = [
                    "input[type='text']",
                    "input[placeholder*='username']",
                    "input[placeholder*='Username']",
                    "input[name='username']",
                    "#username"
                ]
                
                password_selectors = [
                    "input[type='password']",
                    "input[placeholder*='password']", 
                    "input[placeholder*='Password']",
                    "input[name='password']",
                    "#password"
                ]
                
                username_field = None
                password_field = None
                
                # –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
                for selector in username_selectors:
                    try:
                        username_field = self._driver.find_element(By.CSS_SELECTOR, selector)
                        if username_field.is_displayed():
                            break
                    except:
                        continue
                
                for selector in password_selectors:
                    try:
                        password_field = self._driver.find_element(By.CSS_SELECTOR, selector)
                        if password_field.is_displayed():
                            break
                    except:
                        continue
                
                if username_field and password_field:
                    logger.info("üîç Found proxy auth modal fields")
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
                    username_field.clear()
                    username_field.send_keys(self.proxy['user'])
                    
                    password_field.clear()
                    password_field.send_keys(self.proxy['pass'])
                    
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                    submit_selectors = [
                        "button[type='submit']",
                        "input[type='submit']",
                        "button:contains('Sign In')",
                        "button:contains('OK')",
                        "button:contains('Login')"
                    ]
                    
                    submit_button = None
                    for selector in submit_selectors:
                        try:
                            submit_button = self._driver.find_element(By.CSS_SELECTOR, selector)
                            if submit_button.is_displayed():
                                break
                        except:
                            continue
                    
                    if submit_button:
                        submit_button.click()
                        logger.info("‚úÖ Proxy credentials submitted via DOM")
                        return True
                    else:
                        # Fallback: –Ω–∞–∂–∏–º–∞–µ–º Enter
                        password_field.send_keys(Keys.ENTER)
                        logger.info("‚úÖ Proxy credentials submitted via Enter")
                        return True
                        
                else:
                    logger.warning("‚ö†Ô∏è No auth fields found in DOM")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è DOM search failed: {e}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
            logger.warning("‚ö†Ô∏è All proxy auth methods failed")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Proxy auth dialog handling failed: {e}")
            return False

    def check_connection_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º"""
        try:
            current_url = self._driver.current_url
            page_source = self._driver.page_source
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            connection_errors = [
                "can't be reached",
                "ERR_TIMED_OUT", 
                "ERR_CONNECTION_REFUSED",
                "ERR_PROXY_CONNECTION_FAILED",
                "This site can't be reached",
                "took too long to respond",
                "No internet"
            ]
            
            for error in connection_errors:
                if error in page_source:
                    logger.error(f"‚ùå Connection error detected: {error}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–∞–π—Ç–µ
            if "multitransfer" not in current_url.lower():
                logger.error(f"‚ùå Wrong site detected. Current URL: {current_url}")
                return False
                
            logger.debug(f"‚úÖ Connection healthy. URL: {current_url}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error checking connection health: {e}")
            return False
    
    async def switch_proxy_and_retry(self, operation_func, operation_name: str = "operation") -> Any:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.proxy_manager:
            logger.warning("‚ö†Ô∏è No proxy manager available for automatic switching")
            return await operation_func()
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            old_proxy = self.proxy
            if old_proxy and self.proxy_manager:
                logger.info(f"üö´ Marking failed proxy: {old_proxy['ip']}:{old_proxy['port']}")
                await self.proxy_manager.mark_proxy_failed(old_proxy['ip'], old_proxy['port'])
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            logger.info(f"üîÑ Getting new proxy for {operation_name}")
            new_proxy = await self.proxy_manager.get_proxy()
            
            if not new_proxy:
                logger.warning("‚ö†Ô∏è No alternative proxy available - trying direct connection")
                # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                return await self._try_direct_connection(operation_func, operation_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
            if old_proxy and new_proxy['ip'] == old_proxy['ip'] and new_proxy['port'] == old_proxy['port']:
                logger.warning(f"‚ö†Ô∏è Got same proxy again: {new_proxy['ip']}:{new_proxy['port']}")
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω
                new_proxy = await self.proxy_manager.get_proxy()
                if not new_proxy:
                    logger.warning("‚ö†Ô∏è No different proxy available - trying direct connection")
                    return await self._try_direct_connection(operation_func, operation_name)
                elif new_proxy['ip'] == old_proxy['ip'] and new_proxy['port'] == old_proxy['port']:
                    logger.warning("‚ö†Ô∏è Still same proxy - trying direct connection")
                    return await self._try_direct_connection(operation_func, operation_name)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            if self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            await system_proxy_manager.restore_settings()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä
            self.proxy = new_proxy
            logger.info(f"üåê Switched from {old_proxy['ip'] if old_proxy else 'direct'} to {new_proxy['ip']}:{new_proxy['port']}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
            await self._setup_driver()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –∑–∞–Ω–æ–≤–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
            logger.info(f"üåê Re-opening website with new proxy: {self.base_url}")
            self._driver.get(self.base_url)
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            if not self.check_connection_health():
                logger.error("‚ùå New proxy also failed to load site - trying direct connection")
                return await self._try_direct_connection(operation_func, operation_name)
            
            logger.info("‚úÖ Successfully switched proxy and loaded site")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
            result = await operation_func()
                
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Proxy switch failed: {e} - trying direct connection")
            return await self._try_direct_connection(operation_func, operation_name)
    
    async def _try_direct_connection(self, operation_func, operation_name: str) -> Any:
        """Fallback –Ω–∞ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"""
        try:
            logger.info(f"üåê Trying direct connection for {operation_name}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            if self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
            old_proxy = self.proxy
            self.proxy = None
            logger.info(f"üîÄ Switched from proxy {old_proxy['ip'] if old_proxy else 'unknown'} to direct connection")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –±–µ–∑ –ø—Ä–æ–∫—Å–∏
            await self._setup_driver()
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –Ω–∞–ø—Ä—è–º—É—é
            logger.info(f"üåê Opening website directly: {self.base_url}")
            self._driver.get(self.base_url)
            await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∞–π—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            if not self.check_connection_health():
                logger.error("‚ùå Direct connection also failed")
                raise Exception("Both proxy and direct connection failed")
            
            logger.info("‚úÖ Successfully switched to direct connection")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø—Ä—è–º—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
            result = await operation_func()
                
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Direct connection failed: {e}")
            raise Exception(f"All connection methods failed: {e}")
    
    async def retry_on_connection_failure(self, operation_func, max_retries: int = 2, operation_name: str = "operation"):
        """Retry –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
        for attempt in range(max_retries + 1):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π
                if not self.check_connection_health():
                    if attempt < max_retries:
                        logger.warning(f"üîÑ Connection unhealthy, retry {attempt + 1}/{max_retries} for {operation_name}")
                        
                        # –ù–∞ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        if attempt == 0:
                            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                            try:
                                self._driver.refresh()
                                await asyncio.sleep(3)
                                continue
                            except:
                                logger.warning("‚ö†Ô∏è Page refresh failed")
                        
                        # –ù–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                        if attempt >= 1 and self.proxy_manager:
                            try:
                                return await self.switch_proxy_and_retry(operation_func, operation_name)
                            except Exception as switch_error:
                                logger.error(f"‚ùå Proxy switch failed: {switch_error}")
                                
                        await asyncio.sleep(5)
                        continue
                    else:
                        raise Exception(f"Connection failed after {max_retries} retries for {operation_name}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                return await operation_func()
                
            except Exception as e:
                if attempt < max_retries and ("connection" in str(e).lower() or "timeout" in str(e).lower()):
                    logger.warning(f"üîÑ {operation_name} failed (attempt {attempt + 1}), retrying: {e}")
                    await asyncio.sleep(5)
                    continue
                else:
                    raise e
        
        raise Exception(f"All retry attempts failed for {operation_name}")
    
    # –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î
    
    async def create_payment(self, payment_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò (—Ü–µ–ª—å: –¥–æ 40 —Å–µ–∫—É–Ω–¥)"""
        start_time = time.time()
        try:
            logger.info(f"üöÄ FIXED payment creation: {payment_data['amount']} {payment_data.get('currency_from', 'RUB')}")
            
            # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            driver = await self._setup_driver()
            if not driver:
                return {'success': False, 'error': 'Failed to setup browser driver'}
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
            async def open_website():
                logger.info(f"üåê Opening website: {self.base_url}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
                try:
                    self._driver.get(self.base_url)
                    await asyncio.sleep(2)  # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç
                    current_url = self._driver.current_url
                    page_title = self._driver.title
                    
                    logger.info(f"üìÑ Current URL: {current_url}")
                    logger.info(f"üìÑ Page title: '{page_title}'")
                    
                    if not current_url or "about:blank" in current_url or "chrome://" in current_url:
                        logger.error("‚ùå Failed to navigate to website - still on blank page")
                        return False
                        
                    if "multitransfer" not in current_url.lower():
                        logger.warning(f"‚ö†Ô∏è Unexpected URL: {current_url}")
                    
                    logger.info("‚úÖ Website opened successfully")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É - –ø—Ä–æ–∫—Å–∏ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è JS
                    if self.proxy:
                        logger.info("‚è≥ PROXY MODE: Waiting for JavaScript and content to load...")
                        await asyncio.sleep(10)  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ JS
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
                        page_length = len(self._driver.page_source)
                        logger.info(f"üìÑ PROXY MODE: Final page content length: {page_length} bytes")
                        
                        if page_length < 1000:
                            logger.warning("‚ö†Ô∏è Page still looks empty, waiting more...")
                            await asyncio.sleep(5)  # –ï—â–µ 5 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –º–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    
                    self.take_screenshot_conditional("00_homepage.png")
                    return True
                    
                except Exception as e:
                    logger.error(f"‚ùå Error during website navigation: {e}")
                    return False
            
            try:
                await self.retry_on_connection_failure(open_website, max_retries=2, operation_name="opening website")
            except Exception as e:
                logger.error(f"‚ùå Failed to open website: {e}")
                if "target window already closed" in str(e):
                    logger.error("üí° Browser window was closed. This might be due to Chrome flags in debug mode.")
                    logger.error("üîß Try running again - sometimes undetected_chromedriver needs a retry.")
                raise Exception(f"Failed to open website: {e}")
            
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            await self._fast_country_and_amount(payment_data)
            await self._fast_fill_forms(payment_data)
            await self._fast_submit_and_captcha()
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ü—Ä–æ–ø—É—Å–∫ —à–∞–≥–æ–≤ –ø—Ä–∏ —Ä–∞–Ω–Ω–µ–º QR —É—Å–ø–µ—Ö–µ
            if hasattr(self, 'early_qr_success') and self.early_qr_success:
                logger.info("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–ø—É—Å–∫ Step 12 - QR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Step 12: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö" —Å –í–¢–û–†–û–ô –ö–ê–ü–ß–ï–ô
                await self._fast_handle_modal_with_second_captcha()
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ü—Ä–æ–ø—É—Å–∫ Step 13 –ø—Ä–∏ —Ä–∞–Ω–Ω–µ–º QR —É—Å–ø–µ—Ö–µ
            if hasattr(self, 'early_qr_success') and self.early_qr_success:
                logger.info("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–ø—É—Å–∫ Step 13 - QR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            else:
                # Step 13: –§–ò–ù–ê–õ–¨–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ "–ü–†–û–î–û–õ–ñ–ò–¢–¨" –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ QR —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
                current_url_check = self._driver.current_url
                if 'transferId=' in current_url_check and 'paymentSystemTransferNum=' in current_url_check:
                    logger.info("üéâ –ü–†–û–ü–£–°–ö Step 13: –£–∂–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å QR!")
                else:
                    await self._final_continue_button_click()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = await self._get_payment_result()
            
            total_time = time.time() - start_time
            logger.info(f"‚úÖ FIXED payment completed in {total_time:.1f}s!")
            return result
            
        except Exception as e:
            total_time = time.time() - start_time
            logger.error(f"‚ùå Payment failed after {total_time:.1f}s: {e}")
            self.take_screenshot_conditional("error_final.png")
            return {'success': False, 'error': str(e)}
            
        finally:
            if hasattr(self, '_driver') and self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
    
    async def _fast_country_and_amount(self, payment_data: Dict[str, Any]):
        """–ë–´–°–¢–†–´–ï —à–∞–≥–∏ 1-6: —Å—Ç—Ä–∞–Ω–∞ –∏ —Å—É–º–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ (—Ü–µ–ª—å: 8-10 —Å–µ–∫—É–Ω–¥)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast steps 1-6: country and amount")
        
        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        try:
            current_url = self._driver.current_url
            page_source_length = len(self._driver.page_source)
            buttons_count = len(self._driver.find_elements(By.TAG_NAME, "button"))
            
            logger.info(f"üîç DEBUG: URL={current_url}")
            logger.info(f"üîç DEBUG: Page source length={page_source_length}")
            logger.info(f"üîç DEBUG: Buttons found={buttons_count}")
            
            if buttons_count == 0:
                logger.error("‚ùå CRITICAL: No buttons found on page - content may not be loaded!")
                self.take_screenshot_conditional("debug_no_buttons.png")
                
        except Exception as debug_error:
            logger.error(f"‚ùå DEBUG error: {debug_error}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.retry_on_connection_failure(
            lambda: self._do_country_and_amount_steps(payment_data),
            max_retries=2,
            operation_name="country and amount selection"
        )
    
    async def _do_country_and_amount_steps(self, payment_data: Dict[str, Any]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–≥–æ–≤ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –∏ —Å—É–º–º—ã"""
        # –®–∞–≥ 1: –ö–ª–∏–∫ "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" - –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö
        await asyncio.sleep(1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" in (btn.text or ""):
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 1: Transfer abroad clicked")
                    break
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        
        for selector in self.selectors['tajikistan_select']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 2: Tajikistan selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º—ã - –ú–ì–ù–û–í–ï–ù–ù–û
        await asyncio.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        await self.handle_verification_modal_if_present()
        
        for selector in self.selectors['amount_input']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.type_text_fast(element, str(int(payment_data['amount']))):
                    logger.info("‚úÖ Step 3: Amount filled")
                    break
        
        # –®–∞–≥ 4: –í–∞–ª—é—Ç–∞ TJS - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        for selector in self.selectors['currency_tjs']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 4: TJS currency selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 5: –°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
        for selector in self.selectors['transfer_method_dropdown']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    break
        
        await asyncio.sleep(0.3)
        
        # DEBUG: –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –±–∞–Ω–∫–∞
        self.take_debug_screenshot("bank_selection_before.png")
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –±–∞–Ω–∫–∞
        if not self.check_connection_health():
            logger.error("‚ùå CRITICAL: Connection unhealthy before bank selection!")
            self.take_debug_screenshot("connection_failed_before_bank.png", force=True)
            raise Exception("Connection lost or unhealthy - cannot proceed with bank selection")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ –∏–ª–∏ fallback –Ω–∞ "–í—Å–µ –∫–∞—Ä—Ç—ã"
        korti_selected = False
        for selector in self.selectors['korti_milli_option']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 5: Korti Milli selected")
                    korti_selected = True
                    break
            if korti_selected:
                break
        
        # Fallback: –µ—Å–ª–∏ –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–±–∏—Ä–∞–µ–º "–í—Å–µ –∫–∞—Ä—Ç—ã"
        if not korti_selected:
            logger.warning("‚ö†Ô∏è Korti Milli not found, trying '–í—Å–µ –∫–∞—Ä—Ç—ã' fallback")
            
            # DEBUG: –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ fallback
            self.take_debug_screenshot("korti_milli_not_found.png")
            
            fallback_selectors = [
                "//*[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
                "//*[contains(text(), '–í–°–ï –ö–ê–†–¢–´')]",
                "//button[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
                "//div[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",
                "//span[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",     # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                "//label[contains(text(), '–í—Å–µ –∫–∞—Ä—Ç—ã')]",    # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                "//*[contains(text(), '–î—Ä—É–≥–∏–µ –±–∞–Ω–∫–∏')]",     # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                "//*[contains(@class, 'bank') and contains(text(), '–í—Å–µ')]"
            ]
            
            for selector in fallback_selectors:
                elements = self.find_elements_fast(By.XPATH, selector)
                for element in elements:
                    if element.is_displayed() and self.click_element_fast(element):
                        logger.info("‚úÖ Step 5: '–í—Å–µ –∫–∞—Ä—Ç—ã' selected as fallback")
                        korti_selected = True
                        break
                if korti_selected:
                    break
        
        if not korti_selected:
            logger.error("‚ùå CRITICAL: Neither Korti Milli nor '–í—Å–µ –∫–∞—Ä—Ç—ã' could be selected")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
            if not self.check_connection_health():
                logger.error("‚ùå DOUBLE CHECK: Connection lost during bank selection!")
                self.take_debug_screenshot("connection_lost_during_bank_selection.png", force=True)
                raise Exception("Connection lost during bank selection - this explains why banks were not found")
            
            # –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "–∫–∞—Ä—Ç"
            try:
                card_elements = self._driver.find_elements(By.XPATH, "//*[contains(text(), '–∫–∞—Ä—Ç') or contains(text(), '–ö–ê–†–¢')]")[:5]
                logger.error(f"üîç Found {len(card_elements)} elements with '–∫–∞—Ä—Ç':")
                for i, elem in enumerate(card_elements):
                    try:
                        logger.error(f"  {i+1}. '{elem.text.strip()[:30]}' (visible: {elem.is_displayed()})")
                    except:
                        pass
            except:
                pass
            
            # DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ–≤–∞–ª–µ
            self.take_debug_screenshot("bank_selection_failed_critical.png", force=True)
            self.take_screenshot_conditional("bank_selection_failed.png")
            raise Exception("Bank selection failed - cannot continue without selecting a bank")
        
        # –®–∞–≥ 6: –ü–†–û–î–û–õ–ñ–ò–¢–¨ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in (btn.text or "").upper():
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 6: Continue clicked")
                    break
        
        await asyncio.sleep(0.5)
        self.take_screenshot_conditional("fast_steps_1-6.png")
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Steps 1-6 completed FAST!")
    
    async def _fast_fill_forms(self, payment_data: Dict[str, Any]):
        """–ë–´–°–¢–†–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º 7-9 —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ (—Ü–µ–ª—å: 8-10 —Å–µ–∫—É–Ω–¥)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast form filling steps 7-9")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.retry_on_connection_failure(
            lambda: self._do_fill_forms_steps(payment_data),
            max_retries=2,
            operation_name="form filling"
        )
    
    async def _do_fill_forms_steps(self, payment_data: Dict[str, Any]):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º"""
        # –®–∞–≥ 7: –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è - –ú–ì–ù–û–í–ï–ù–ù–û
        card_number = payment_data.get('recipient_card', '')
        for selector in self.selectors['recipient_card']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.type_text_fast(element, card_number):
                    logger.info("‚úÖ Step 7: Recipient card filled")
                    break
        
        # –®–∞–≥–∏ 8-9: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –ë–´–°–¢–†–û
        passport_data = payment_data.get('passport_data', {})
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ü–∞—Å–ø–æ—Ä—Ç –†–§
        for selector in self.selectors['passport_rf_toggle']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                self.click_element_fast(element)
                break
        
        # –ë–´–°–¢–†–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        fields_to_fill = [
            ('passport_series', passport_data.get('passport_series', '')),
            ('passport_number', passport_data.get('passport_number', '')),
            ('passport_date', passport_data.get('passport_date', '')),
            ('surname', passport_data.get('surname', '')),
            ('name', passport_data.get('name', '')),
            ('birthdate', passport_data.get('birthdate', '')),
            ('phone', self._generate_phone())
        ]
        
        for field_key, value in fields_to_fill:
            if not value:
                continue
                
            for selector in self.selectors[field_key]:
                element = self.find_element_fast(By.XPATH, selector, timeout=1)
                if element and element.is_displayed() and element.is_enabled():
                    if self.type_text_fast(element, str(value)):
                        logger.debug(f"‚úÖ {field_key} filled")
                        break
                else:
                    continue
                break
        
        # –®–∞–≥ 9: Checkbox —Å–æ–≥–ª–∞—Å–∏—è - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
        await asyncio.sleep(0.3)
        
        checkboxes = self.find_elements_fast(By.XPATH, "//input[@type='checkbox']")
        checkbox_checked = False
        for cb in checkboxes:
            try:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
                self._driver.execute_script("arguments[0].click();", cb)
                if cb.is_selected():
                    logger.info("‚úÖ Step 9: Agreement checkbox checked")
                    checkbox_checked = True
                    break
            except:
                continue
        
        # –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ —á–µ–∫–±–æ–∫—Å—É —Å–æ–≥–ª–∞—Å–∏—è –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        if checkbox_checked:
            logger.info("üö® FAST CHECK: Quick modal check after checkbox (2s max)")
            await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ 2 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 10
            for attempt in range(2):
                modal_detected = await self.handle_verification_modal_if_present()
                if modal_detected:
                    logger.info("‚úÖ HANDLED: Modal found and processed quickly")
                    break
                await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 2 —Ä–∞–∑–∞ –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ
            
            logger.info("‚úÖ FAST CHECK: Modal check completed (2s total)")
        
        self.take_screenshot_conditional("fast_forms_filled.png")
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Forms filled FAST!")
    
    async def _fast_submit_and_captcha(self):
        """–ë–´–°–¢–†–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –ü–ï–†–í–û–ô –∫–∞–ø—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ (—Ü–µ–ª—å: –¥–æ 35 —Å–µ–∫—É–Ω–¥ —Å –∫–∞–ø—á–µ–π)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast submit and FIRST captcha steps 10-11")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.retry_on_connection_failure(
            lambda: self._do_submit_and_captcha_steps(),
            max_retries=2,
            operation_name="submit and captcha"
        )
    
    async def _do_submit_and_captcha_steps(self):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏"""
        
        # –®–∞–≥ 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        form_submitted = False
        for btn in buttons:
            if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in (btn.text or "").upper():
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 10: Final form submitted")
                    form_submitted = True
                    break
        
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        if form_submitted:
            logger.info("üö® MONITORING: Checking for '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal after form submit")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            for attempt in range(2):
                modal_detected = await self.handle_verification_modal_if_present()
                if modal_detected:
                    logger.info("‚úÖ HANDLED: Modal processed after form submit")
                    break
                await asyncio.sleep(1)
            
            logger.info("‚úÖ MONITORING: Modal check completed after form submit")
        
        # –®–∞–≥ 11: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —Ä–µ—à–µ–Ω–∏–µ –ü–ï–†–í–û–ô –∫–∞–ø—á–∏
        logger.info("üîê Step 11: CRITICAL FIRST CAPTCHA solving")
        captcha_solved = await self.captcha_solver.solve_captcha(self._driver)
        
        if captcha_solved:
            logger.info("‚úÖ Step 11: FIRST CAPTCHA solved successfully")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞–ø—á–∏ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            logger.info("üö® MONITORING: Checking for '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal after FIRST captcha")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏
            for attempt in range(2):
                modal_detected = await self.handle_verification_modal_if_present()
                if modal_detected:
                    logger.info("‚úÖ HANDLED: Modal processed after FIRST captcha")
                    break
                await asyncio.sleep(1)
            
            logger.info("‚úÖ MONITORING: Modal check completed after FIRST captcha")
            
        else:
            logger.error("‚ùå Step 11: FIRST CAPTCHA solve FAILED - cannot proceed")
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ - –°–¢–û–ü
            raise Exception("FIRST CAPTCHA solve failed - payment process cannot continue")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ QR —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞–ø—á–∏
        current_url_after_captcha = self._driver.current_url
        if 'transferId=' in current_url_after_captcha and 'paymentSystemTransferNum=' in current_url_after_captcha:
            logger.info("üéâ –†–ê–ù–ù–ò–ô –£–°–ü–ï–•: QR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ Step 11 (–ø–µ—Ä–≤–∞—è –∫–∞–ø—á–∞)!")
            logger.info(f"üíæ –§–ò–ù–ê–õ–¨–ù–´–ô URL: {current_url_after_captcha}")
            self.successful_qr_url = current_url_after_captcha
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
            self.early_qr_success = True
        else:
            self.early_qr_success = False
        
        self.take_screenshot_conditional("fast_first_captcha_solved.png")
    
    async def _fast_handle_modal_with_second_captcha(self):
        """
        –ë–´–°–¢–†–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å 10-—Å–µ–∫—É–Ω–¥–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º QR –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        """
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Step 12: FAST modal + SECOND CAPTCHA handling (10s timeout)")
        step12_start = time.time()
        
        # –ü–†–û–í–ï–†–ö–ê QR –†–ê–ù–¨–®–ï - –µ—Å–ª–∏ —É–∂–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –º–æ–¥–∞–ª–æ–∫
        current_url = self._driver.current_url
        if ('transferId=' in current_url and 'paymentSystemTransferNum=' in current_url):
            logger.info("üéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å QR - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Step 12!")
            logger.info(f"üíæ –°–û–•–†–ê–ù–ï–ù —É—Å–ø–µ—à–Ω—ã–π URL –¥–ª—è Step 14: {current_url}")
            self.successful_qr_url = current_url
            elapsed = time.time() - step12_start
            logger.info(f"‚úÖ Step 12 completed in {elapsed:.1f}s (QR page detected early)")
            return
        
        # –ë–´–°–¢–†–´–ô –ø–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö" —Å 10-—Å–µ–∫—É–Ω–¥–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
        modal_selectors = [
            "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
            "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]",
            "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
            "//h2[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
            "//h3[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]"
        ]
        
        modal_found = False
        modal_element = None
        
        # –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ú–ê–ö–°–ò–ú–£–ú 3 —Å–µ–∫—É–Ω–¥ (—É—Å–∫–æ—Ä–µ–Ω–æ)
        start_time = time.time()
        timeout_seconds = 3
        
        while (time.time() - start_time) < timeout_seconds:
            for selector in modal_selectors:
                element = self.find_element_fast(By.XPATH, selector, timeout=1)
                if element and element.is_displayed():
                    logger.info(f"‚úÖ Found '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal with selector: {selector} after {time.time() - start_time:.1f}s")
                    modal_found = True
                    modal_element = element
                    break
            
            if modal_found:
                break
                
            await asyncio.sleep(0.5)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        
        if not modal_found:
            elapsed = time.time() - step12_start
            logger.warning(f"‚ö†Ô∏è No '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal found after {elapsed:.1f}s - proceeding to Step 13")
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.take_screenshot_conditional("no_modal_found_proceeding_step13.png")
            logger.info(f"‚úÖ Step 12 completed in {elapsed:.1f}s (no modal)")
            return
        
        self.take_screenshot_conditional("step12_modal_found.png")
        
        # –ü–†–û–í–ï–†–ö–ê –í–¢–û–†–û–ô –ö–ê–ü–ß–ò
        logger.info("üîç CRITICAL: Checking for SECOND CAPTCHA (50% probability)")
        await self._handle_potential_second_captcha()
        
        # –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –ü–†–û–°–¢–û–ô –ü–û–î–•–û–î: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä [last()]
        logger.info("üéØ ORIGINAL: Using simple [last()] selector for modal button")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal_button_selectors = [
            # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –ü–†–û–î–û–õ–ñ–ò–¢–¨ (–Ω–µ —Ç–æ–ª—å–∫–æ button)
            "//*[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",  
            "//*[contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[text()='–ü–†–û–î–û–õ–ñ–ò–¢–¨']",
            "//*[text()='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å']",
            # –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]/following::*[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
            "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]/following::*[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
            # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –ü–†–û–î–û–õ–ñ–ò–¢–¨
            "//div[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨') and contains(@class, 'btn')]",
            "//a[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
            "//span[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
        ]
        
        button_clicked = False
        for selector in modal_button_selectors:
            try:
                button = self.find_element_fast(By.XPATH, selector, timeout=2)
                if button and button.is_displayed():
                    # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –∫—Ä–µ—Å—Ç–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
                    button_text = button.text.strip() if hasattr(button, 'text') else ''
                    button_html = button.get_attribute('outerHTML')[:100] if button else ''
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    if (button_text in ['√ó', '‚úï', 'X', 'x'] or 
                        'close' in button_html.lower() or 
                        'cross' in button_html.lower() or
                        button.get_attribute('aria-label') in ['Close', '–ó–∞–∫—Ä—ã—Ç—å']):
                        logger.debug(f"‚ö†Ô∏è Skipping close button: text='{button_text}', html='{button_html[:50]}'")
                        continue
                    
                    logger.info(f"‚úÖ FIXED: Found modal button with selector: {selector}")
                    logger.info(f"   Button text: '{button_text}', HTML: '{button_html[:50]}'")
                    
                    # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ
                    self._driver.execute_script("arguments[0].scrollIntoView(true);", button)
                    await asyncio.sleep(0.5)
                    
                    # –ö–ª–∏–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    try:
                        button.click()
                        logger.info("‚úÖ FIXED: Modal button clicked successfully")
                        button_clicked = True
                        break
                    except:
                        # Fallback –∫ JavaScript –∫–ª–∏–∫—É
                        self._driver.execute_script("arguments[0].click();", button)
                        logger.info("‚úÖ FIXED: Modal button clicked via JavaScript")
                        button_clicked = True
                        break
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è Selector {selector} failed: {e}")
                continue
        
        if button_clicked:
            logger.info("‚úÖ ORIGINAL SUCCESS: Modal handled with simple approach!")
            await asyncio.sleep(2)
            self.take_screenshot_conditional("step12_modal_success.png")
        else:
            logger.error("‚ùå ORIGINAL FAILURE: Could not find modal button")
            self.take_screenshot_conditional("step12_modal_failure.png")
            raise Exception("ORIGINAL: Failed to handle modal - payment cannot be completed")
        
        elapsed = time.time() - step12_start
        logger.info(f"‚úÖ Step 12 completed in {elapsed:.1f}s (modal found and processed)")
    
    async def _handle_form_return_scenario(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–æ—Ä–º–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–∞–ø—á—É, –ø–æ—Ç–æ–º –∏—â–µ–º —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        """
        logger.info("üîç Handling form return scenario - checking for second captcha first")
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.take_screenshot_conditional("form_return_scenario.png")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–∞–ø—á—É
        logger.info("üîç CHECKING for potential SECOND CAPTCHA in form return scenario...")
        await self._handle_potential_second_captcha()
        
        logger.info("üîç Now looking for blue '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' button after captcha check")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
        current_url = self._driver.current_url
        logger.info(f"üìç Current location before button search: {current_url}")
        
        # –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ
        if current_url == "https://multitransfer.ru/" or "/transfer/" not in current_url:
            logger.error("‚ùå Already on homepage - payment process failed earlier!")
            logger.error("üí° This means the form submission or previous steps failed")
            self.take_screenshot_conditional("already_on_homepage.png")
            raise Exception("Payment process failed - redirected to homepage before button search")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è 
        continue_button_selectors = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            "//button[contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]", 
            "//input[@type='submit' and contains(@value, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//input[@type='submit' and contains(@value, '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
            "//button[contains(@class, 'btn') and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//button[contains(@class, 'btn-primary') and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//a[contains(@class, 'btn') and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[@type='submit' and contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[contains(@class, 'btn') and contains(., '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
            "//button[contains(text(), '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')]",
            "//button[contains(text(), '–û–¢–ü–†–ê–í–ò–¢–¨')]",
            "//button[contains(text(), '–î–∞–ª–µ–µ')]",
            "//button[contains(text(), '–î–ê–õ–ï–ï')]",
            "//button[contains(text(), '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]",
            "//button[contains(text(), '–ü–û–î–¢–í–ï–†–î–ò–¢–¨')]",
            "//button[contains(text(), '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥')]",
            "//button[contains(text(), '–°–û–ó–î–ê–¢–¨ –ü–ï–†–ï–í–û–î')]",
            "//button[contains(text(), '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏')]",
            "//button[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò')]",
            
            # Submit –∫–Ω–æ–ø–∫–∏ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            "//input[@type='submit' and contains(@value, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')]",
            "//input[@type='submit' and contains(@value, '–î–∞–ª–µ–µ')]",
            "//input[@type='submit' and contains(@value, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]",
            "//input[@type='submit' and contains(@value, '–°–æ–∑–¥–∞—Ç—å')]",
            
            # Submit —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–æ –ù–ï —Å —Ç–µ–∫—Å—Ç–æ–º Reload/Details)
            "//button[@type='submit' and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            "//input[@type='submit' and not(contains(@value, 'Reload')) and not(contains(@value, 'Details'))]",
            
            # –°–∏–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º (–ù–û –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
            "//button[contains(@class, 'btn-primary') and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            "//button[contains(@class, 'primary') and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            
            # –õ—é–±—ã–µ submit —ç–ª–µ–º–µ–Ω—Ç—ã (–∫—Ä–æ–º–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö)
            "//*[@type='submit' and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            
            # –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å–∞–º btn (–∏—Å–∫–ª—é—á–∞—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
            "//button[contains(@class, 'btn') and not(contains(text(), 'Reload')) and not(contains(text(), 'Details'))]",
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ª—é–±—ã–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            "//*[contains(text(), '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
            "//*[contains(text(), '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å')]", 
            "//*[contains(text(), '–¥–∞–ª–µ–µ')]",
            "//*[contains(text(), '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')]"
        ]
        
        button_found = False
        for i, selector in enumerate(continue_button_selectors):
            try:
                logger.debug(f"üîç Trying selector {i+1}/{len(continue_button_selectors)}: {selector}")
                button = self.find_element_fast(By.XPATH, selector, timeout=2)
                if button and button.is_displayed():
                    button_text = button.text.strip() if hasattr(button, 'text') else ''
                    button_value = button.get_attribute('value') if button.get_attribute('value') else ''
                    button_tag = button.tag_name.lower()
                    
                    # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –≤—Ä–µ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                    bad_buttons = ['reload', 'details', '–Ω–∞–∑–∞–¥', 'back', 'cancel', '–æ—Ç–º–µ–Ω–∞', 'close', '–∑–∞–∫—Ä—ã—Ç—å']
                    if (button_tag not in ['button', 'input', 'a'] or 
                        len(button_text) > 100 or  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        any(bad in button_text.lower() for bad in bad_buttons)):
                        logger.debug(f"   Skipping: bad button - '{button_text}'")
                        continue
                    
                    logger.info(f"‚úÖ Found valid button with selector: {selector}")
                    logger.info(f"   Button: tag='{button_tag}', text='{button_text}', value='{button_value}'")
                    
                    # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ –∏ –∫–ª–∏–∫–∞–µ–º
                    self._driver.execute_script("arguments[0].scrollIntoView(true);", button)
                    await asyncio.sleep(1)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å
                    try:
                        button.click()
                        logger.info("‚úÖ Successfully clicked button with normal click")
                        button_found = True
                        break
                    except Exception as click_error:
                        logger.warning(f"‚ö†Ô∏è Failed to click button with normal click: {click_error}")
                        # –ü–æ–ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                        try:
                            self._driver.execute_script("arguments[0].click();", button)
                            logger.info("‚úÖ Successfully clicked button via JavaScript")
                            button_found = True
                            break
                        except Exception as js_error:
                            logger.warning(f"‚ö†Ô∏è JavaScript click also failed: {js_error}")
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ ActionChains
                            try:
                                from selenium.webdriver.common.action_chains import ActionChains
                                ActionChains(self._driver).move_to_element(button).click().perform()
                                logger.info("‚úÖ Successfully clicked button via ActionChains")
                                button_found = True
                                break
                            except Exception as action_error:
                                logger.warning(f"‚ö†Ô∏è ActionChains click also failed: {action_error}")
                                continue
            except Exception as e:
                logger.debug(f"Selector {selector} failed: {e}")
                continue
        
        if button_found:
            logger.info("‚úÖ Button clicked - verifying page change...")
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            url_before = self._driver.current_url
            await asyncio.sleep(3)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã
            url_after = self._driver.current_url
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –æ—à–∏–±–∫–∏
            error_indicators = [
                "–ü–∞—Å–ø–æ—Ä—Ç –†–§",
                "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –ü–∞—Å–ø–æ—Ä—Ç", 
                "–í–≤–µ–¥–∏—Ç–µ 4 —Ü–∏—Ñ—Ä—ã —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞",
                "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞",
                "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
            ]
            
            page_source = self._driver.page_source
            errors_found = [error for error in error_indicators if error in page_source]
            
            if errors_found:
                logger.error(f"‚ùå Click failed - page returned to form validation! Errors: {errors_found}")
                logger.error(f"üìç URL before: {url_before}")
                logger.error(f"üìç URL after: {url_after}")
                self.take_screenshot_conditional("form_return_failed_validation.png")
                
                # –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É
                logger.warning("‚ö†Ô∏è Attempting to handle validation errors...")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                additional_selectors = [
                    "//button[contains(@class, 'btn-primary') and (contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') or contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨'))]",
                    "//input[@type='submit' and (contains(@value, '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å') or contains(@value, '–ü–†–û–î–û–õ–ñ–ò–¢–¨'))]",
                    "//button[@type='submit']",
                    "//*[@type='submit' and @form]"
                ]
                
                retry_success = False
                for selector in additional_selectors:
                    try:
                        retry_btn = self.find_element_fast(By.XPATH, selector, timeout=2)
                        if retry_btn and retry_btn.is_displayed():
                            logger.info(f"üîÑ Trying alternative button: {selector}")
                            self._driver.execute_script("arguments[0].click();", retry_btn)
                            await asyncio.sleep(2)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            new_page_source = self._driver.page_source
                            new_errors = [error for error in error_indicators if error in new_page_source]
                            if not new_errors:
                                logger.info("‚úÖ Alternative button worked!")
                                retry_success = True
                                break
                    except:
                        continue
                
                if not retry_success:
                    logger.error("‚ùå All retry attempts failed - form validation errors persist")
                    raise Exception("Form return scenario failed - validation errors after button click")
            else:
                logger.info("‚úÖ Form return scenario handled successfully - no validation errors")
                self.take_screenshot_conditional("form_return_success.png")
        else:
            logger.error("‚ùå Could not find any button in form return scenario")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
                current_url = self._driver.current_url
                logger.error(f"üìç Current URL: {current_url}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_title = self._driver.title
                logger.error(f"üìÑ Page title: {page_title}")
                
                # –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                all_buttons = self._driver.find_elements(By.TAG_NAME, "button")
                logger.error(f"üîç Found {len(all_buttons)} button elements on page")
                
                for i, btn in enumerate(all_buttons[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–Ω–æ–ø–æ–∫
                    try:
                        btn_text = btn.text.strip()
                        btn_class = btn.get_attribute("class")
                        btn_type = btn.get_attribute("type")
                        btn_visible = btn.is_displayed()
                        logger.error(f"  Button {i+1}: text='{btn_text}', class='{btn_class}', type='{btn_type}', visible={btn_visible}")
                    except:
                        pass
                
                # –ò—â–µ–º –≤—Å–µ input submit —ç–ª–µ–º–µ–Ω—Ç—ã
                all_inputs = self._driver.find_elements(By.XPATH, "//input[@type='submit']")
                logger.error(f"üîç Found {len(all_inputs)} input[type='submit'] elements")
                
                for i, inp in enumerate(all_inputs[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–Ω–ø—É—Ç–æ–≤
                    try:
                        inp_value = inp.get_attribute("value")
                        inp_class = inp.get_attribute("class")
                        inp_visible = inp.is_displayed()
                        logger.error(f"  Input {i+1}: value='{inp_value}', class='{inp_class}', visible={inp_visible}")
                    except:
                        pass
                        
            except Exception as diag_error:
                logger.error(f"‚ùå Error during diagnostic: {diag_error}")
            
            self.take_screenshot_conditional("form_return_failure.png")
            raise Exception("Failed to handle form return scenario - no suitable button found")
    
    async def _handle_potential_second_captcha(self):
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –í–¢–û–†–û–ô –ö–ê–ü–ß–ò (50% —Å–ª—É—á–∞–µ–≤)
        
        –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ü–û–°–õ–ï –ø–µ—Ä–≤–æ–π –∫–∞–ø—á–∏, –ü–ï–†–ï–î –∫–ª–∏–∫–æ–º "–ü–†–û–î–û–õ–ñ–ò–¢–¨" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ.
        –¢–∏–ø: Yandex Smart Captcha - slider puzzle "Move the slider to complete the puzzle"
        """
        logger.info("üîç CHECKING for potential SECOND CAPTCHA (50% probability)...")
        
        # –î–∞–µ–º 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–∞–ø—á–∏
        start_time = time.time()
        second_captcha_timeout = 5  # —Å–µ–∫—É–Ω–¥
        
        while time.time() - start_time < second_captcha_timeout:
            await asyncio.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            
            # –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –í–¢–û–†–û–ô –∫–∞–ø—á–∏
            second_captcha_indicators = [
                # Yandex Smart Captcha (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
                "//div[contains(@class, 'CheckboxCaptcha')]",
                "//div[contains(@class, 'captcha-checkbox')]", 
                "//iframe[contains(@src, 'captcha.yandex')]",
                "//*[contains(@class, 'ya-captcha')]",
                "//*[contains(@class, 'smart-captcha')]",
                "//*[contains(text(), 'SmartCaptcha by Yandex')]",
                "//*[contains(text(), 'SmartCaptcha by Yandex Cloud')]",
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è slider puzzle (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
                "//*[contains(text(), 'Move the slider')]",
                "//*[contains(text(), 'complete the puzzle')]",
                "//*[contains(text(), 'Pull to the right')]",
                "//div[contains(@class, 'slider')]//following-sibling::*[contains(text(), 'puzzle')]",
                
                # Generic captcha indicators (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                "//div[contains(@class, 'captcha')]",
                "//*[contains(@id, 'captcha')]",
                "//*[contains(text(), 'captcha')]"
            ]
            
            second_captcha_found = False
            for selector in second_captcha_indicators:
                try:
                    elements = self.find_elements_fast(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed():
                            logger.info(f"üö® SECOND CAPTCHA DETECTED with selector: {selector}")
                            second_captcha_found = True
                            break
                    if second_captcha_found:
                        break
                except:
                    continue
            
            if second_captcha_found:
                logger.info("üîê CRITICAL: SECOND CAPTCHA found - solving via Anti-Captcha...")
                self.take_screenshot_conditional("second_captcha_detected.png")
                
                # –†–µ—à–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–∞–ø—á—É —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ CaptchaSolver
                try:
                    captcha_solved = await self.captcha_solver.solve_captcha(self._driver)
                    
                    if captcha_solved:
                        logger.info("‚úÖ SECOND CAPTCHA solved successfully!")
                        self.take_screenshot_conditional("second_captcha_solved.png")
                        return True
                    else:
                        logger.error("‚ùå SECOND CAPTCHA solve FAILED!")
                        self.take_screenshot_conditional("second_captcha_failed.png")
                        # –ù–ï –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                        return False
                        
                except Exception as e:
                    logger.error(f"‚ùå SECOND CAPTCHA solve error: {e}")
                    self.take_screenshot_conditional("second_captcha_error.png")
                    return False
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            logger.debug(f"‚è≥ Waiting for second captcha... ({int(time.time() - start_time)}s/{second_captcha_timeout}s)")
        
        # –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫
        logger.info("‚úÖ No SECOND CAPTCHA detected after 5s - proceeding to modal button click")
        return True
    
    def _generate_phone(self) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        return f"+7{random.randint(900, 999)}{random.randint(1000000, 9999999)}"
    
    async def _get_payment_result(self) -> Dict[str, Any]:
        """–°–¢–†–û–ì–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ URL
        """
        logger.info("üìç Step 14: Extract payment result (QR code/URL)")
        
        await asyncio.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        
        current_url = self._driver.current_url
        logger.info(f"üìç Final URL: {current_url}")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–ï–ö–£–©–ò–ô —Ñ–∏–Ω–∞–ª—å–Ω—ã–π URL –≤–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ
        if 'transferId=' in current_url and 'paymentSystemTransferNum=' in current_url:
            logger.info("üéâ –£–°–ü–ï–•: –§–∏–Ω–∞–ª—å–Ω—ã–π URL —Å–æ–¥–µ—Ä–∂–∏—Ç transferId –∏ paymentSystemTransferNum!")
        elif hasattr(self, 'successful_qr_url') and self.successful_qr_url and 'transferId=' in self.successful_qr_url:
            logger.info(f"üíæ Fallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL –∏–∑ Step 12: {self.successful_qr_url}")
            current_url = self.successful_qr_url
            logger.info("üéâ –£–°–ü–ï–•: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL —Å–æ–¥–µ—Ä–∂–∏—Ç transferId –∏ paymentSystemTransferNum!")
        else:
            logger.warning("‚ö†Ô∏è –ù–∏ —Ç–µ–∫—É—â–∏–π, –Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç QR –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
        self.take_screenshot_conditional("final_result_page.png")
        
        # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ù–ï –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if current_url == self.base_url or current_url == f"{self.base_url}/":
            logger.error("‚ùå CRITICAL: Still on homepage - payment process FAILED")
            return {
                'success': False,
                'error': 'Payment process failed - still on homepage',
                'current_url': current_url
            }
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ QR-–∫–æ–¥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        logger.info("üîç –ò—â–µ–º QR –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        qr_code_url = None
        qr_selectors = [
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Canvas —ç–ª–µ–º–µ–Ω—Ç—ã (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ QR)
            "//canvas",
            "//canvas[contains(@class, 'qr')]",
            "//canvas[contains(@id, 'qr')]",
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ data URI
            "//img[starts-with(@src, 'data:image')]",
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: QR-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            "//img[contains(@src, 'qr')]",
            "//img[contains(@alt, 'qr')]", 
            "//img[contains(@alt, 'QR')]",
            "//img[contains(@class, 'qr')]",
            "//img[contains(@id, 'qr')]",
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å QR
            "//*[contains(@class, 'qr')]//img",
            "//*[contains(@class, 'qr')]//canvas",
            "//*[contains(@class, 'qrcode')]//img",
            "//*[contains(@class, 'qrcode')]//canvas",
            "//*[contains(@id, 'qr')]//img",
            "//*[contains(@id, 'qr')]//canvas",
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –û–±—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "//img[contains(@src, 'png')]",
            "//img[contains(@src, 'jpg')]",
            "//img[contains(@src, 'jpeg')]"
        ]
        
        for i, selector in enumerate(qr_selectors, 1):
            elements = self.find_elements_fast(By.XPATH, selector)
            logger.info(f"üîç Selector {i}: {selector} - –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            for element in elements:
                if not element.is_displayed():
                    continue
                    
                # –î–ª—è canvas –ø–æ–ª—É—á–∞–µ–º QR —á–µ—Ä–µ–∑ JS
                if element.tag_name == 'canvas':
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä canvas (QR –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º)
                        canvas_info = self._driver.execute_script("""
                            var canvas = arguments[0];
                            return {
                                width: canvas.width,
                                height: canvas.height,
                                hasContent: canvas.width > 0 && canvas.height > 0
                            };
                        """, element)
                        
                        if canvas_info['hasContent'] and canvas_info['width'] >= 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä QR
                            canvas_data = self._driver.execute_script(
                                "return arguments[0].toDataURL('image/png');", element
                            )
                            if canvas_data and canvas_data.startswith('data:image') and len(canvas_data) > 1000:  # –ù–µ –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                qr_code_url = canvas_data
                                logger.info(f"‚úÖ QR –∫–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ CANVAS ({canvas_info['width']}x{canvas_info['height']}) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PNG!")
                                break
                        else:
                            logger.debug(f"‚ö†Ô∏è Canvas —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {canvas_info}")
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è Canvas –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∞: {e}")
                        continue
                        
                # –î–ª—è img –ø–æ–ª—É—á–∞–µ–º src
                elif element.tag_name == 'img':
                    qr_url = element.get_attribute("src")
                    if qr_url:
                        # –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö SVG (–∏—Å–∫–ª—é—á–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∫–æ–Ω–∫–∏)
                        if 'svg' in qr_url and ('sun.fd' in qr_url or 'icon' in qr_url or len(qr_url) < 100):
                            logger.info(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π SVG: {qr_url[:50]}...")
                            continue
                            
                        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ QR –∫–æ–¥—ã
                        if ('qr' in qr_url.lower() or 'data:image' in qr_url or 
                            (qr_url.startswith('http') and len(qr_url) > 50)):
                            qr_code_url = qr_url
                            logger.info(f"‚úÖ QR –∫–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ IMG: {qr_url[:50]}...")
                            break
            
            if qr_code_url:
                break
                
        if not qr_code_url:
            logger.warning("‚ö†Ô∏è QR –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = current_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π URL –∫–∞–∫ –±–∞–∑–æ–≤—ã–π
        payment_selectors = [
            "//a[contains(@href, 'pay')]",
            "//a[contains(@href, 'payment')]",
            "//button[contains(text(), '–û–ø–ª–∞—Ç–∏—Ç—å')]",
            "//a[contains(@href, 'checkout')]"
        ]
        
        for selector in payment_selectors:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element:
                href = element.get_attribute("href")
                if href and ('pay' in href or 'payment' in href or 'checkout' in href):
                    payment_url = href
                    logger.info(f"‚úÖ Payment URL found: {href[:50]}...")
                    break
        
        # –°–¢–†–û–ì–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–•–ê
        success_indicators = {
            'qr_code_found': bool(qr_code_url),
            'payment_url_valid': payment_url != self.base_url and payment_url != current_url,
            'url_changed': current_url != self.base_url,
            'no_error_messages': await self._check_no_error_messages()
        }
        
        logger.info(f"üìä Success indicators: {success_indicators}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—Ö: QR –Ω–∞–π–¥–µ–Ω –ò–õ–ò URL –∏–∑–º–µ–Ω–∏–ª—Å—è –ò –Ω–µ—Ç –æ—à–∏–±–æ–∫
        success = (
            success_indicators['qr_code_found'] or 
            (success_indicators['url_changed'] and success_indicators['no_error_messages'])
        )
        
        result = {
            'success': success,
            'qr_code_url': qr_code_url,
            'payment_url': payment_url,
            'current_url': current_url,
            'validation': success_indicators
        }
        
        if not success:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            error_messages = await self._extract_error_messages()
            result['error'] = f'Payment result validation failed. Error messages: {error_messages}'
            result['error_details'] = error_messages
        
        logger.info(f"üìä STRICT result: success={success}")
        if success:
            logger.info("‚úÖ Payment process completed successfully!")
        else:
            logger.error("‚ùå Payment process validation FAILED!")
            
        return result
    
    async def _check_no_error_messages(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        try:
            error_selectors = [
                "//*[contains(@class, 'error')]",
                "//*[contains(@class, 'alert')]",
                "//*[contains(@class, 'warning')]",
                "//*[contains(text(), '–æ—à–∏–±–∫–∞')]",
                "//*[contains(text(), '–û—à–∏–±–∫–∞')]",
                "//*[contains(text(), 'ERROR')]",
                "//*[contains(text(), '–Ω–µ–≤–µ—Ä–Ω')]",
                "//*[contains(text(), '–Ω–µ —É–¥–∞–ª–æ—Å—å')]"
            ]
            
            for selector in error_selectors:
                elements = self.find_elements_fast(By.XPATH, selector)
                for element in elements:
                    if element.is_displayed():
                        error_text = element.text.strip()
                        if error_text:
                            logger.warning(f"‚ö†Ô∏è Error message found: {error_text}")
                            return False
            
            return True
            
        except Exception as e:
            logger.debug(f"Error checking failed: {e}")
            return True  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç
    
    async def _extract_error_messages(self) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            error_messages = []
            error_selectors = [
                "//*[contains(@class, 'error')]",
                "//*[contains(@class, 'alert')]",
                "//*[contains(text(), '–æ—à–∏–±–∫–∞')]",
                "//*[contains(text(), '–û—à–∏–±–∫–∞')]"
            ]
            
            for selector in error_selectors:
                elements = self.find_elements_fast(By.XPATH, selector)
                for element in elements:
                    if element.is_displayed():
                        text = element.text.strip()
                        if text and text not in error_messages:
                            error_messages.append(text)
            
            return "; ".join(error_messages) if error_messages else "No specific error messages found"
            
        except Exception as e:
            logger.debug(f"Extract error messages failed: {e}")
            return "Error extracting error messages"
    
    async def _diagnostic_dom_analysis(self):
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑ DOM –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            logger.info("üîç DIAGNOSTIC: Starting full DOM analysis...")
            
            # 1. –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_buttons_script = """
            var buttons = document.querySelectorAll('button, input[type="button"], input[type="submit"], a[role="button"]');
            var buttonData = [];
            for (var i = 0; i < buttons.length; i++) {
                var btn = buttons[i];
                if (btn.offsetWidth > 0 && btn.offsetHeight > 0) {  // Visible elements only
                    buttonData.push({
                        index: i,
                        tagName: btn.tagName,
                        text: btn.textContent || btn.innerText || btn.value || '',
                        className: btn.className || '',
                        id: btn.id || '',
                        type: btn.type || '',
                        visible: btn.offsetParent !== null,
                        enabled: !btn.disabled,
                        style: btn.getAttribute('style') || ''
                    });
                }
            }
            return buttonData;
            """
            
            button_data = self._driver.execute_script(all_buttons_script)
            logger.info(f"üîç DIAGNOSTIC: Found {len(button_data)} visible buttons")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            for i, btn in enumerate(button_data[:20]):  # –ü–µ—Ä–≤—ã–µ 20 –∫–Ω–æ–ø–æ–∫
                logger.info(f"Button {i}: text='{btn['text'][:50]}', class='{btn['className'][:30]}', enabled={btn['enabled']}")
            
            # 2. –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ—Ö–æ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–º
            continue_buttons = []
            for btn in button_data:
                text = btn['text'].strip().upper()
                if any(keyword in text for keyword in ['–ü–†–û–î–û–õ–ñ–ò–¢–¨', 'CONTINUE', 'NEXT', '–î–ê–õ–ï–ï', 'OK', '–ì–û–¢–û–í–û']):
                    continue_buttons.append(btn)
                    logger.info(f"üéØ DIAGNOSTIC: Found potential continue button: '{btn['text']}' (class: {btn['className']})")
            
            # 3. –ê–Ω–∞–ª–∏–∑ iframe (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ iframe)
            iframe_script = """
            var iframes = document.querySelectorAll('iframe');
            var iframeData = [];
            for (var i = 0; i < iframes.length; i++) {
                var iframe = iframes[i];
                iframeData.push({
                    src: iframe.src || '',
                    id: iframe.id || '',
                    className: iframe.className || '',
                    visible: iframe.offsetParent !== null
                });
            }
            return iframeData;
            """
            
            iframe_data = self._driver.execute_script(iframe_script)
            if iframe_data:
                logger.info(f"üîç DIAGNOSTIC: Found {len(iframe_data)} iframes")
                for iframe in iframe_data:
                    logger.info(f"Iframe: src='{iframe['src'][:50]}', class='{iframe['className']}'")
            
            # 4. –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∫–ª–∏–∫–∞
            clickable_script = """
            var clickableElements = [];
            var allElements = document.querySelectorAll('*');
            for (var i = 0; i < allElements.length; i++) {
                var el = allElements[i];
                var hasClick = el.onclick || el.getAttribute('onclick') || 
                              el.addEventListener || window.getComputedStyle(el).cursor === 'pointer';
                if (hasClick && el.offsetWidth > 0 && el.offsetHeight > 0) {
                    var text = el.textContent || el.innerText || '';
                    if (text.includes('–ü–†–û–î–û–õ–ñ–ò–¢–¨') || text.includes('CONTINUE')) {
                        clickableElements.push({
                            tagName: el.tagName,
                            text: text.substring(0, 50),
                            className: el.className || '',
                            id: el.id || ''
                        });
                    }
                }
            }
            return clickableElements;
            """
            
            clickable_data = self._driver.execute_script(clickable_script)
            if clickable_data:
                logger.info(f"üîç DIAGNOSTIC: Found {len(clickable_data)} clickable continue elements")
                for el in clickable_data:
                    logger.info(f"Clickable: {el['tagName']} '{el['text']}' (class: {el['className']})")
            
            return {
                'total_buttons': len(button_data),
                'continue_buttons': continue_buttons,
                'iframes': iframe_data,
                'clickable_elements': clickable_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå DIAGNOSTIC DOM analysis error: {e}")
            return None

    async def _diagnostic_button_click(self) -> bool:
        """–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        try:
            logger.info("üéØ DIAGNOSTIC: Starting enhanced button click methods")
            
            # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ JavaScript –ø–æ —Ç–µ–∫—Å—Ç—É
            js_button_click_script = """
            // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            function findContinueButton() {
                var keywords = ['–ü–†–û–î–û–õ–ñ–ò–¢–¨', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'CONTINUE', 'Continue', '–î–ê–õ–ï–ï', '–¥–∞–ª–µ–µ', 'NEXT'];
                var allElements = document.querySelectorAll('*');
                
                for (var i = 0; i < allElements.length; i++) {
                    var el = allElements[i];
                    var text = el.textContent || el.innerText || el.value || '';
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    for (var j = 0; j < keywords.length; j++) {
                        if (text.trim() === keywords[j] || text.trim().toUpperCase() === keywords[j].toUpperCase()) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π
                            if ((el.tagName === 'BUTTON' || el.tagName === 'A' || el.tagName === 'INPUT') && 
                                el.offsetWidth > 0 && el.offsetHeight > 0 && !el.disabled) {
                                return el;
                            }
                        }
                    }
                }
                return null;
            }
            
            var button = findContinueButton();
            if (button) {
                button.click();
                return {success: true, element: button.tagName, text: button.textContent};
            }
            return {success: false};
            """
            
            logger.info("üéØ DIAGNOSTIC: Method 1 - JavaScript text search")
            result = self._driver.execute_script(js_button_click_script)
            if result.get('success'):
                logger.info(f"‚úÖ DIAGNOSTIC: Method 1 SUCCESS - clicked {result.get('element')} with text '{result.get('text')}'")
                await asyncio.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
                if await self._check_modal_disappeared():
                    return True
            
            # –ú–µ—Ç–æ–¥ 2: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –∫–ª–∏–∫ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info("üéØ DIAGNOSTIC: Method 2 - Coordinate click")
            modal_coordinate_script = """
            var modalElements = document.querySelectorAll('*');
            for (var i = 0; i < modalElements.length; i++) {
                var el = modalElements[i];
                var text = el.textContent || el.innerText || '';
                if (text.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö') || text.includes('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ')) {
                    var rect = el.getBoundingClientRect();
                    // –ö–ª–∏–∫ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª (–≥–¥–µ –æ–±—ã—á–Ω–æ –∫–Ω–æ–ø–∫–∏)
                    var clickX = rect.right - 100;
                    var clickY = rect.bottom - 30;
                    
                    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
                    var event = new MouseEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: true,
                        clientX: clickX,
                        clientY: clickY
                    });
                    
                    // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≤ —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                    var targetElement = document.elementFromPoint(clickX, clickY);
                    if (targetElement) {
                        targetElement.dispatchEvent(event);
                        return {success: true, coordinates: [clickX, clickY], target: targetElement.tagName};
                    }
                }
            }
            return {success: false};
            """
            
            result = self._driver.execute_script(modal_coordinate_script)
            if result.get('success'):
                logger.info(f"‚úÖ DIAGNOSTIC: Method 2 SUCCESS - coordinate click at {result.get('coordinates')}")
                await asyncio.sleep(2)
                
                if await self._check_modal_disappeared():
                    return True
            
            # –ú–µ—Ç–æ–¥ 3: –≠–º—É–ª—è—Ü–∏—è Enter/Space/Escape
            logger.info("üéØ DIAGNOSTIC: Method 3 - Keyboard events")
            keyboard_script = """
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            var events = ['Enter', 'Space', 'Escape'];
            for (var i = 0; i < events.length; i++) {
                var event = new KeyboardEvent('keydown', {
                    key: events[i],
                    code: events[i],
                    bubbles: true
                });
                document.dispatchEvent(event);
            }
            return {success: true};
            """
            
            self._driver.execute_script(keyboard_script)
            await asyncio.sleep(2)
            
            if await self._check_modal_disappeared():
                logger.info("‚úÖ DIAGNOSTIC: Method 3 SUCCESS - keyboard event")
                return True
            
            # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –≤—Å–µ–º –≤–∏–¥–∏–º—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –æ–±–ª–∞—Å—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            logger.info("üéØ DIAGNOSTIC: Method 4 - Area click")
            area_click_script = """
            var modalArea = null;
            var allElements = document.querySelectorAll('*');
            
            // –ù–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            for (var i = 0; i < allElements.length; i++) {
                var el = allElements[i];
                var text = el.textContent || el.innerText || '';
                if (text.includes('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')) {
                    modalArea = el;
                    break;
                }
            }
            
            if (modalArea) {
                var clickableInModal = modalArea.querySelectorAll('button, a, input, div[onclick], span[onclick]');
                for (var j = 0; j < clickableInModal.length; j++) {
                    var clickable = clickableInModal[j];
                    if (clickable.offsetWidth > 0 && clickable.offsetHeight > 0) {
                        clickable.click();
                        return {success: true, clicked: clickable.tagName, text: clickable.textContent};
                    }
                }
            }
            return {success: false};
            """
            
            result = self._driver.execute_script(area_click_script)
            if result.get('success'):
                logger.info(f"‚úÖ DIAGNOSTIC: Method 4 SUCCESS - area click on {result.get('clicked')}")
                await asyncio.sleep(2)
                
                if await self._check_modal_disappeared():
                    return True
            
            logger.error("‚ùå DIAGNOSTIC: All methods failed")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå DIAGNOSTIC button click error: {e}")
            return False

    async def _final_continue_button_click(self):
        """Step 13: –ë–´–°–¢–†–´–ô –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ü–†–û–î–û–õ–ñ–ò–¢–¨ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
        –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º QR
        """
        # –ü–†–û–í–ï–†–ö–ê QR –†–ê–ù–¨–®–ï - –µ—Å–ª–∏ —É–∂–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Step 13
        current_url = self._driver.current_url
        if ('transferId=' in current_url and 'paymentSystemTransferNum=' in current_url):
            logger.info("üéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å QR - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Step 13!")
            logger.info(f"üíæ –°–û–•–†–ê–ù–ï–ù —É—Å–ø–µ—à–Ω—ã–π URL –¥–ª—è Step 14: {current_url}")
            self.successful_qr_url = current_url
            return
        
        logger.info("‚ö° Step 13: FAST '–ü–†–û–î–û–õ–ñ–ò–¢–¨' button click - NO delays!")
        
        # –£–ë–ò–†–ê–ï–ú —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
        # self.take_screenshot_conditional("13_final_page_before_continue.png")
        
        # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É URL - –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –∫–ª–∏–∫–∞
        # current_url = self._driver.current_url
        # logger.info(f"üìç Current URL before final continue: {current_url}")
        
        # –£–ë–ò–†–ê–ï–ú –∑–∞–¥–µ—Ä–∂–∫—É 2 —Å–µ–∫—É–Ω–¥—ã - —Å—Ä–∞–∑—É –∏—â–µ–º –∫–Ω–æ–ø–∫—É!
        # await asyncio.sleep(2)
        
        # ‚ö° –ë–´–°–¢–†–´–ô –ú–µ—Ç–æ–¥ 1: JavaScript –ø–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ (—Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π!)
        logger.info("‚ö° Trying FASTEST method: JavaScript instant search and click")
        
        fast_js_script = """
        // –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ü–†–û–î–û–õ–ñ–ò–¢–¨ —Å –æ—Ç–ª–∞–¥–∫–æ–π
        var keywords = ['–ü–†–û–î–û–õ–ñ–ò–¢–¨', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'CONTINUE', 'Continue'];
        var buttons = document.querySelectorAll('button, input[type="submit"], input[type="button"], a[role="button"], div[role="button"]');
        
        console.log('FAST: Total buttons found:', buttons.length);
        
        for (var i = 0; i < buttons.length; i++) {
            var btn = buttons[i];
            var text = (btn.textContent || btn.value || btn.innerText || '').trim();
            
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (text) {
                console.log('FAST: Button', i, 'text:', text, 'visible:', btn.offsetParent !== null, 'enabled:', !btn.disabled);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if (btn.offsetParent !== null && !btn.disabled) {
                // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                for (var j = 0; j < keywords.length; j++) {
                    if (text === keywords[j] || text.includes(keywords[j])) {
                        console.log('FAST: FOUND TARGET! Clicking button:', text);
                        btn.scrollIntoView({block: 'center', behavior: 'smooth'});
                        setTimeout(function() { btn.click(); }, 100);
                        return {success: true, method: 'js_instant', text: text};
                    }
                }
            }
        }
        return {success: false};
        """
        
        try:
            result = self._driver.execute_script(fast_js_script)
            if result.get('success'):
                logger.info(f"‚úÖ FASTEST SUCCESS: Clicked button '{result.get('text')}' via {result.get('method')}")
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
                await asyncio.sleep(1)
                logger.info("‚úÖ Step 13 completed INSTANTLY!")
                return
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Fast JS method failed: {e}")
        
        # ‚ö° –ë–´–°–¢–†–´–ô –ú–µ—Ç–æ–¥ 2: –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (–µ—Å–ª–∏ JS –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        logger.info("‚ö° Trying FAST method: Priority selectors only")
        
        fast_selectors = [
            "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",  # –°–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π
            "//button[text()='–ü–†–û–î–û–õ–ñ–ò–¢–¨']",  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            "//button[contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",  # –í—Ç–æ—Ä–æ–π –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            "//input[@type='submit' and contains(@value, '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",  # Submit –∫–Ω–æ–ø–∫–∏
            "//button[contains(@class, 'btn') and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",  # –° CSS –∫–ª–∞—Å—Å–æ–º
            "//*[@type='button' and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",  # –õ—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ button
            "//div[contains(@class, 'button') and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",  # Div-–∫–Ω–æ–ø–∫–∏
        ]
        
        button_found = False
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        for i, selector in enumerate(fast_selectors):
            try:
                element = self._driver.find_element(By.XPATH, selector)
                if element and element.is_displayed() and element.is_enabled():
                    logger.info(f"‚úÖ FAST: Found button with selector #{i}")
                    
                    # –ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
                    try:
                        element.click()
                        logger.info(f"‚úÖ FAST: Clicked via normal click")
                        button_found = True
                        break
                    except:
                        # JavaScript –∫–ª–∏–∫ –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                        self._driver.execute_script("arguments[0].click();", element)
                        logger.info(f"‚úÖ FAST: Clicked via JavaScript")
                        button_found = True
                        break
                        
            except Exception as e:
                logger.debug(f"Selector #{i} failed: {e}")
                continue
        
        # ‚ö° –ë–´–°–¢–†–´–ô Fallback: –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        if not button_found:
            logger.info("‚ö° FAST: Trying enhanced fallback search")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JavaScript –ø–æ–∏—Å–∫ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
            enhanced_search = """
            // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            var allButtons = document.querySelectorAll('button, input[type="submit"], input[type="button"], a[role="button"]');
            var foundButtons = [];
            
            console.log('FAST: Total buttons found:', allButtons.length);
            
            for (var i = 0; i < allButtons.length; i++) {
                var btn = allButtons[i];
                var text = btn.textContent || btn.value || btn.innerText || '';
                var visible = btn.offsetParent !== null && !btn.disabled;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –∫–Ω–æ–ø–∫–∏
                if (visible && text.trim()) {
                    foundButtons.push({
                        index: i,
                        text: text.trim(),
                        tagName: btn.tagName,
                        className: btn.className || ''
                    });
                }
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                var continueKeywords = [
                    '–ü–†–û–î–û–õ–ñ–ò–¢–¨', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                    'CONTINUE', 'Continue', 'continue',
                    '–î–ê–õ–ï–ï', '–î–∞–ª–µ–µ', '–¥–∞–ª–µ–µ',
                    'NEXT', 'Next', 'next',
                    '–û–¢–ü–†–ê–í–ò–¢–¨', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'
                ];
                
                if (visible) {
                    for (var j = 0; j < continueKeywords.length; j++) {
                        if (text.includes(continueKeywords[j])) {
                            console.log('FAST: Found and clicking button:', text);
                            btn.scrollIntoView({block: 'center', behavior: 'instant'});
                            btn.click();
                            return {
                                success: true, 
                                text: text.trim(),
                                method: 'enhanced_fallback',
                                totalButtons: allButtons.length,
                                foundButtons: foundButtons.length
                            };
                        }
                    }
                }
            }
            
            return {
                success: false,
                totalButtons: allButtons.length,
                foundButtons: foundButtons,
                message: 'No continue button found'
            };
            """
            
            try:
                result = self._driver.execute_script(enhanced_search)
                if result.get('success'):
                    logger.info(f"‚úÖ FAST: Enhanced fallback found button '{result.get('text')}'")
                    logger.info(f"üìä FAST: Scanned {result.get('totalButtons')} buttons, {result.get('foundButtons')} visible")
                    button_found = True
                else:
                    logger.error(f"‚ùå FAST: No continue button found in {result.get('totalButtons')} buttons")
                    
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                    found_buttons = result.get('foundButtons', [])[:5]  # –ü–µ—Ä–≤—ã–µ 5
                    logger.error("üîç FAST: Available buttons:")
                    for btn_info in found_buttons:
                        logger.error(f"  - '{btn_info.get('text', '')[:30]}' ({btn_info.get('tagName')})")
                        
            except Exception as e:
                logger.error(f"‚ùå FAST: Enhanced fallback failed: {e}")
        
        # ‚ö° –ë–´–°–¢–†–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if button_found:
            logger.info("‚úÖ FAST: Step 13 completed successfully!")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
            await asyncio.sleep(1)
        else:
            logger.error("‚ùå FAST: Could not find –ü–†–û–î–û–õ–ñ–ò–¢–¨ button with any method")
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.take_screenshot_conditional("13_fast_button_not_found.png")
            raise Exception("FAST: Final –ü–†–û–î–û–õ–ñ–ò–¢–¨ button not found after all search methods")
        
        logger.info("‚ö° FAST: Step 13 completed in minimal time!")

    async def _check_modal_disappeared(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        try:
            modal_selectors = [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]"
            ]
            
            for selector in modal_selectors:
                element = self.find_element_fast(By.XPATH, selector, timeout=1)
                if element and element.is_displayed():
                    return False
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL
            current_url = self._driver.current_url
            url_changed = current_url != self.base_url
            
            logger.info(f"üìç URL check: {current_url}, changed: {url_changed}")
            return url_changed
            
        except Exception as e:
            logger.debug(f"Modal check error: {e}")
            return False
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            logger.info("üßπ Cleaning up MultiTransfer automation...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if hasattr(self, '_driver') and self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            await system_proxy_manager.restore_settings()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH —Ç—É–Ω–Ω–µ–ª–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy_manager
            if hasattr(self, 'proxy_manager') and self.proxy_manager:
                await self.proxy_manager.ssh_tunnel_manager.stop_tunnel()
            
            logger.info("‚úÖ Cleanup completed")
            
        except Exception as e:
            logger.error(f"‚ùå Error during cleanup: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        try:
            if hasattr(self, '_driver') and self._driver:
                self._driver.quit()
        except:
            pass