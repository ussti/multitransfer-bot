"""
MultiTransfer.ru Browser Automation
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ multitransfer.ru
–ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –≤—Å–µ 12 —à–∞–≥–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import logging
import asyncio
import random
import time
import re
from typing import Dict, Any, Optional
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc
from web.captcha.solver import CaptchaSolver

logger = logging.getLogger(__name__)

class MultiTransferAutomation:
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è multitransfer.ru - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (12 —à–∞–≥–æ–≤)"""
    
    def __init__(self, proxy: Optional[Dict[str, Any]] = None, config: Optional[Dict[str, Any]] = None):
        self.proxy = proxy
        self.config = config or {}
        self.base_url = "https://multitransfer.ru"
        self._driver = None
        self.captcha_solver = CaptchaSolver(config)
        
        # –†–ê–ë–û–ß–ò–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —Ç–µ—Å—Ç-—Ñ–∞–π–ª–∞ + –£–õ–£–ß–®–ï–ù–ù–´–ï
        self.selectors = {
            # –®–∞–≥ 1: –ö–Ω–æ–ø–∫–∞ "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ"
            'transfer_abroad_btn': [
                "//button[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ')]",
                "//*[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ')]"
            ],
            
            # –®–∞–≥ 2: –í—ã–±–æ—Ä –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞
            'tajikistan_select': [
                "//span[text()='–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω']/parent::div",
                "//div[contains(text(), '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')]",
                "//span[contains(text(), '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')]",
                "//*[text()='–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω']"
            ],
            
            # –®–∞–≥ 3: –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            'amount_input': [
                "//input[contains(@placeholder, 'RUB')]",
                "//input[contains(@placeholder, '–°—É–º–º–∞')]",
                "//input[@type='number']",
                "//input[contains(@placeholder, 'amount')]"
            ],
            
            # –®–∞–≥ 4: –í–∞–ª—é—Ç–∞ TJS
            'currency_tjs': [
                "//button[contains(text(), 'TJS')]",
                "//div[contains(text(), 'TJS')]",
                "//*[contains(@class, 'currency') and contains(text(), 'TJS')]",
                "//*[text()='TJS']"
            ],
            
            # –®–∞–≥ 5: –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ - —Å–Ω–∞—á–∞–ª–∞ dropdown
            'transfer_method_dropdown': [
                "//div[contains(text(), '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞')]//following-sibling::*",
                "//div[contains(text(), '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞')]//parent::*//div[contains(@class, 'dropdown') or contains(@class, 'select')]",
                "//div[contains(@class, 'transfer-method') or contains(@class, 'method')]",
                "//*[contains(text(), '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±') or contains(text(), '—Å–ø–æ—Å–æ–±')]"
            ],
            
            # –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ –≤ —Å–ø–∏—Å–∫–µ
            'korti_milli_option': [
                "//*[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]",
                "//div[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]",
                "//span[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]",
                "//li[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]",
                "//*[contains(@class, 'option') and contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]"
            ],
            
            # –®–∞–≥ 6: –ö–Ω–æ–ø–∫–∞ "–ü–†–û–î–û–õ–ñ–ò–¢–¨"
            'continue_btn': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                "//button[contains(text(), '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
                "//button[contains(text(), '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]"
            ],
            
            # –®–∞–≥–∏ 7-10: –§–æ—Ä–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å —Ç–≤–æ–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
            'recipient_card': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã']",
                "//input[contains(@placeholder, '–∫–∞—Ä—Ç—ã')]",
                "//input[contains(@placeholder, '–ù–æ–º–µ—Ä')]//ancestor::*[contains(text(), '–∫–∞—Ä—Ç—ã')]"
            ],
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞ –ü–∞—Å–ø–æ—Ä—Ç –†–§
            'passport_rf_toggle': [
                "//button[contains(text(), '–ü–∞—Å–ø–æ—Ä—Ç –†–§')]",
                "//*[contains(@class, 'toggle') and contains(., '–ü–∞—Å–ø–æ—Ä—Ç –†–§')]"
            ],
            
            # –ü–æ–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –†–§ - –£–õ–£–ß–®–ï–ù–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´
            'passport_series': [
                "//input[@placeholder='–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞']",
                "//input[contains(@placeholder, '–°–µ—Ä–∏—è')]",
                "//div[contains(text(), '–°–µ—Ä–∏—è')]//following-sibling::*//input",
                "//label[contains(text(), '–°–µ—Ä–∏—è')]//following-sibling::*//input"
            ],
            
            'passport_number': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞']",
                "//input[contains(@placeholder, '–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞')]",
                "//div[contains(text(), '–ù–æ–º–µ—Ä')]//following-sibling::*//input[not(@placeholder='–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã')]",
                "//label[contains(text(), '–ù–æ–º–µ—Ä')]//following-sibling::*//input[not(@placeholder='–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã')]"
            ],
            
            'passport_country': [
                "//input[@placeholder='–†–æ—Å—Å–∏—è']",
                "//input[contains(@placeholder, '–†–æ—Å—Å–∏—è')]",
                "//div[contains(text(), '–°—Ç—Ä–∞–Ω–∞ –≤—ã–¥–∞—á–∏')]//following-sibling::*//input",
                "//label[contains(text(), '–°—Ç—Ä–∞–Ω–∞')]//following-sibling::*//input"
            ],
            
            'passport_date': [
                "//div[contains(text(), '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "//label[contains(text(), '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[2]",
                "//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'][position()>1]"
            ],
            
            # –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –£–õ–£–ß–®–ï–ù–ù–´–ï –°–ï–õ–ï–ö–¢–û–†–´
            'surname': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é']",
                "//input[contains(@placeholder, '—Ñ–∞–º–∏–ª–∏—é')]",
                "//div[contains(text(), '–§–∞–º–∏–ª–∏—è')]//following-sibling::*//input",
                "//label[contains(text(), '–§–∞–º–∏–ª–∏—è')]//following-sibling::*//input"
            ],
            
            'name': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –∏–º—è']", 
                "//input[contains(@placeholder, '–∏–º—è')]",
                "//div[contains(text(), '–ò–º—è')]//following-sibling::*//input",
                "//label[contains(text(), '–ò–º—è')]//following-sibling::*//input"
            ],
            
            'patronymic': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ']",
                "//input[contains(@placeholder, '–æ—Ç—á–µ—Å—Ç–≤–æ')]",
                "//div[contains(text(), '–û—Ç—á–µ—Å—Ç–≤–æ')]//following-sibling::*//input",
                "//label[contains(text(), '–û—Ç—á–µ—Å—Ç–≤–æ')]//following-sibling::*//input"
            ],
            
            'birthdate': [
                "//div[contains(text(), '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "//label[contains(text(), '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[1]",
                "//input[contains(@placeholder, '–î–î.–ú–ú.–ì–ì–ì–ì')]"
            ],
            
            'phone': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']",
                "//input[contains(@placeholder, '—Ç–µ–ª–µ—Ñ–æ–Ω')]",
                "//div[contains(text(), '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')]//following-sibling::*//input",
                "//label[contains(text(), '—Ç–µ–ª–µ—Ñ–æ–Ω')]//following-sibling::*//input"
            ],
            
            # Checkbox —Å–æ–≥–ª–∞—Å–∏—è - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
            'agreement_checkbox': [
                # –†–ê–ë–û–ß–ò–ô –ú–ï–¢–û–î - —Å—Ä–∞–∑—É –∏—â–µ–º —Å–∫—Ä—ã—Ç—ã–π checkbox –∏ –∫–ª–∏–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                "//input[@type='checkbox']",  # –ü–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π checkbox
                "//form//input[@type='checkbox']",  # Checkbox –≤ —Ñ–æ—Ä–º–µ
                "//input[@type='checkbox'][last()]"  # –ü–æ—Å–ª–µ–¥–Ω–∏–π checkbox
            ],
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ü–†–û–î–û–õ–ñ–ò–¢–¨" 
            'final_continue': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                "//button[@type='submit']"
            ]
        }
    
    async def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            logger.info("üöÄ Setting up Chrome driver...")
            
            options = uc.ChromeOptions()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--window-size=1920,1080')
            options.add_argument('--disable-blink-features=AutomationControlled')
            options.add_argument('--disable-extensions')
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            if self.proxy:
                proxy_string = f"{self.proxy['ip']}:{self.proxy['port']}"
                options.add_argument(f'--proxy-server=http://{proxy_string}')
                logger.info(f"üåê Using proxy: {proxy_string}")
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç
            user_agents = [
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            ]
            options.add_argument(f'--user-agent={random.choice(user_agents)}')
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self._driver = uc.Chrome(options=options)
            self._driver.implicitly_wait(10)
            
            logger.info("‚úÖ Chrome driver setup completed")
            return self._driver
            
        except Exception as e:
            logger.error(f"‚ùå Failed to setup Chrome driver: {e}")
            return None
    
    # ===== –ê–î–ê–ü–¢–ê–¶–ò–Ø –ú–ï–¢–û–î–û–í browser_manager =====
    
    def find_element_safe(self, by, selector):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            element = WebDriverWait(self._driver, 5).until(
                EC.presence_of_element_located((by, selector))
            )
            return element
        except:
            return None
    
    def find_elements_safe(self, by, selector):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            return self._driver.find_elements(by, selector)
        except:
            return []
    
    def click_element_safe(self, element):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
            time.sleep(0.5)
            
            # –ö–ª–∏–∫–∞–µ–º
            element.click()
            return True
        except:
            try:
                # –ü—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                self._driver.execute_script("arguments[0].click();", element)
                return True
            except:
                return False
    
    def type_text_safe(self, element, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            element.clear()
            time.sleep(0.2)
            
            # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ –¥–ª—è —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç–∏
            for char in text:
                element.send_keys(char)
                time.sleep(random.uniform(0.05, 0.15))
                
            return True
        except:
            return False
    
    def get_element_attribute(self, element, attribute):
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            return element.get_attribute(attribute) or ""
        except:
            return ""
    
    def take_screenshot(self, filename):
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            import os
            os.makedirs("logs/automation", exist_ok=True)
            screenshot_path = f"logs/automation/{filename}"
            self._driver.save_screenshot(screenshot_path)
            logger.info(f"üì∏ Screenshot saved: {filename}")
        except Exception as e:
            logger.warning(f"Failed to save screenshot {filename}: {e}")
    
    def navigate_to_url(self, url):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ URL (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–æ–≥ browser_manager)"""
        try:
            self._driver.get(url)
            return True
        except:
            return False
    
    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def create_payment(self, payment_data: Dict[str, Any]) -> Dict[str, Any]:
        """Main method to create payment - –ü–û–õ–ù–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ 12 –®–ê–ì–û–í"""
        try:
            logger.info(f"üöÄ Starting COMPLETE payment creation for {payment_data['amount']} {payment_data.get('currency_from', 'RUB')}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
            driver = await self._setup_driver()
            if not driver:
                return {'success': False, 'error': 'Failed to setup browser driver'}
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
            success = self.navigate_to_url(self.base_url)
            if not success:
                raise Exception("Failed to load homepage")
            
            self.take_screenshot("00_homepage.png")
            
            # –®–∞–≥–∏ 1-6: –û—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            await self._select_country_and_amount(payment_data)
            
            # –®–∞–≥ 7: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            await self._fill_recipient_data(payment_data)
            
            # –®–∞–≥–∏ 8-9: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è + —Å–æ–≥–ª–∞—Å–∏–µ
            await self._fill_sender_data(payment_data)
            
            # –®–∞–≥ 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            await self._submit_final_form()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫—É)
            result = await self._get_payment_result()
            
            logger.info("‚úÖ COMPLETE payment creation successful!")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Payment creation failed: {e}")
            self.take_screenshot("error_final.png")
            return {'success': False, 'error': str(e)}
            
        finally:
            if hasattr(self, '_driver') and self._driver:
                logger.info("üîí Closing browser")
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
    
    async def _select_country_and_amount(self, payment_data: Dict[str, Any]):
        """–®–∞–≥–∏ 1-6: –ü–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø"""
        logger.info(f"üöÄ Starting steps 1-6: country={payment_data['country']}, amount={payment_data['amount']}")
        
        # –®–∞–≥ 1: –ö–ª–∏–∫ "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ"
        logger.info("üìç Step 1: Click '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ'")
        await asyncio.sleep(random.uniform(3, 5))
        
        all_buttons = self.find_elements_safe(By.TAG_NAME, "button")
        button_clicked = False
        
        for i, btn in enumerate(all_buttons):
            try:
                text = btn.text or ""
                if "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" in text:
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    if self.click_element_safe(btn):
                        logger.info(f"‚úÖ Successfully clicked '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ' button {i}")
                        button_clicked = True
                        break
            except:
                pass
        
        if not button_clicked:
            raise Exception("Could not click '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ'")
        
        await asyncio.sleep(random.uniform(3, 5))
        self.take_screenshot("step1_modal_opened.png")
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞
        logger.info("üìç Step 2: Select Tajikistan")
        
        tajikistan_clicked = False
        for selector in self.selectors['tajikistan_select']:
            elements = self.find_elements_safe(By.XPATH, selector)
            for element in elements:
                try:
                    if element.is_displayed():
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        await asyncio.sleep(0.3)
                        
                        if self.click_element_safe(element):
                            logger.info("‚úÖ Successfully clicked Tajikistan")
                            tajikistan_clicked = True
                            break
                except:
                    pass
            if tajikistan_clicked:
                break
        
        if not tajikistan_clicked:
            raise Exception("Could not select Tajikistan")
        
        await asyncio.sleep(random.uniform(3, 5))
        self.take_screenshot("step2_country_selected.png")
        
        # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º—ã
        logger.info("üìç Step 3: Fill amount")
        
        amount_filled = False
        for selector in self.selectors['amount_input']:
            elements = self.find_elements_safe(By.XPATH, selector)
            for inp in elements:
                try:
                    if inp.is_displayed() and inp.is_enabled():
                        logger.info("üéØ Filling amount field")
                        success = await self.human_type_text(inp, str(int(payment_data['amount'])))
                        if success:
                            logger.info("‚úÖ Amount filled successfully")
                            amount_filled = True
                            break
                except:
                    pass
            if amount_filled:
                break
        
        if not amount_filled:
            raise Exception("Could not fill amount")
        
        await asyncio.sleep(1)
        self.take_screenshot("step3_amount_filled.png")
        
        # –®–∞–≥ 4: –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã TJS
        logger.info("üìç Step 4: Select TJS currency")
        
        tjs_selected = False
        for selector in self.selectors['currency_tjs']:
            elements = self.find_elements_safe(By.XPATH, selector)
            for element in elements:
                try:
                    if element.is_displayed() and element.is_enabled():
                        logger.info("üéØ Clicking TJS currency button")
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        
                        if self.click_element_safe(element):
                            logger.info("‚úÖ Successfully selected TJS currency")
                            tjs_selected = True
                            break
                except:
                    continue
            if tjs_selected:
                break
        
        if not tjs_selected:
            logger.warning("‚ö†Ô∏è Could not select TJS currency, continuing...")
        
        await asyncio.sleep(1)
        self.take_screenshot("step4_currency_selected.png")
        
        # –®–∞–≥ 5: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ "–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏"
        logger.info("üìç Step 5: Select '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏' transfer method")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
        method_dropdown_clicked = False
        for selector in self.selectors['transfer_method_dropdown']:
            elements = self.find_elements_safe(By.XPATH, selector)
            for element in elements:
                try:
                    if element.is_displayed():
                        logger.info("üéØ Clicking transfer method dropdown")
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        
                        if self.click_element_safe(element):
                            logger.info("‚úÖ Successfully clicked transfer method dropdown")
                            method_dropdown_clicked = True
                            break
                except:
                    continue
            if method_dropdown_clicked:
                break
        
        await asyncio.sleep(1)
        self.take_screenshot("step5_transfer_method_dropdown.png")
        
        # –í—ã–±–∏—Ä–∞–µ–º "–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏"
        korti_milli_selected = False
        for selector in self.selectors['korti_milli_option']:
            elements = self.find_elements_safe(By.XPATH, selector)
            for element in elements:
                try:
                    if element.is_displayed():
                        logger.info("üéØ Clicking –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏ option")
                        await asyncio.sleep(random.uniform(0.3, 0.7))
                        
                        self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        await asyncio.sleep(0.3)
                        
                        if self.click_element_safe(element):
                            logger.info("‚úÖ Successfully selected –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏")
                            korti_milli_selected = True
                            break
                except:
                    continue
            if korti_milli_selected:
                break
        
        if not korti_milli_selected:
            logger.warning("‚ö†Ô∏è Could not select –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏, continuing...")
        
        await asyncio.sleep(1)
        self.take_screenshot("step5_method_selected.png")
        
        # –®–∞–≥ 6: –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–†–û–î–û–õ–ñ–ò–¢–¨"
        logger.info("üìç Step 6: Click '–ü–†–û–î–û–õ–ñ–ò–¢–¨' button")
        
        continue_buttons = self.find_elements_safe(By.TAG_NAME, "button")
        continue_clicked = False
        
        for btn in continue_buttons:
            try:
                text = btn.text or ""
                if text and "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in text.upper():
                    logger.info(f"üéØ Found continue button: '{text}'")
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    
                    if self.click_element_safe(btn):
                        logger.info(f"‚úÖ Successfully clicked continue button")
                        continue_clicked = True
                        break
            except:
                pass
        
        if not continue_clicked:
            logger.warning("‚ö†Ô∏è Could not find continue button")
        
        await asyncio.sleep(2)
        self.take_screenshot("step6_form_page.png")
        
        logger.info("‚úÖ Steps 1-6 completed! Ready for form filling...")
    
    async def human_type_text(self, element, text, min_delay=0.05, max_delay=0.2):
        """–ß–µ–ª–æ–≤–µ—á–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        try:
            element.clear()
            await asyncio.sleep(random.uniform(0.1, 0.3))
            
            logger.info(f"üñäÔ∏è Typing '{text}' character by character...")
            
            for char in text:
                element.send_keys(char)
                delay = random.uniform(min_delay, max_delay)
                await asyncio.sleep(delay)
            
            await asyncio.sleep(random.uniform(0.2, 0.5))
            logger.info(f"‚úÖ Finished typing '{text}'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to type '{text}': {e}")
            return False
    
    async def _fill_recipient_data(self, payment_data: Dict[str, Any]):
        """–®–∞–≥ 7: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
        logger.info("üí≥ Step 7: Filling recipient card number")
        
        card_number = payment_data.get('recipient_card', '')
        if not card_number:
            raise Exception("No recipient card number provided")
        
        card_filled = False
        for selector in self.selectors['recipient_card']:
            element = self.find_element_safe(By.XPATH, selector)
            if element and element.is_displayed() and element.is_enabled():
                try:
                    logger.info(f"üéØ Filling recipient card: {card_number}")
                    success = await self.human_type_text(element, card_number)
                    if success:
                        logger.info("‚úÖ Recipient card filled successfully")
                        card_filled = True
                        break
                except:
                    continue
        
        if not card_filled:
            raise Exception("Could not fill recipient card number")
        
        await asyncio.sleep(2)
        self.take_screenshot("step7_recipient_card.png")

    async def _fill_sender_data(self, payment_data: Dict[str, Any]):
        """–®–∞–≥–∏ 8-9: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è + checkbox —Å–æ–≥–ª–∞—Å–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        logger.info("üë§ Step 8: Filling sender passport data - –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø")
        
        passport_data = payment_data.get('passport_data', {})
        if not passport_data:
            raise Exception("No passport data provided")
        
        logger.info(f"üìã Available passport data: {passport_data}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ "–ü–∞—Å–ø–æ—Ä—Ç –†–§" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        logger.info("üîÑ Selecting '–ü–∞—Å–ø–æ—Ä—Ç –†–§' document type")
        for selector in self.selectors['passport_rf_toggle']:
            element = self.find_element_safe(By.XPATH, selector)
            if element and element.is_displayed():
                try:
                    if self.click_element_safe(element):
                        logger.info("‚úÖ Selected '–ü–∞—Å–ø–æ—Ä—Ç –†–§' document type")
                        await asyncio.sleep(1)
                        break
                except:
                    continue
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º passport_country, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        fields_to_fill = [
            ('passport_series', passport_data.get('passport_series', ''), 'passport series'),
            ('passport_number', passport_data.get('passport_number', ''), 'passport number'), 
            # ('passport_country', '–†–æ—Å—Å–∏—è', 'passport country'),  # –ü–†–û–ü–£–°–ö–ê–ï–ú - –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            ('passport_date', passport_data.get('passport_date', ''), 'passport date'),
            ('surname', passport_data.get('surname', ''), 'surname'),
            ('name', passport_data.get('name', ''), 'name'),
            ('birthdate', passport_data.get('birthdate', ''), 'birthdate'),
            ('phone', self._generate_phone(), 'phone')  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
            # ('patronymic', passport_data.get('patronymic', ''), 'patronymic')  # –ü–†–û–ü–£–°–ö–ê–ï–ú –æ—Ç—á–µ—Å—Ç–≤–æ
        ]
        
        filled_count = 0
        
        for field_key, value, description in fields_to_fill:
            if not value:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                logger.info(f"‚è≠Ô∏è Skipping {description} - no value provided")
                continue
                
            if field_key not in self.selectors:
                logger.warning(f"‚ö†Ô∏è No selectors for {description}")
                continue
            
            logger.info(f"üìù Attempting to fill {description}: '{value}'")
            
            field_filled = False
            for i, selector in enumerate(self.selectors[field_key]):
                logger.info(f"   üéØ Trying selector {i+1}/{len(self.selectors[field_key])}: {selector}")
                
                element = self.find_element_safe(By.XPATH, selector)
                if element:
                    logger.info(f"   ‚úÖ Found element for {description}")
                    
                    if element.is_displayed() and element.is_enabled():
                        try:
                            success = await self.human_type_text(element, str(value))
                            if success:
                                logger.info(f"‚úÖ {description} filled successfully with '{value}'")
                                field_filled = True
                                filled_count += 1
                                await asyncio.sleep(random.uniform(0.3, 0.7))
                                break
                            else:
                                logger.warning(f"‚ö†Ô∏è Failed to type in {description} field")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Error filling {description}: {e}")
                            continue
                    else:
                        logger.info(f"   ‚ùå Element not visible/enabled for {description}")
                else:
                    logger.info(f"   ‚ùå Element not found for {description}")
            
            if not field_filled:
                logger.warning(f"‚ö†Ô∏è Could not fill {description} with any selector")
        
        logger.info(f"üìä Filled {filled_count}/{len(fields_to_fill)} fields successfully")
        
        await asyncio.sleep(2)
        self.take_screenshot("step8_sender_data_filled.png")
        
        # –®–∞–≥ 9: Checkbox —Å–æ–≥–ª–∞—Å–∏—è
        logger.info("‚òëÔ∏è Step 9: Accepting agreement checkbox")
        logger.info("üîç Looking for checkbox left of text: '–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –ø.1.5 –∏ –ø.5.2.1 –£—Å–ª–æ–≤–∏–π'")
        
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        text_patterns = [
            "–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
            "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
            "–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å",
            "—Å–æ–≥–ª–∞—Å–Ω–æ",
            "–£—Å–ª–æ–≤–∏–π",
            "–ø.1.5",
            "–ø.5.2.1"
        ]
        
        for pattern in text_patterns:
            text_elements = self._driver.find_elements(By.XPATH, f"//*[contains(text(), '{pattern}')]")
            logger.info(f"üîç Found {len(text_elements)} elements with '{pattern}' text")
            
            for i, elem in enumerate(text_elements[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                try:
                    text_content = elem.text.strip()
                    logger.info(f"üìù '{pattern}' element {i+1}: '{text_content[:100]}...'")
                    logger.info(f"üìç Tag: {elem.tag_name}, Visible: {elem.is_displayed()}")
                except:
                    logger.info(f"üìù '{pattern}' element {i+1}: Could not get text content")
        
        # –¢–∞–∫–∂–µ –ø–æ–∏—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        all_text_elements = self._driver.find_elements(By.XPATH, "//*[text()]")
        logger.info(f"üîç Searching through {len(all_text_elements)} text elements for agreement text...")
        
        agreement_elements = []
        for elem in all_text_elements:
            try:
                text = elem.text.strip().lower()
                if any(word in text for word in ['–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', '–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å', '—É—Å–ª–æ–≤–∏–π', '—Å–æ–≥–ª–∞—Å–Ω–æ']):
                    agreement_elements.append(elem)
                    logger.info(f"üìù Found agreement text: '{elem.text.strip()[:100]}...'")
                    logger.info(f"üìç Tag: {elem.tag_name}, Visible: {elem.is_displayed()}")
            except:
                continue
        
        logger.info(f"üîç Found {len(agreement_elements)} elements with agreement-related text")
        
        checkbox_clicked = False
        for i, selector in enumerate(self.selectors['agreement_checkbox']):
            logger.info(f"üéØ Trying checkbox selector {i+1}/{len(self.selectors['agreement_checkbox'])}: {selector}")
            
            elements = self._driver.find_elements(By.XPATH, selector)
            logger.info(f"üîç Found {len(elements)} elements with selector {i+1}")
            
            for j, element in enumerate(elements):
                try:
                    if element and element.is_displayed():
                        logger.info(f"‚úÖ Element {j+1} is visible, attempting click...")
                        
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                        self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        await asyncio.sleep(0.5)
                        
                        if self.click_element_safe(element):
                            logger.info("‚úÖ Agreement checkbox checked successfully!")
                            checkbox_clicked = True
                            await asyncio.sleep(1)
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è Failed to click checkbox element {j+1}")
                    else:
                        logger.info(f"‚ùå Element {j+1} not visible or not found")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error with element {j+1}: {e}")
                    continue
            
            if checkbox_clicked:
                break
        
        if not checkbox_clicked:
            logger.error("‚ùå Could not check agreement checkbox with any selector")
            logger.error("üîç Taking screenshot for debugging...")
            self.take_screenshot("debug_checkbox_not_found.png")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ checkbox –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            all_checkboxes = self._driver.find_elements(By.XPATH, "//input[@type='checkbox']")
            logger.info(f"üîç DEBUG: Found {len(all_checkboxes)} total checkboxes on page")
            
            for i, cb in enumerate(all_checkboxes):
                try:
                    logger.info(f"üîç Checkbox {i+1}: visible={cb.is_displayed()}, enabled={cb.is_enabled()}")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–∫—Ä—ã—Ç–æ–º—É checkbox
                    if cb.is_enabled() and not cb.is_displayed():
                        logger.info(f"üéØ Attempting to force click hidden checkbox {i+1}")
                        
                        try:
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞
                            methods = [
                                lambda: cb.click(),
                                lambda: self._driver.execute_script("arguments[0].click();", cb),
                                lambda: self._driver.execute_script("arguments[0].checked = true;", cb),
                                lambda: self._driver.execute_script("arguments[0].style.display = 'block'; arguments[0].click();", cb)
                            ]
                            
                            for j, method in enumerate(methods):
                                try:
                                    method()
                                    logger.info(f"‚úÖ Force click method {j+1} successful on checkbox {i+1}")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ checkbox —Å—Ç–∞–ª –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º
                                    if cb.is_selected():
                                        logger.info("‚úÖ Checkbox is now checked!")
                                        checkbox_clicked = True
                                        break
                                    else:
                                        logger.info("‚ö†Ô∏è Checkbox clicked but not checked")
                                        
                                except Exception as method_error:
                                    logger.info(f"‚ùå Force click method {j+1} failed: {method_error}")
                                    
                            if checkbox_clicked:
                                break
                                
                        except Exception as force_error:
                            logger.info(f"‚ùå Force click on checkbox {i+1} failed: {force_error}")
                            
                except Exception as cb_error:
                    logger.info(f"‚ùå Error checking checkbox {i+1}: {cb_error}")
                    pass
            
            if not checkbox_clicked:
                raise Exception("Failed to check agreement checkbox - cannot proceed")
        
        self.take_screenshot("step9_agreement_checked.png")
        logger.info("üìã Step 8-9 completed - ready for final submission")
    
    def _generate_phone(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX
        prefix = "+7"
        # –ü–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ +7 (9 –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        first_digit = "9"
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ 9 —Ü–∏—Ñ—Ä
        remaining_digits = ''.join([str(random.randint(0, 9)) for _ in range(9)])
        
        phone = f"{prefix}{first_digit}{remaining_digits}"
        logger.info(f"üì± Generated phone: {phone}")
        return phone

    async def _submit_final_form(self):
        """–®–∞–≥–∏ 10-12: –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –ü–†–û–î–û–õ–ñ–ò–¢–¨ + –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        logger.info("üì§ Step 10: Submitting final form")
        
        final_clicked = False
        for selector in self.selectors['final_continue']:
            element = self.find_element_safe(By.XPATH, selector)
            if element and element.is_displayed() and element.is_enabled():
                try:
                    logger.info("üéØ Clicking final –ü–†–û–î–û–õ–ñ–ò–¢–¨ button")
                    await asyncio.sleep(random.uniform(0.5, 1.0))
                    
                    if self.click_element_safe(element):
                        logger.info("‚úÖ Final form submitted successfully")
                        final_clicked = True
                        break
                except:
                    continue
        
        if not final_clicked:
            raise Exception("Could not submit final form")
        
        await asyncio.sleep(3)  # Increased wait for processing
        self.take_screenshot("step10_final_result.png")
        
        # –®–∞–≥ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        logger.info("üîê Step 11: Checking and solving CAPTCHA if present")
        captcha_solved = await self.captcha_solver.solve_captcha(self._driver)
        if captcha_solved:
            logger.info("‚úÖ CAPTCHA step completed successfully")
            await asyncio.sleep(2)  # Wait after captcha
            self.take_screenshot("step11_captcha_solved.png")
        else:
            logger.warning("‚ö†Ô∏è CAPTCHA step failed or not needed")
        
        # –®–∞–≥ 12: –ù–û–í–´–ô - –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
        logger.info("üîç Step 12: Handling '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal window")
        await self._handle_data_verification_modal()
        
        logger.info("üéâ All 12 steps completed!")

    async def _handle_data_verification_modal(self):
        """–®–∞–≥ 12: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö'"""
        logger.info("üìã Looking for '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal window...")
        
        try:
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            await asyncio.sleep(2)
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
            modal_selectors = [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]",
                "//*[contains(@class, 'modal') and contains(., '–ü—Ä–æ–≤–µ—Ä–∫–∞')]",
                "//h2[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//h3[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]"
            ]
            
            modal_found = False
            for selector in modal_selectors:
                element = self.find_element_safe(By.XPATH, selector)
                if element and element.is_displayed():
                    logger.info("‚úÖ Found '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal window")
                    modal_found = True
                    break
            
            if not modal_found:
                logger.info("‚ÑπÔ∏è No '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal found, continuing...")
                return
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.take_screenshot("step12_data_verification_modal.png")
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–†–û–î–û–õ–ñ–ò–¢–¨" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            modal_continue_selectors = [
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]//ancestor::div[contains(@class, 'modal')]//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]//following::button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')][1]",
                
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                "//*[contains(@class, 'modal')]//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                "//*[contains(@class, 'modal')]//button[contains(text(), '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')]",
                
                # –ö–Ω–æ–ø–∫–∞ —Å —Å–∏–Ω–∏–º —Ñ–æ–Ω–æ–º (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
                "//button[contains(@style, 'background') and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                "//button[contains(@class, 'btn-primary') and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –ü–†–û–î–û–õ–ñ–ò–¢–¨ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                "(//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')])[last()]",
                
                # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∏–ª—è–º (—Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞)
                "//button[contains(@class, 'blue') and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]",
                "//button[contains(@class, 'primary') and contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ]
            
            modal_continue_clicked = False
            for i, selector in enumerate(modal_continue_selectors):
                logger.info(f"üéØ Trying modal continue selector {i+1}/{len(modal_continue_selectors)}: {selector}")
                
                element = self.find_element_safe(By.XPATH, selector)
                if element and element.is_displayed() and element.is_enabled():
                    try:
                        logger.info("üéØ Found modal –ü–†–û–î–û–õ–ñ–ò–¢–¨ button, clicking...")
                        
                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                        self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
                        await asyncio.sleep(0.5)
                        
                        # –ö–ª–∏–∫–∞–µ–º
                        if self.click_element_safe(element):
                            logger.info("‚úÖ Successfully clicked modal –ü–†–û–î–û–õ–ñ–ò–¢–¨ button")
                            modal_continue_clicked = True
                            break
                        else:
                            logger.warning(f"‚ö†Ô∏è Failed to click modal button with selector {i+1}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error with modal selector {i+1}: {e}")
                        continue
                else:
                    logger.info(f"‚ùå Modal button not found/visible with selector {i+1}")
            
            if not modal_continue_clicked:
                logger.warning("‚ö†Ô∏è Could not click –ü–†–û–î–û–õ–ñ–ò–¢–¨ in modal window")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –Ω–∞–π—Ç–∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –Ω—É–∂–Ω–æ–π
                all_buttons = self.find_elements_safe(By.TAG_NAME, "button")
                logger.info(f"üîç Found {len(all_buttons)} total buttons on page")
                
                for i, btn in enumerate(all_buttons):
                    try:
                        text = btn.text or ""
                        if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in text.upper() and btn.is_displayed() and btn.is_enabled():
                            logger.info(f"üéØ Attempting to click button {i+1}: '{text}'")
                            
                            if self.click_element_safe(btn):
                                logger.info(f"‚úÖ Successfully clicked button {i+1}")
                                modal_continue_clicked = True
                                break
                    except:
                        continue
            
            if modal_continue_clicked:
                logger.info("‚úÖ Modal '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' handled successfully")
                await asyncio.sleep(2)  # Wait for next page to load
                self.take_screenshot("step12_modal_completed.png")
            else:
                logger.error("‚ùå Failed to handle '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö' modal")
                raise Exception("Could not proceed from data verification modal")
        
        except Exception as e:
            logger.error(f"‚ùå Error in _handle_data_verification_modal: {e}")
            self.take_screenshot("step12_modal_error.png")
            # Don't raise exception here - continue with process as modal might not always appear
            logger.warning("‚ö†Ô∏è Continuing without modal handling...")

    async def _get_payment_result(self) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        logger.info("üîç Extracting payment result (QR code and payment URL)")
        
        await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.take_screenshot("final_payment_result.png")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
        current_url = self._driver.current_url if self._driver else None
        
        # –ò—â–µ–º QR-–∫–æ–¥
        qr_code_url = None
        qr_selectors = [
            "//img[contains(@src, 'qr')]",
            "//img[contains(@alt, 'QR')]", 
            "//img[contains(@class, 'qr')]",
            "//*[contains(@class, 'qr-code')]//img",
            "//*[contains(@id, 'qr')]//img",
            "//canvas[contains(@class, 'qr')]"
        ]
        
        for selector in qr_selectors:
            element = self.find_element_safe(By.XPATH, selector)
            if element:
                qr_url = self.get_element_attribute(element, "src")
                if qr_url:
                    qr_code_url = qr_url
                    logger.info(f"‚úÖ Found QR code: {qr_url[:100]}...")
                    break
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = current_url  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π URL
        payment_link_selectors = [
            "//a[contains(@href, 'pay')]",
            "//a[contains(@href, 'payment')]", 
            "//a[contains(text(), '–û–ø–ª–∞—Ç–∏—Ç—å')]",
            "//button[contains(text(), '–û–ø–ª–∞—Ç–∏—Ç—å')]"
        ]
        
        for selector in payment_link_selectors:
            element = self.find_element_safe(By.XPATH, selector)
            if element:
                href = self.get_element_attribute(element, "href")
                if href:
                    payment_url = href
                    logger.info(f"‚úÖ Found payment URL: {href}")
                    break
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –æ–±–º–µ–Ω–∞
        exchange_rate = None
        rate_selectors = [
            "//*[contains(text(), '–ö—É—Ä—Å')]",
            "//*[contains(text(), '–∫—É—Ä—Å')]",
            "//*[contains(text(), 'Rate')]"
        ]
        
        for selector in rate_selectors:
            element = self.find_element_safe(By.XPATH, selector)
            if element:
                rate_text = element.text or ""
                # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                numbers = re.findall(r'\d+\.?\d*', rate_text)
                if numbers:
                    try:
                        exchange_rate = float(numbers[0])
                        logger.info(f"üí± Found exchange rate: {exchange_rate}")
                        break
                    except:
                        pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        success = bool(qr_code_url or payment_url != self.base_url)
        
        result = {
            'success': success,
            'qr_code_url': qr_code_url,
            'payment_url': payment_url,
            'exchange_rate': exchange_rate,
            'page_title': self._driver.title if self._driver else None,
            'current_url': current_url
        }
        
        if not success:
            result['error'] = 'No QR code or payment URL found on result page'
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            error_selectors = [
                "//*[contains(@class, 'error')]",
                "//*[contains(@class, 'alert')]",
                "//*[contains(text(), '–û—à–∏–±–∫–∞')]"
            ]
            
            for selector in error_selectors:
                element = self.find_element_safe(By.XPATH, selector)
                if element and element.text:
                    result['error'] = element.text.strip()
                    logger.error(f"üö® Found error message: {element.text}")
                    break
        
        logger.info(f"üìä Payment result: success={success}, QR={'‚úÖ' if qr_code_url else '‚ùå'}, URL={'‚úÖ' if payment_url else '‚ùå'}")
        return result