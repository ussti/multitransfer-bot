"""
OPTIMIZED MultiTransfer.ru Browser Automation
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã (—Ü–µ–ª—å: –¥–æ 30 —Å–µ–∫—É–Ω–¥)
"""

import logging
import asyncio
import random
import time
import re
from typing import Dict, Any, Optional
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc
from web.captcha.solver import CaptchaSolver

logger = logging.getLogger(__name__)

class MultiTransferAutomation:
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è multitransfer.ru - —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥"""
    
    def __init__(self, proxy: Optional[Dict[str, Any]] = None, config: Optional[Dict[str, Any]] = None):
        self.proxy = proxy
        self.config = config or {}
        self.base_url = "https://multitransfer.ru"
        self._driver = None
        self.captcha_solver = CaptchaSolver(config)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.screenshot_enabled = config.get('development', {}).get('screenshots_enabled', False)
        self.fast_mode = config.get('multitransfer', {}).get('fast_mode', True)
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï —Å–µ–ª–µ–∫—Ç–æ—Ä—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ
        self.selectors = {
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã (—Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            'transfer_abroad_btn': [
                "//button[contains(text(), '–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ')]"
            ],
            
            'tajikistan_select': [
                "//span[text()='–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω']/parent::div",
                "//div[contains(text(), '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')]"
            ],
            
            'amount_input': [
                "//input[contains(@placeholder, 'RUB')]",
                "//input[@type='number']"
            ],
            
            'currency_tjs': [
                "//button[contains(text(), 'TJS')]",
                "//*[text()='TJS']"
            ],
            
            'transfer_method_dropdown': [
                "//div[contains(text(), '–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞')]//following-sibling::*",
                "//*[contains(text(), '—Å–ø–æ—Å–æ–±')]"
            ],
            
            'korti_milli_option': [
                "//*[contains(text(), '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏')]"
            ],
            
            'continue_btn': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ],
            
            'recipient_card': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã']",
                "//input[contains(@placeholder, '–∫–∞—Ä—Ç—ã')]"
            ],
            
            'passport_rf_toggle': [
                "//button[contains(text(), '–ü–∞—Å–ø–æ—Ä—Ç –†–§')]"
            ],
            
            # –ü–æ–ª—è —Ñ–æ—Ä–º—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            'passport_series': [
                "//input[@placeholder='–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞']"
            ],
            
            'passport_number': [
                "//input[@placeholder='–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞']"
            ],
            
            'passport_date': [
                "//label[contains(text(), '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[2]"
            ],
            
            'surname': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é']"
            ],
            
            'name': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –∏–º—è']"
            ],
            
            'birthdate': [
                "//label[contains(text(), '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')]//following-sibling::*//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì']",
                "(//input[@placeholder='–î–î.–ú–ú.–ì–ì–ì–ì'])[1]"
            ],
            
            'phone': [
                "//input[@placeholder='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']"
            ],
            
            'agreement_checkbox': [
                "//input[@type='checkbox']"
            ],
            
            'final_continue': [
                "//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ],
            
            # Step 12: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            'data_verification_modal': [
                "//div[contains(text(), '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö')]",
                "//*[contains(text(), '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è')]"
            ],
            
            'modal_continue_btn': [
                "(//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')])[last()]",
                "//*[contains(@class, 'modal')]//button[contains(text(), '–ü–†–û–î–û–õ–ñ–ò–¢–¨')]"
            ]
        }
    
    async def _setup_driver(self):
        """–ë–´–°–¢–†–ê–Ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            logger.info("üöÄ Fast Chrome driver setup...")
            
            options = uc.ChromeOptions()
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-plugins')
            options.add_argument('--disable-images')  # –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            options.add_argument('--disable-javascript')  # –ß–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º JS (–≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ)
            options.add_argument('--window-size=1920,1080')
            
            # –ü—Ä–æ–∫—Å–∏
            if self.proxy:
                proxy_string = f"{self.proxy['ip']}:{self.proxy['port']}"
                options.add_argument(f'--proxy-server=http://{proxy_string}')
                logger.info(f"üåê Using proxy: {proxy_string}")
            
            # –ë—ã—Å—Ç—Ä—ã–π user agent
            options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36')
            
            # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä —Å –±—ã—Å—Ç—Ä—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self._driver = uc.Chrome(options=options)
            self._driver.implicitly_wait(3)  # –°–æ–∫—Ä–∞—â–µ–Ω–æ —Å 10 –¥–æ 3 —Å–µ–∫—É–Ω–¥
            
            logger.info("‚úÖ Fast Chrome driver ready")
            return self._driver
            
        except Exception as e:
            logger.error(f"‚ùå Failed to setup Chrome driver: {e}")
            return None
    
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def find_element_fast(self, by, selector, timeout=2):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ (2 —Å–µ–∫ –≤–º–µ—Å—Ç–æ 5)"""
        try:
            element = WebDriverWait(self._driver, timeout).until(
                EC.presence_of_element_located((by, selector))
            )
            return element
        except:
            return None
    
    def find_elements_fast(self, by, selector):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è"""
        try:
            return self._driver.find_elements(by, selector)
        except:
            return []
    
    def click_element_fast(self, element):
        """–ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫"""
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
            self._driver.execute_script("arguments[0].scrollIntoView(true);", element)
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∫–ª–∏–∫
            element.click()
            return True
        except:
            try:
                self._driver.execute_script("arguments[0].click();", element)
                return True
            except:
                return False
    
    def type_text_fast(self, element, text):
        """–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏)"""
        try:
            element.clear()
            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            element.send_keys(text)
            return True
        except:
            return False
    
    def take_screenshot_conditional(self, filename):
        """–°–∫—Ä–∏–Ω—à–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
        if self.screenshot_enabled:
            try:
                import os
                os.makedirs("logs/automation", exist_ok=True)
                self._driver.save_screenshot(f"logs/automation/{filename}")
                logger.debug(f"üì∏ Screenshot: {filename}")
            except:
                pass
    
    # –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î
    
    async def create_payment(self, payment_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (—Ü–µ–ª—å: –¥–æ 30 —Å–µ–∫—É–Ω–¥)"""
        start_time = time.time()
        try:
            logger.info(f"üöÄ FAST payment creation: {payment_data['amount']} {payment_data.get('currency_from', 'RUB')}")
            
            # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            driver = await self._setup_driver()
            if not driver:
                return {'success': False, 'error': 'Failed to setup browser driver'}
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞
            self._driver.get(self.base_url)
            self.take_screenshot_conditional("00_homepage.png")
            
            # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            await self._fast_country_and_amount(payment_data)
            await self._fast_fill_forms(payment_data)
            await self._fast_submit_and_captcha()
            await self._fast_handle_modal()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = await self._get_payment_result()
            
            total_time = time.time() - start_time
            logger.info(f"‚úÖ FAST payment completed in {total_time:.1f}s!")
            return result
            
        except Exception as e:
            total_time = time.time() - start_time
            logger.error(f"‚ùå Payment failed after {total_time:.1f}s: {e}")
            self.take_screenshot_conditional("error_final.png")
            return {'success': False, 'error': str(e)}
            
        finally:
            if hasattr(self, '_driver') and self._driver:
                try:
                    self._driver.quit()
                except:
                    pass
                self._driver = None
    
    async def _fast_country_and_amount(self, payment_data: Dict[str, Any]):
        """–ë–´–°–¢–†–´–ï —à–∞–≥–∏ 1-6: —Å—Ç—Ä–∞–Ω–∞ –∏ —Å—É–º–º–∞ (—Ü–µ–ª—å: 8-10 —Å–µ–∫—É–Ω–¥)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast steps 1-6: country and amount")
        
        # –®–∞–≥ 1: –ö–ª–∏–∫ "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" - –ë–ï–ó –ó–ê–î–ï–†–ñ–ï–ö
        await asyncio.sleep(1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–ï–†–ï–í–ï–°–¢–ò –ó–ê –†–£–ë–ï–ñ" in (btn.text or ""):
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 1: Transfer abroad clicked")
                    break
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        for selector in self.selectors['tajikistan_select']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 2: Tajikistan selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É–º–º—ã - –ú–ì–ù–û–í–ï–ù–ù–û
        await asyncio.sleep(0.5)
        
        for selector in self.selectors['amount_input']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.type_text_fast(element, str(int(payment_data['amount']))):
                    logger.info("‚úÖ Step 3: Amount filled")
                    break
        
        # –®–∞–≥ 4: –í–∞–ª—é—Ç–∞ TJS - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        for selector in self.selectors['currency_tjs']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 4: TJS currency selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 5: –°–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º dropdown
        for selector in self.selectors['transfer_method_dropdown']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    break
        
        await asyncio.sleep(0.3)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏
        for selector in self.selectors['korti_milli_option']:
            elements = self.find_elements_fast(By.XPATH, selector)
            for element in elements:
                if element.is_displayed() and self.click_element_fast(element):
                    logger.info("‚úÖ Step 5: Korti Milli selected")
                    break
            else:
                continue
            break
        
        # –®–∞–≥ 6: –ü–†–û–î–û–õ–ñ–ò–¢–¨ - –ë–´–°–¢–†–û
        await asyncio.sleep(0.3)
        
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in (btn.text or "").upper():
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 6: Continue clicked")
                    break
        
        await asyncio.sleep(0.5)
        self.take_screenshot_conditional("fast_steps_1-6.png")
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Steps 1-6 completed FAST!")
    
    async def _fast_fill_forms(self, payment_data: Dict[str, Any]):
        """–ë–´–°–¢–†–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º 7-9 (—Ü–µ–ª—å: 8-10 —Å–µ–∫—É–Ω–¥)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast form filling steps 7-9")
        
        # –®–∞–≥ 7: –ö–∞—Ä—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è - –ú–ì–ù–û–í–ï–ù–ù–û
        card_number = payment_data.get('recipient_card', '')
        for selector in self.selectors['recipient_card']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.type_text_fast(element, card_number):
                    logger.info("‚úÖ Step 7: Recipient card filled")
                    break
        
        # –®–∞–≥–∏ 8-9: –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –ë–´–°–¢–†–û
        passport_data = payment_data.get('passport_data', {})
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ü–∞—Å–ø–æ—Ä—Ç –†–§
        for selector in self.selectors['passport_rf_toggle']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                self.click_element_fast(element)
                break
        
        # –ë–´–°–¢–†–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
        fields_to_fill = [
            ('passport_series', passport_data.get('passport_series', '')),
            ('passport_number', passport_data.get('passport_number', '')),
            ('passport_date', passport_data.get('passport_date', '')),
            ('surname', passport_data.get('surname', '')),
            ('name', passport_data.get('name', '')),
            ('birthdate', passport_data.get('birthdate', '')),
            ('phone', self._generate_phone())
        ]
        
        for field_key, value in fields_to_fill:
            if not value:
                continue
                
            for selector in self.selectors[field_key]:
                element = self.find_element_fast(By.XPATH, selector, timeout=1)
                if element and element.is_displayed() and element.is_enabled():
                    if self.type_text_fast(element, str(value)):
                        logger.debug(f"‚úÖ {field_key} filled")
                        break
                else:
                    continue
                break
        
        # –®–∞–≥ 9: Checkbox —Å–æ–≥–ª–∞—Å–∏—è - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û
        await asyncio.sleep(0.3)
        
        checkboxes = self.find_elements_fast(By.XPATH, "//input[@type='checkbox']")
        for cb in checkboxes:
            try:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
                self._driver.execute_script("arguments[0].click();", cb)
                if cb.is_selected():
                    logger.info("‚úÖ Step 9: Agreement checkbox checked")
                    break
            except:
                continue
        
        self.take_screenshot_conditional("fast_forms_filled.png")
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Forms filled FAST!")
    
    async def _fast_submit_and_captcha(self):
        """–ë–´–°–¢–†–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ 10-11 (—Ü–µ–ª—å: –¥–æ 35 —Å–µ–∫—É–Ω–¥ —Å –∫–∞–ø—á–µ–π)"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast submit and captcha steps 10-11")
        
        # –®–∞–≥ 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        buttons = self.find_elements_fast(By.TAG_NAME, "button")
        for btn in buttons:
            if "–ü–†–û–î–û–õ–ñ–ò–¢–¨" in (btn.text or "").upper():
                if self.click_element_fast(btn):
                    logger.info("‚úÖ Step 10: Final form submitted")
                    break
        
        await asyncio.sleep(1)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –®–∞–≥ 11: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏
        logger.info("üîê Step 11: CRITICAL CAPTCHA solving")
        captcha_solved = await self.captcha_solver.solve_captcha(self._driver)
        
        if captcha_solved:
            logger.info("‚úÖ Step 11: CAPTCHA solved successfully")
        else:
            logger.error("‚ùå Step 11: CAPTCHA solve FAILED - cannot proceed")
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –µ—Å–ª–∏ –∫–∞–ø—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ - –°–¢–û–ü
            raise Exception("CAPTCHA solve failed - payment process cannot continue")
        
        self.take_screenshot_conditional("fast_captcha_step.png")
    
    async def _fast_handle_modal(self):
        """–ë–´–°–¢–†–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Step 12"""
        logger.info("üèÉ‚Äç‚ôÇÔ∏è Fast modal handling step 12")
        
        await asyncio.sleep(0.5)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal_found = False
        for selector in self.selectors['data_verification_modal']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                modal_found = True
                break
        
        if not modal_found:
            logger.info("‚ÑπÔ∏è No modal found, continuing...")
            return
        
        logger.info("‚úÖ Modal found, clicking continue...")
        
        # –ë—ã—Å—Ç—Ä—ã–π –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        for selector in self.selectors['modal_continue_btn']:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element and element.is_displayed():
                if self.click_element_fast(element):
                    logger.info("‚úÖ Step 12: Modal continue clicked")
                    break
        
        await asyncio.sleep(0.5)
        self.take_screenshot_conditional("fast_modal_handled.png")
    
    def _generate_phone(self) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        return f"+7{random.randint(900, 999)}{random.randint(1000000, 9999999)}"
    
    async def _get_payment_result(self) -> Dict[str, Any]:
        """–ë–´–°–¢–†–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        logger.info("üîç Fast result extraction")
        
        await asyncio.sleep(1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.take_screenshot_conditional("fast_final_result.png")
        
        current_url = self._driver.current_url
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ QR-–∫–æ–¥–∞
        qr_code_url = None
        qr_selectors = [
            "//img[contains(@src, 'qr')]",
            "//img[contains(@alt, 'QR')]"
        ]
        
        for selector in qr_selectors:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element:
                qr_url = element.get_attribute("src")
                if qr_url:
                    qr_code_url = qr_url
                    logger.info(f"‚úÖ QR found: {qr_url[:50]}...")
                    break
        
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = current_url
        payment_selectors = [
            "//a[contains(@href, 'pay')]",
            "//button[contains(text(), '–û–ø–ª–∞—Ç–∏—Ç—å')]"
        ]
        
        for selector in payment_selectors:
            element = self.find_element_fast(By.XPATH, selector, timeout=1)
            if element:
                href = element.get_attribute("href")
                if href:
                    payment_url = href
                    break
        
        success = bool(qr_code_url or payment_url != self.base_url)
        
        result = {
            'success': success,
            'qr_code_url': qr_code_url,
            'payment_url': payment_url,
            'current_url': current_url
        }
        
        if not success:
            result['error'] = 'No QR code or payment URL found'
        
        logger.info(f"üìä FAST result: success={success}")
        return result