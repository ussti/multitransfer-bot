"""
–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ macOS
"""
import subprocess
import logging
import asyncio
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class SystemProxyManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏ macOS"""
    
    def __init__(self):
        self.original_settings = {}
        self.is_configured = False
    
    async def configure_proxy(self, proxy_config: Dict[str, str]) -> bool:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (HTTP –∏–ª–∏ SOCKS)
        
        Args:
            proxy_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ (ip, port, user, pass, type)
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            await self._save_current_settings()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            ip = proxy_config['ip']
            port = proxy_config['port']
            user = proxy_config.get('user', '')
            password = proxy_config.get('pass', '')
            proxy_type = proxy_config.get('type', 'http').lower()
            
            logger.info(f"üîß Configuring system {proxy_type.upper()} proxy: {ip}:{port}")
            
            if proxy_type == 'socks5':
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SOCKS –ø—Ä–æ–∫—Å–∏ –¥–ª—è Wi-Fi
                cmd = [
                    'networksetup', '-setsocksfirewallproxy', 'Wi-Fi', 
                    ip, port
                ]
                
                if user and password:
                    cmd.extend([user, password])
                
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode != 0:
                    logger.error(f"‚ùå Failed to set SOCKS proxy: {result.stderr}")
                    return False
                
                # –í–∫–ª—é—á–∞–µ–º SOCKS –ø—Ä–æ–∫—Å–∏
                result = subprocess.run([
                    'networksetup', '-setsocksfirewallproxystate', 'Wi-Fi', 'on'
                ], capture_output=True, text=True)
                
                if result.returncode != 0:
                    logger.error(f"‚ùå Failed to enable SOCKS proxy: {result.stderr}")
                    return False
                    
            else:  # HTTP –ø—Ä–æ–∫—Å–∏
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –ø—Ä–æ–∫—Å–∏ –¥–ª—è Wi-Fi
                cmd = [
                    'networksetup', '-setwebproxy', 'Wi-Fi', 
                    ip, port
                ]
                
                if user and password:
                    cmd.extend([user, password])
                
                result = subprocess.run(cmd, capture_output=True, text=True)
                
                if result.returncode != 0:
                    logger.error(f"‚ùå Failed to set HTTP proxy: {result.stderr}")
                    return False
                
                # –í–∫–ª—é—á–∞–µ–º HTTP –ø—Ä–æ–∫—Å–∏
                result = subprocess.run([
                    'networksetup', '-setwebproxystate', 'Wi-Fi', 'on'
                ], capture_output=True, text=True)
                
                if result.returncode != 0:
                    logger.error(f"‚ùå Failed to enable HTTP proxy: {result.stderr}")
                    return False
                
                # –¢–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTPS –ø—Ä–æ–∫—Å–∏
                subprocess.run([
                    'networksetup', '-setsecurewebproxy', 'Wi-Fi', 
                    ip, port, user, password
                ] if user and password else [
                    'networksetup', '-setsecurewebproxy', 'Wi-Fi', 
                    ip, port
                ])
                
                subprocess.run([
                    'networksetup', '-setsecurewebproxystate', 'Wi-Fi', 'on'
                ])
            
            self.is_configured = True
            logger.info(f"‚úÖ System {proxy_type.upper()} proxy configured successfully")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await asyncio.sleep(2)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configuring system proxy: {e}")
            return False
    
    async def restore_settings(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        if not self.is_configured:
            return
        
        try:
            logger.info("üîÑ Restoring original proxy settings...")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –ø—Ä–æ–∫—Å–∏
            subprocess.run([
                'networksetup', '-setsocksfirewallproxystate', 'Wi-Fi', 'off'
            ], capture_output=True)
            
            subprocess.run([
                'networksetup', '-setwebproxystate', 'Wi-Fi', 'off'
            ], capture_output=True)
            
            subprocess.run([
                'networksetup', '-setsecurewebproxystate', 'Wi-Fi', 'off'
            ], capture_output=True)
            
            logger.info("‚úÖ Original proxy settings restored")
            self.is_configured = False
            
        except Exception as e:
            logger.error(f"‚ùå Error restoring proxy settings: {e}")
    
    async def _save_current_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        try:
            result = subprocess.run([
                'networksetup', '-getsocksfirewallproxy', 'Wi-Fi'
            ], capture_output=True, text=True)
            
            self.original_settings['socks'] = result.stdout
            logger.debug(f"üíæ Saved original SOCKS settings: {result.stdout}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving current settings: {e}")
    
    async def test_proxy_connection(self, proxy_config: Dict[str, str]) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–∫—Å–∏
        
        Args:
            proxy_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ curl —Å –ø—Ä–æ–∫—Å–∏
            proxy_type = proxy_config.get('type', 'http').lower()
            if proxy_type == 'socks5':
                proxy_url = f"socks5://{proxy_config['user']}:{proxy_config['pass']}@{proxy_config['ip']}:{proxy_config['port']}"
            else:
                proxy_url = f"http://{proxy_config['user']}:{proxy_config['pass']}@{proxy_config['ip']}:{proxy_config['port']}"
            
            result = subprocess.run([
                'curl', '--connect-timeout', '10', '--proxy', proxy_url,
                'http://httpbin.org/ip'
            ], capture_output=True, text=True, timeout=15)
            
            if result.returncode == 0:
                logger.info(f"‚úÖ Proxy connection test successful: {result.stdout[:100]}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Proxy connection test failed: {result.stderr}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error testing proxy connection: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
system_proxy_manager = SystemProxyManager()