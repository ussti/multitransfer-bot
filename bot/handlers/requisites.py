"""
Handlers for user requisites management
Step-by-step data collection process
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from bot.states.requisites import RequisitesStates
from bot.keyboards.inline import (
    get_countries_keyboard, 
    get_banks_keyboard,
    get_confirmation_keyboard,
    get_main_menu_keyboard
)
from utils.validators import (
    validate_card_number,
    validate_passport_series, 
    validate_passport_number,
    validate_date,
    validate_name,
    validate_phone,
    format_card_number,
    format_phone
)

router = Router()

@router.message(Command("settings"))
async def cmd_settings(message: Message, state: FSMContext):
    """Start requisites setup process"""
    print(f"üî• SETTINGS COMMAND RECEIVED from user {message.from_user.id}")  # –û–¢–õ–ê–î–ö–ê
    await state.clear()
    
    text = """
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>

–î–∞–≤–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π.

<b>üìã –ß—Ç–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:</b>
‚Ä¢ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –í–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

<b>üöÄ –ù–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>
    """
    
    await message.answer(text, reply_markup=get_countries_keyboard())
    await state.set_state(RequisitesStates.waiting_for_country)

@router.callback_query(F.data.startswith("country_"), RequisitesStates.waiting_for_country)
async def process_country_selection(callback: CallbackQuery, state: FSMContext):
    """Process country selection"""
    country_code = callback.data.split("_", 1)[1]
    
    # Save country to state
    await state.update_data(country=country_code)
    
    from core.config import get_config
    config = get_config()
    country_data = config.multitransfer['supported_countries'].get(country_code)
    
    if not country_data:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞")
        return
    
    text = f"""
<b>‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {country_data['name']}</b>

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:
    """
    
    await callback.message.edit_text(text, reply_markup=get_banks_keyboard(country_code))
    await state.set_state(RequisitesStates.waiting_for_bank)
    await callback.answer()

@router.callback_query(F.data == "back_to_countries", RequisitesStates.waiting_for_bank)
async def back_to_countries(callback: CallbackQuery, state: FSMContext):
    """Back to country selection"""
    text = """
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b>

<b>üöÄ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>
    """
    
    await callback.message.edit_text(text, reply_markup=get_countries_keyboard())
    await state.set_state(RequisitesStates.waiting_for_country)
    await callback.answer()

@router.callback_query(F.data.startswith("bank_"), RequisitesStates.waiting_for_bank)
async def process_bank_selection(callback: CallbackQuery, state: FSMContext):
    """Process bank selection"""
    bank_code = callback.data.split("_", 1)[1]
    
    # Save bank to state
    await state.update_data(bank=bank_code)
    
    bank_names = {
        'korti_milli': '–ö–æ—Ä—Ç–∏ –ú–∏–ª–ª–∏',
        'azizi_molia': '–ê–∑–∏–∑–∏-–ú–æ–ª–∏—è', 
        'bank_arvand': '–ë–∞–Ω–∫ –ê—Ä–≤–∞–Ω–¥',
        'eskhata_bank': '–≠—Å—Ö–∞—Ç–∞ –ë–∞–Ω–∫',
        'bog_bank': 'Bank of Georgia',
        'tbc_bank': 'TBC Bank',
        'optima_bank': '–û–ø—Ç–∏–º–∞ –ë–∞–Ω–∫',
        'demir_bank': '–î–µ–º–∏—Ä –ë–∞–Ω–∫'
    }
    
    bank_name = bank_names.get(bank_code, bank_code)
    
    text = f"""
<b>‚úÖ –í—ã–±—Ä–∞–Ω –±–∞–Ω–∫: {bank_name}</b>

<b>üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b>

–ü—Ä–∏–º–µ—Ä: 1234 5678 9012 3456
(–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –±–µ–∑)
    """
    
    await callback.message.edit_text(text)
    await state.set_state(RequisitesStates.waiting_for_recipient_card)
    await callback.answer()

@router.message(RequisitesStates.waiting_for_recipient_card)
async def process_recipient_card(message: Message, state: FSMContext):
    """Process recipient card number"""
    card_number = message.text.strip()
    
    is_valid, error_msg = validate_card_number(card_number)
    
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # Save formatted card number
    formatted_card = format_card_number(card_number)
    await state.update_data(recipient_card=formatted_card)
    
    text = f"""
<b>‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {formatted_card}</b>

<b>üìã –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>

<b>üÜî –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –†–§ (4 —Ü–∏—Ñ—Ä—ã):</b>

–ü—Ä–∏–º–µ—Ä: 1234
    """
    
    await message.answer(text)
    await state.set_state(RequisitesStates.waiting_for_passport_series)

# –î–æ–±–∞–≤–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
@router.message(RequisitesStates.waiting_for_passport_series)
async def process_passport_series(message: Message, state: FSMContext):
    """Process passport series"""
    series = message.text.strip()
    
    is_valid, error_msg = validate_passport_series(series)
    
    if not is_valid:
        await message.answer(f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(passport_series=series)
    
    text = f"""
<b>‚úÖ –°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: {series}</b>

<b>üéâ –û—Ç–ª–∏—á–Ω–æ! –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>

–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞–ª–µ–µ.
–ü–æ–∫–∞ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ:
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω—ã
‚Ä¢ –í—ã–±–∏—Ä–∞–µ—Ç –±–∞–Ω–∫–∏  
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
‚Ä¢ –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç

<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ‚úÖ</b>
    """
    
    await message.answer(text)
    await state.clear()