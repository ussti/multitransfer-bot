"""
Proxy Manager with Proxy6.net API Integration
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API Proxy6.net
"""

import logging
import asyncio
import aiohttp
import random
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Proxy6.net API"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        self.enabled = False
        self.proxies = []
        self.failed_proxies = set()
        self.last_fetch_time = None
        self.api_key = None
        self.base_url = "https://proxy6.net/api"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
        if config and config.get('proxy', {}).get('api_key'):
            self.enabled = True
            self.api_key = config.get('proxy', {}).get('api_key')
            self.country = config.get('proxy', {}).get('country', 'ru')
            logger.info("üåê ProxyManager initialized with Proxy6.net API")
        else:
            logger.info("üåê ProxyManager initialized in direct mode (no proxy)")
    
    async def get_proxy(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Returns:
            None –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        """
        if not self.enabled:
            logger.debug("üåê Using direct connection (proxy disabled)")
            return None
        
        if not self.api_key:
            logger.warning("‚ö†Ô∏è Proxy API key not configured, using direct connection")
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not self.proxies or self._need_refresh():
            await self._fetch_proxies()
        
        # –ò—â–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
        working_proxies = [p for p in self.proxies if f"{p['ip']}:{p['port']}" not in self.failed_proxies]
        
        if not working_proxies:
            logger.warning("‚ö†Ô∏è No working proxies available, using direct connection")
            return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
        proxy = random.choice(working_proxies)
        logger.info(f"üåê Using proxy: {proxy['ip']}:{proxy['port']} ({proxy['country']})")
        return proxy
    
    async def mark_proxy_failed(self, ip: str, port: str, error: str = None):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
        
        Args:
            ip: IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
            port: –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.enabled:
            return
        
        logger.warning(f"‚ö†Ô∏è Proxy {ip}:{port} marked as failed: {error or 'Unknown error'}")
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏
    
    async def mark_proxy_success(self, ip: str, port: str, response_time: float = 0):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        
        Args:
            ip: IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
            port: –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if not self.enabled:
            return
        
        logger.debug(f"‚úÖ Proxy {ip}:{port} used successfully (response time: {response_time:.2f}s)")
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'enabled': self.enabled,
            'total_proxies': len(self.proxies),
            'working_proxies': 0,
            'mode': 'direct' if not self.enabled else 'proxy',
            'last_update': datetime.utcnow().isoformat()
        }
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏"""
        return self.enabled
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            logger.info("‚úÖ ProxyManager initialized in direct mode")
            return True
        
        try:
            await self._fetch_proxies()
            logger.info("‚úÖ ProxyManager initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå ProxyManager initialization failed: {e}")
            self.enabled = False  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            return True  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self.initialize()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.enabled:
            logger.info("üîí ProxyManager shutdown")
    
    def _need_refresh(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏"""
        if not self.last_fetch_time:
            return True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        return datetime.utcnow() - self.last_fetch_time > timedelta(minutes=5)
    
    async def _fetch_proxies(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API Proxy6.net"""
        try:
            logger.info("üîÑ Fetching proxies from Proxy6.net API...")
            
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
                url = f"{self.base_url}/{self.api_key}/getproxy"
                params = {
                    'state': 'active',
                    'descr': 'yes'
                }
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('status') == 'yes':
                            self.proxies = []
                            
                            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
                            for proxy_id, proxy_info in data.get('list', {}).items():
                                proxy_data = {
                                    'id': proxy_info.get('id'),
                                    'ip': proxy_info.get('host'),
                                    'port': proxy_info.get('port'),
                                    'user': proxy_info.get('user'),
                                    'pass': proxy_info.get('pass'),
                                    'country': proxy_info.get('country'),
                                    'type': proxy_info.get('type', 'http'),
                                    'active': proxy_info.get('active', 0) == 1
                                }
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
                                if proxy_data['active']:
                                    self.proxies.append(proxy_data)
                            
                            self.last_fetch_time = datetime.utcnow()
                            logger.info(f"‚úÖ Fetched {len(self.proxies)} active proxies")
                            
                        else:
                            logger.error(f"‚ùå Proxy API error: {data.get('error_id', 'Unknown error')}")
                            
                    else:
                        logger.error(f"‚ùå HTTP error {response.status} when fetching proxies")
                        
        except Exception as e:
            logger.error(f"‚ùå Error fetching proxies: {e}")
    
    async def _check_proxy_health(self, proxy: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏"""
        try:
            proxy_url = f"http://{proxy['user']}:{proxy['pass']}@{proxy['ip']}:{proxy['port']}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    'http://httpbin.org/ip',
                    proxy=proxy_url,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        return True
                    
        except Exception as e:
            logger.debug(f"Proxy health check failed for {proxy['ip']}:{proxy['port']}: {e}")
            
        return False


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def create_proxy_manager(config: Optional[Dict[str, Any]] = None) -> ProxyManager:
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ProxyManager
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ProxyManager
    """
    manager = ProxyManager(config)
    await manager.initialize()
    return manager