"""
Multi-Provider Proxy Manager with ProxyLine (primary) + Proxy6 (fallback)
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ProxyLine (–æ—Å–Ω–æ–≤–Ω–æ–π) + Proxy6 (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)
"""

import logging
import asyncio
import aiohttp
import random
import os
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum
from .validator import proxy_validator
from .ssh_tunnel import SSHTunnelManager, ProxyCredentials

# Proxy data structures (moved from providers.py)
class ProxyVersion(Enum):
    """Proxy version types"""
    IPV4 = "4"
    IPV4_SHARED = "3" 
    IPV6 = "6"

class ProxyType(Enum):
    """Proxy protocol types"""
    HTTP = "http"
    SOCKS5 = "socks"

@dataclass
class ProxyInfo:
    """Proxy information structure"""
    id: str
    ip: str
    host: str
    port: str
    user: str
    password: str
    type: str
    country: str
    date: str
    date_end: str
    active: bool
    
    @property
    def proxy_url(self) -> str:
        """Get proxy URL in format protocol://user:pass@host:port"""
        protocol = "socks5" if self.type == "socks" else "http"
        return f"{protocol}://{self.user}:{self.password}@{self.host}:{self.port}"

logger = logging.getLogger(__name__)

class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        self.enabled = False
        self.proxies = []
        self.failed_proxies = set()
        self.last_fetch_time = None
        self.multi_provider_manager = None
        
        # SSH —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ Chrome –¥–∏–∞–ª–æ–≥–æ–≤
        self.ssh_tunnel_manager = SSHTunnelManager()
        self.tunnel_enabled = config.get('proxy', {}).get('use_ssh_tunnel', True) if config else True
        
        # –ü—Ä–æ–∫—Å–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        
        proxy_config = config.get('proxy', {}) if config else {}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Proxy6 –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if proxy_config.get('enabled', True):
            logger.info("üåê Initializing Proxy6-only mode")
            self._init_proxy6_only(proxy_config)
        else:
            logger.info("üåê ProxyManager initialized in direct mode (no proxy)")
    
    def _init_proxy6_only(self, proxy_config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π Proxy6 –ª–æ–≥–∏–∫–∏"""
        try:
            self.api_key = proxy_config.get('api_key')
            self.country = proxy_config.get('country', 'ru')
            self.base_url = "https://px6.link/api"
            self.enabled = True
            
            logger.info("‚úÖ Built-in Proxy6 manager initialized")
            logger.info("üèÜ Using Proxy6.net static proxies")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize Proxy6 logic: {e}")
            self.enabled = False
    
    def _init_legacy_mode(self, proxy_config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Ç–æ–ª—å–∫–æ Proxy6)"""
        self.enabled = True
        self.api_key = proxy_config.get('api_key')
        self.country = proxy_config.get('country', 'ru')
        self.base_url = "https://px6.link/api"
        logger.info("üåê Legacy ProxyManager initialized with Proxy6.net API")
    
    async def get_proxy(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        Returns:
            None –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        """
        if not self.enabled:
            logger.debug("üåê Using direct connection (proxy disabled)")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Proxy6 –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å SSH —Ç—É–Ω–Ω–µ–ª–µ–º
        if hasattr(self, 'proxy6_provider'):
            try:
                proxies = await self.proxy6_provider.get_proxies()
                if proxies:
                    proxy_info = proxies[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) –ø—Ä–æ–∫—Å–∏
                    
                    # –°–æ–∑–¥–∞–µ–º SSH —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ Chrome –¥–∏–∞–ª–æ–≥–æ–≤
                    if self.tunnel_enabled:
                        logger.info("üîß Creating SSH tunnel to bypass Chrome auth dialogs...")
                        try:
                            proxy_creds = ProxyCredentials(
                                host=proxy_info.ip,
                                port=int(proxy_info.port),
                                username=proxy_info.user,
                                password=proxy_info.password,
                                proxy_type=proxy_info.type
                            )
                            
                            tunnel_host, tunnel_port = await self.ssh_tunnel_manager.create_tunnel(proxy_creds)
                            
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                            tunnel_dict = {
                                'ip': tunnel_host,
                                'port': str(tunnel_port),
                                'user': '',  # –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
                                'pass': '',  # –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
                                'type': 'http',  # –õ–æ–∫–∞–ª—å–Ω—ã–π HTTP –ø—Ä–æ–∫—Å–∏
                                'country': proxy_info.country,
                                'provider': 'ssh_tunnel',
                                'original_proxy': {
                                    'ip': proxy_info.ip,
                                    'port': proxy_info.port,
                                    'user': proxy_info.user,
                                    'type': proxy_info.type
                                }
                            }
                            
                            logger.info(f"‚úÖ SSH tunnel created: {tunnel_host}:{tunnel_port} -> {proxy_info.ip}:{proxy_info.port}")
                            return tunnel_dict
                            
                        except Exception as tunnel_error:
                            logger.warning(f"‚ö†Ô∏è SSH tunnel failed: {tunnel_error}, falling back to direct proxy")
                            # Fallback –∫ –ø—Ä—è–º–æ–º—É –ø—Ä–æ–∫—Å–∏
                    
                    # Fallback: –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥)
                    proxy_dict = {
                        'ip': proxy_info.ip,
                        'port': proxy_info.port,
                        'user': proxy_info.user,
                        'pass': proxy_info.password,
                        'type': proxy_info.type,
                        'country': proxy_info.country,
                        'provider': 'proxy6'
                    }
                    
                    logger.warning("‚ö†Ô∏è Using direct proxy (may show Chrome auth dialog)")
                    return proxy_dict
                else:
                    logger.warning("‚ö†Ô∏è No Proxy6 proxies available")
                    return None
            except Exception as e:
                logger.error(f"‚ùå Proxy6 provider failed: {e}")
                return None
        
        # Legacy —Ä–µ–∂–∏–º (—Å—Ç–∞—Ä—ã–π –∫–æ–¥ Proxy6)
        return await self._get_legacy_proxy()
    
    async def mark_proxy_failed(self, ip: str, port: str, error: str = None):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
        
        Args:
            ip: IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
            port: –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.enabled:
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Proxy6 –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if hasattr(self, 'proxy6_provider'):
            try:
                proxy_key = f"{ip}:{port}"
                self.proxy6_provider._failed_proxies.add(proxy_key)
                logger.warning(f"‚ö†Ô∏è Proxy6: Proxy {ip}:{port} marked as failed: {error or 'Unknown error'}")
                return
            except Exception as e:
                logger.error(f"‚ùå Failed to mark Proxy6 proxy as failed: {e}")
        
        # Legacy —Ä–µ–∂–∏–º
        proxy_key = f"{ip}:{port}"
        self.failed_proxies.add(proxy_key)
        
        logger.warning(f"‚ö†Ô∏è Legacy: Proxy {proxy_key} marked as failed: {error or 'Unknown error'}")
        logger.info(f"üìä Failed proxies count: {len(self.failed_proxies)}/{len(self.proxies)}")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    async def mark_proxy_success(self, ip: str, port: str, response_time: float = 0):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        
        Args:
            ip: IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏
            port: –ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if not self.enabled:
            return
        
        proxy_key = f"{ip}:{port}"
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª
        self.failed_proxies.discard(proxy_key)
        
        logger.info(f"‚úÖ Proxy {proxy_key} used successfully (response time: {response_time:.2f}s)")
        logger.debug(f"üìä Working proxies: {len(self.proxies) - len(self.failed_proxies)}/{len(self.proxies)}")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    async def test_multitransfer_access(self, proxy_dict: Dict[str, Any]) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ multitransfer.ru —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        
        Args:
            proxy_dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        if not self.enabled or not proxy_dict:
            return True  # –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—á–∏–º
        
        try:
            logger.info(f"üéØ Testing multitransfer.ru access via {proxy_dict['ip']}:{proxy_dict['port']}")
            is_valid, response_time, error = await proxy_validator.validate_multitransfer_access(proxy_dict)
            
            if is_valid:
                logger.info(f"‚úÖ Multitransfer access confirmed: {proxy_dict['ip']}:{proxy_dict['port']} ({response_time:.2f}s)")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Multitransfer access failed: {proxy_dict['ip']}:{proxy_dict['port']} - {error}")
                await self.mark_proxy_failed(proxy_dict['ip'], proxy_dict['port'], f"Multitransfer access failed: {error}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error testing multitransfer access: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        working_count = len(self.proxies) - len(self.failed_proxies) if self.proxies else 0
        return {
            'enabled': self.enabled,
            'total_proxies': len(self.proxies),
            'working_proxies': working_count,
            'failed_proxies': len(self.failed_proxies),
            'success_rate': f"{(working_count/len(self.proxies)*100):.1f}%" if self.proxies else "0%",
            'mode': 'direct' if not self.enabled else 'proxy',
            'api_key_configured': bool(getattr(self, 'api_key', None)),
            'last_update': self.last_fetch_time.isoformat() if self.last_fetch_time else None
        }
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–∫—Å–∏"""
        return self.enabled
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            logger.info("‚úÖ ProxyManager initialized in direct mode")
            return True
        
        try:
            await self._fetch_proxies()
            logger.info("‚úÖ ProxyManager initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå ProxyManager initialization failed: {e}")
            self.enabled = False  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            return True  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    
    async def __aenter__(self):
        """Async context manager entry"""
        await self.initialize()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.enabled:
            logger.info("üîí ProxyManager shutdown")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH —Ç—É–Ω–Ω–µ–ª–∏
        if hasattr(self, 'ssh_tunnel_manager'):
            await self.ssh_tunnel_manager.stop_tunnel()
    
    def _need_refresh(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏"""
        if not self.last_fetch_time:
            return True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        return datetime.utcnow() - self.last_fetch_time > timedelta(minutes=5)
    
    async def _fetch_proxies(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API Proxy6.net"""
        try:
            logger.info("üîÑ Fetching proxies from Proxy6.net API...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ legacy —Ä–µ–∂–∏–º–µ
            if not hasattr(self, 'base_url') or not hasattr(self, 'api_key'):
                logger.warning("‚ö†Ô∏è Not in legacy mode, skipping API fetch")
                return
            
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
                url = f"{self.base_url}/{self.api_key}/getproxy"
                params = {
                    'state': 'active'
                }
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('status') == 'yes':
                            self.proxies = []
                            
                            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                            proxy_list = data.get('list', {})
                            
                            # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {"11": {...}, "22": {...}}
                            if isinstance(proxy_list, dict):
                                for proxy_id, proxy_info in proxy_list.items():
                                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    proxy_user = (proxy_info.get('user') or 
                                                 proxy_info.get('username') or 
                                                 proxy_info.get('login', ''))
                                    proxy_pass = (proxy_info.get('pass') or 
                                                 proxy_info.get('password') or 
                                                 proxy_info.get('pwd', ''))
                                    
                                    proxy_data = {
                                        'id': proxy_info.get('id', proxy_id),
                                        'ip': proxy_info.get('ip', proxy_info.get('host', '')),
                                        'port': str(proxy_info.get('port', '')),
                                        'user': proxy_user,
                                        'pass': proxy_pass,
                                        'country': proxy_info.get('country', 'ru'),
                                        'type': proxy_info.get('type', 'http'),
                                        'date_end': proxy_info.get('date_end', ''),
                                        'active': proxy_info.get('active', '0') == '1'  # –°—Ç—Ä–æ–∫–∞!
                                    }
                                    
                                    # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                                    logger.debug(f"üîç Proxy {proxy_data['ip']} credentials: user='{proxy_user}', pass='{proxy_pass[:3]}***'")
                                    
                                    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                                    if not proxy_user or not proxy_pass:
                                        logger.warning(f"‚ö†Ô∏è Proxy {proxy_data['ip']} missing credentials - user: '{proxy_user}', pass: '{proxy_pass[:3] if proxy_pass else 'empty'}***'")
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                    if proxy_data['active'] and proxy_data['ip'] and proxy_data['port']:
                                        self.proxies.append(proxy_data)
                            
                            # Fallback –¥–ª—è —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ API –∏–∑–º–µ–Ω–∏—Ç—Å—è)
                            elif isinstance(proxy_list, list):
                                for proxy_info in proxy_list:
                                    proxy_data = {
                                        'id': proxy_info.get('id', ''),
                                        'ip': proxy_info.get('ip', proxy_info.get('host', '')),
                                        'port': str(proxy_info.get('port', '')),
                                        'user': proxy_info.get('user', ''),
                                        'pass': proxy_info.get('pass', ''),
                                        'country': proxy_info.get('country', 'ru'),
                                        'type': proxy_info.get('type', 'http'),
                                        'date_end': proxy_info.get('date_end', ''),
                                        'active': proxy_info.get('active', 0) == 1
                                    }
                                    
                                    if proxy_data['active'] and proxy_data['ip'] and proxy_data['port']:
                                        self.proxies.append(proxy_data)
                            
                            self.last_fetch_time = datetime.utcnow()
                            logger.info(f"‚úÖ Fetched {len(self.proxies)} active proxies")
                            
                        else:
                            logger.error(f"‚ùå Proxy API error: {data.get('error_id', 'Unknown error')}")
                            
                    else:
                        logger.error(f"‚ùå HTTP error {response.status} when fetching proxies")
                        
        except Exception as e:
            logger.error(f"‚ùå Error fetching proxies: {e}")
    
    async def _check_proxy_health(self, proxy: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏"""
        try:
            proxy_url = f"http://{proxy['user']}:{proxy['pass']}@{proxy['ip']}:{proxy['port']}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    'http://httpbin.org/ip',
                    proxy=proxy_url,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        return True
                    
        except Exception as e:
            logger.debug(f"Proxy health check failed for {proxy['ip']}:{proxy['port']}: {e}")
            
        return False
    
    async def _get_legacy_proxy(self) -> Optional[Dict[str, Any]]:
        """Legacy –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ (—Å—Ç–∞—Ä—ã–π Proxy6 –∫–æ–¥)"""
        if not self.api_key:
            logger.warning("‚ö†Ô∏è Proxy API key not configured, using direct connection")
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not self.proxies or self._need_refresh():
            await self._fetch_proxies()
        
        # –ò—â–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
        working_proxies = [p for p in self.proxies if f"{p['ip']}:{p['port']}" not in self.failed_proxies]
        
        if not working_proxies:
            logger.warning("‚ö†Ô∏è No working proxies available, using direct connection")
            return None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏
        proxy = random.choice(working_proxies)
        logger.info(f"üåê Using legacy proxy: {proxy['ip']}:{proxy['port']} ({proxy['country']})")
        return proxy



# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def create_proxy_manager(config: Optional[Dict[str, Any]] = None) -> ProxyManager:
    """
    –°–æ–∑–¥–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ProxyManager
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ProxyManager
    """
    manager = ProxyManager(config)
    await manager.initialize()
    return manager