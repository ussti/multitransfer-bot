"""
Smart Proxy Rotation Manager for MultiTransfer.ru
–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–∞–ø—á–∏ —Å 80% –¥–æ 10-15%
"""

import logging
import asyncio
import aiohttp
import random
import time
import json
import os
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass, asdict
from collections import defaultdict
import sqlite3
import threading

logger = logging.getLogger(__name__)

class ProxyQuality(Enum):
    """–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    PREMIUM = "premium"      # 0-10% –∫–∞–ø—á–∏
    GOOD = "good"           # 10-25% –∫–∞–ø—á–∏  
    AVERAGE = "average"     # 25-50% –∫–∞–ø—á–∏
    POOR = "poor"          # 50-75% –∫–∞–ø—á–∏
    BANNED = "banned"      # >75% –∫–∞–ø—á–∏

class CaptchaType(Enum):
    """–¢–∏–ø—ã –∫–∞–ø—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    NONE = "none"
    SIMPLE = "simple"       # –ü—Ä–æ—Å—Ç–∞—è –∫–∞–ø—á–∞
    PUZZLE = "puzzle"       # –ü–∞–∑–ª –∫–∞–ø—á–∞
    COMPLEX = "complex"     # –°–ª–æ–∂–Ω–∞—è –∫–∞–ø—á–∞
    RECAPTCHA = "recaptcha" # Google reCAPTCHA

@dataclass
class ProxyStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    ip: str
    port: str
    user: str
    password: str
    country: str
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    total_uses: int = 0
    successful_uses: int = 0
    captcha_encounters: int = 0
    simple_captchas: int = 0
    complex_captchas: int = 0
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    avg_response_time: float = 0.0
    last_used: Optional[datetime] = None
    last_success: Optional[datetime] = None
    last_captcha: Optional[datetime] = None
    
    # –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    success_rate: float = 0.0
    captcha_rate: float = 0.0
    quality_score: float = 50.0  # –ë–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä –¥–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–∫—Å–∏
    quality_level: ProxyQuality = ProxyQuality.AVERAGE
    
    # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    cost_per_use: float = 0.0
    roi_score: float = 0.0  # Return on Investment
    
    def update_stats(self, success: bool, captcha_type: CaptchaType, response_time: float):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.total_uses += 1
        self.last_used = datetime.utcnow()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        if self.avg_response_time == 0:
            self.avg_response_time = response_time
        else:
            self.avg_response_time = (self.avg_response_time * 0.8) + (response_time * 0.2)
        
        if success:
            self.successful_uses += 1
            self.last_success = datetime.utcnow()
        
        if captcha_type != CaptchaType.NONE:
            self.captcha_encounters += 1
            self.last_captcha = datetime.utcnow()
            
            if captcha_type in [CaptchaType.SIMPLE]:
                self.simple_captchas += 1
            elif captcha_type in [CaptchaType.PUZZLE, CaptchaType.COMPLEX, CaptchaType.RECAPTCHA]:
                self.complex_captchas += 1
        
        self.recalculate_metrics()
    
    def recalculate_metrics(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        if self.total_uses > 0:
            self.success_rate = self.successful_uses / self.total_uses
            self.captcha_rate = self.captcha_encounters / self.total_uses
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä (0-100)
            # –§–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤—ã–π —É—Å–ø–µ—Ö - —à—Ç—Ä–∞—Ñ –∑–∞ –∫–∞–ø—á–∏ - —à—Ç—Ä–∞—Ñ –∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ—Å—Ç—å
            base_score = self.success_rate * 100
            captcha_penalty = self.captcha_rate * 50
            speed_penalty = max(0, (self.avg_response_time - 2.0) * 10)
            
            self.quality_score = max(0, base_score - captcha_penalty - speed_penalty)
        else:
            # –ù–æ–≤—ã–µ –ø—Ä–æ–∫—Å–∏: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            self.success_rate = 0.0
            self.captcha_rate = 0.0
            self.quality_score = 50.0  # –°—Ä–µ–¥–Ω–∏–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Å–∫–æ—Ä
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏)
        if self.captcha_rate <= 0.10:
            self.quality_level = ProxyQuality.PREMIUM
        elif self.captcha_rate <= 0.25:
            self.quality_level = ProxyQuality.GOOD
        elif self.captcha_rate <= 0.50:
            self.quality_level = ProxyQuality.AVERAGE
        elif self.captcha_rate <= 0.75:
            self.quality_level = ProxyQuality.POOR
        else:
            self.quality_level = ProxyQuality.BANNED
        
        # ROI Score (—É—á–∏—Ç—ã–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
        if self.cost_per_use > 0:
            self.roi_score = (self.success_rate * 100) / self.cost_per_use
        else:
            self.roi_score = self.success_rate * 100

class SmartProxyRotationManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        self.db_path = "data/proxy_analytics.db"
        self.proxy_stats: Dict[str, ProxyStats] = {}
        self.active_proxies: List[ProxyStats] = []
        self.rotation_history: List[Tuple[str, datetime, bool, CaptchaType]] = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        self.max_captcha_rate = 0.15  # –¶–µ–ª–µ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–ø—á–∏
        self.cooldown_minutes = 30    # –í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ –∫–∞–ø—á–∏
        self.learning_window = 100    # –û–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–æ—Ç–∞—Ü–∏–∏
        self.rotation_strategies = {
            'adaptive': self._adaptive_selection,
            'quality_weighted': self._quality_weighted_selection,
            'anti_pattern': self._anti_pattern_selection,
            'cost_optimized': self._cost_optimized_selection
        }
        
        self.current_strategy = 'adaptive'
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self._init_database()
        self._load_historical_data()
        
        logger.info("üß† SmartProxyRotationManager initialized")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS proxy_sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    proxy_key TEXT NOT NULL,
                    timestamp DATETIME NOT NULL,
                    success BOOLEAN NOT NULL,
                    captcha_type TEXT NOT NULL,
                    response_time REAL NOT NULL,
                    session_duration REAL,
                    user_agent TEXT,
                    target_country TEXT
                )
            """)
            
            conn.execute("""
                CREATE TABLE IF NOT EXISTS proxy_quality_snapshots (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    proxy_key TEXT NOT NULL,
                    timestamp DATETIME NOT NULL,
                    quality_score REAL NOT NULL,
                    captcha_rate REAL NOT NULL,
                    success_rate REAL NOT NULL,
                    total_uses INTEGER NOT NULL
                )
            """)
            
            conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_proxy_sessions_key_time 
                ON proxy_sessions(proxy_key, timestamp)
            """)
    
    def _load_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∫—Å–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute("""
                    SELECT proxy_key, COUNT(*) as total, 
                           SUM(CASE WHEN success THEN 1 ELSE 0 END) as successful,
                           SUM(CASE WHEN captcha_type != 'none' THEN 1 ELSE 0 END) as captchas,
                           AVG(response_time) as avg_time,
                           MAX(timestamp) as last_used
                    FROM proxy_sessions 
                    WHERE timestamp > datetime('now', '-30 days')
                    GROUP BY proxy_key
                """)
                
                for row in cursor.fetchall():
                    proxy_key, total, successful, captchas, avg_time, last_used = row
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
                    logger.debug(f"Loaded historical data for {proxy_key}: {total} uses, {successful} successful")
                    
        except Exception as e:
            logger.error(f"Error loading historical data: {e}")
    
    async def get_optimal_proxy(self, context: Dict[str, Any] = None) -> Optional[ProxyStats]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å—Ç—Ä–∞–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Å—É–º–º–∞, –≤—Ä–µ–º—è –¥–Ω—è –∏ —Ç.–¥.)
            
        Returns:
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None
        """
        if not self.active_proxies:
            logger.warning("No active proxies available")
            return None
        
        context = context or {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        current_captcha_rate = self._calculate_recent_captcha_rate()
        
        if current_captcha_rate > self.max_captcha_rate:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            strategy = 'anti_pattern'
            logger.info(f"üî• High captcha rate ({current_captcha_rate:.1%}), using anti-pattern strategy")
        else:
            strategy = self.current_strategy
        
        # –í—ã–±–∏—Ä–∞em –ø—Ä–æ–∫—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        proxy = await self.rotation_strategies[strategy](context)
        
        if proxy:
            logger.info(f"üéØ Selected proxy {proxy.ip}:{proxy.port} "
                       f"(quality: {proxy.quality_level.value}, "
                       f"captcha rate: {proxy.captcha_rate:.1%})")
        
        return proxy
    
    async def _adaptive_selection(self, context: Dict[str, Any]) -> Optional[ProxyStats]:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        available_proxies = self._get_available_proxies()
        
        if not available_proxies:
            return None
        
        # –í–µ—Å–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        weighted_proxies = []
        
        for proxy in available_proxies:
            # –ë–∞–∑–æ–≤—ã–π –≤–µ—Å = –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–æ—Ä
            weight = proxy.quality_score
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ
            if proxy.quality_level == ProxyQuality.PREMIUM:
                weight *= 2.0
            elif proxy.quality_level == ProxyQuality.GOOD:
                weight *= 1.5
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–¥–∞–≤–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–∏–∑–±–µ–≥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
            if proxy.last_used:
                minutes_since_use = (datetime.utcnow() - proxy.last_used).total_seconds() / 60
                if minutes_since_use < 10:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                    weight *= 0.3
                elif minutes_since_use < 30:
                    weight *= 0.7
            
            # –ë–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—Ö –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if context.get('target_country') and proxy.country == context.get('target_country'):
                weight *= 1.3
            
            # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–∞–ø—á–∏
            if proxy.last_captcha:
                minutes_since_captcha = (datetime.utcnow() - proxy.last_captcha).total_seconds() / 60
                if minutes_since_captcha < self.cooldown_minutes:
                    weight *= 0.1  # –°–∏–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ
            
            weighted_proxies.append((proxy, max(0.1, weight)))
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
        total_weight = sum(weight for _, weight in weighted_proxies)
        if total_weight == 0:
            return random.choice(available_proxies)
        
        random_value = random.uniform(0, total_weight)
        current_weight = 0
        
        for proxy, weight in weighted_proxies:
            current_weight += weight
            if current_weight >= random_value:
                return proxy
        
        return weighted_proxies[-1][0]  # Fallback
    
    async def _quality_weighted_selection(self, context: Dict[str, Any]) -> Optional[ProxyStats]:
        """–í—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–æ—Ä–∞"""
        available_proxies = self._get_available_proxies()
        
        if not available_proxies:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–∫–æ—Ä—É
        available_proxies.sort(key=lambda p: p.quality_score, reverse=True)
        
        # –í—ã–±–∏—Ä–∞em –∏–∑ —Ç–æ–ø-30% —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        top_count = max(1, len(available_proxies) // 3)
        top_proxies = available_proxies[:top_count]
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Ç–æ–ø –ø—Ä–æ–∫—Å–∏
        weights = [p.quality_score + 1 for p in top_proxies]  # +1 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω—É–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤
        return random.choices(top_proxies, weights=weights)[0]
    
    async def _anti_pattern_selection(self, context: Dict[str, Any]) -> Optional[ProxyStats]:
        """–ê–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        available_proxies = self._get_available_proxies()
        
        if not available_proxies:
            return None
        
        # –ò–∑–±–µ–≥–∞–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        unused_proxies = [
            p for p in available_proxies 
            if not p.last_used or 
            (datetime.utcnow() - p.last_used).total_seconds() > 1800  # 30 –º–∏–Ω—É—Ç
        ]
        
        if unused_proxies:
            # –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤—É
            premium_unused = [p for p in unused_proxies if p.quality_level == ProxyQuality.PREMIUM]
            if premium_unused:
                return random.choice(premium_unused)
            
            good_unused = [p for p in unused_proxies if p.quality_level == ProxyQuality.GOOD]
            if good_unused:
                return random.choice(good_unused)
            
            return random.choice(unused_proxies)
        
        # –ï—Å–ª–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ, –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
        available_proxies.sort(key=lambda p: (p.captcha_rate, p.last_used or datetime.min))
        return available_proxies[0]
    
    async def _cost_optimized_selection(self, context: Dict[str, Any]) -> Optional[ProxyStats]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (ROI)"""
        available_proxies = self._get_available_proxies()
        
        if not available_proxies:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ROI —Å–∫–æ—Ä—É
        available_proxies.sort(key=lambda p: p.roi_score, reverse=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        good_roi_proxies = [
            p for p in available_proxies 
            if p.captcha_rate <= 0.25  # –ú–∞–∫—Å–∏–º—É–º 25% –∫–∞–ø—á–∏
        ]
        
        if good_roi_proxies:
            return good_roi_proxies[0]  # –õ—É—á—à–∏–π ROI
        
        return available_proxies[0]  # Fallback –Ω–∞ –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
    
    def _get_available_proxies(self) -> List[ProxyStats]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ —Å fallback –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        available = [
            p for p in self.active_proxies 
            if p.quality_level != ProxyQuality.BANNED
        ]
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∏–∑ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        if not available and self.active_proxies:
            logger.warning("üö® All proxies are banned, using fallback to best available")
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–∫–æ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π
            banned_proxies = [p for p in self.active_proxies if p.quality_level == ProxyQuality.BANNED]
            if banned_proxies:
                best_banned = max(banned_proxies, key=lambda p: p.quality_score)
                logger.info(f"üîÑ Fallback: using banned proxy {best_banned.ip}:{best_banned.port} "
                           f"(score: {best_banned.quality_score:.1f}, captcha: {best_banned.captcha_rate:.1%})")
                return [best_banned]
        
        return available
    
    def _calculate_recent_captcha_rate(self, hours: int = 2) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –∫–∞–ø—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        cutoff_time = datetime.utcnow() - timedelta(hours=hours)
        
        recent_sessions = [
            (success, captcha_type) for _, timestamp, success, captcha_type 
            in self.rotation_history 
            if timestamp >= cutoff_time
        ]
        
        if not recent_sessions:
            return 0.0
        
        captcha_count = sum(1 for _, captcha_type in recent_sessions if captcha_type != CaptchaType.NONE)
        return captcha_count / len(recent_sessions)
    
    async def record_session_result(self, proxy: ProxyStats, success: bool, 
                                  captcha_type: CaptchaType = CaptchaType.NONE,
                                  response_time: float = 0.0, 
                                  session_data: Dict[str, Any] = None):
        """
        –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        
        Args:
            proxy: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            captcha_type: –¢–∏–ø –∫–∞–ø—á–∏ (–µ—Å–ª–∏ –±—ã–ª–∞)
            response_time: –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            session_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        """
        session_data = session_data or {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
        proxy.update_stats(success, captcha_type, response_time)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.rotation_history.append((
            f"{proxy.ip}:{proxy.port}", 
            datetime.utcnow(), 
            success, 
            captcha_type
        ))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.rotation_history) > 1000:
            self.rotation_history = self.rotation_history[-500:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self._save_session_to_db(proxy, success, captcha_type, response_time, session_data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        captcha_info = f" (captcha: {captcha_type.value})" if captcha_type != CaptchaType.NONE else ""
        status = "‚úÖ" if success else "‚ùå"
        
        logger.info(f"{status} Session result for {proxy.ip}:{proxy.port}: "
                   f"success={success}, time={response_time:.2f}s{captcha_info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        await self._adapt_strategy()
    
    async def _save_session_to_db(self, proxy: ProxyStats, success: bool, 
                                captcha_type: CaptchaType, response_time: float,
                                session_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                    INSERT INTO proxy_sessions 
                    (proxy_key, timestamp, success, captcha_type, response_time, 
                     session_duration, user_agent, target_country)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    f"{proxy.ip}:{proxy.port}",
                    datetime.utcnow(),
                    success,
                    captcha_type.value,
                    response_time,
                    session_data.get('session_duration'),
                    session_data.get('user_agent'),
                    session_data.get('target_country')
                ))
                
        except Exception as e:
            logger.error(f"Error saving session to DB: {e}")
    
    async def _adapt_strategy(self):
        """–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        recent_rate = self._calculate_recent_captcha_rate()
        
        # –ï—Å–ª–∏ –∫–∞–ø—á–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω
        if recent_rate > 0.25 and self.current_strategy != 'anti_pattern':
            self.current_strategy = 'anti_pattern'
            logger.warning(f"üîÑ Switching to anti-pattern strategy due to high captcha rate: {recent_rate:.1%}")
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π
        elif recent_rate < 0.10 and self.current_strategy == 'anti_pattern':
            self.current_strategy = 'adaptive'
            logger.info(f"üîÑ Switching back to adaptive strategy, captcha rate improved: {recent_rate:.1%}")
    
    async def load_proxies_from_provider(self, provider_proxies: List[Dict[str, Any]]):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.active_proxies.clear()
        
        for proxy_data in provider_proxies:
            proxy_key = f"{proxy_data['ip']}:{proxy_data['port']}"
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∫—Å–∏
            if proxy_key in self.proxy_stats:
                proxy_stats = self.proxy_stats[proxy_key]
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                proxy_stats.user = proxy_data.get('user', '')
                proxy_stats.password = proxy_data.get('pass', '')
            else:
                proxy_stats = ProxyStats(
                    ip=proxy_data['ip'],
                    port=proxy_data['port'],
                    user=proxy_data.get('user', ''),
                    password=proxy_data.get('pass', ''),
                    country=proxy_data.get('country', 'ru'),
                    cost_per_use=0.01  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                )
                self.proxy_stats[proxy_key] = proxy_stats
            
            self.active_proxies.append(proxy_stats)
        
        logger.info(f"üìä Loaded {len(self.active_proxies)} proxies for smart rotation")
    
    def get_analytics_report(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        if not self.active_proxies:
            return {"error": "No proxies loaded"}
        
        total_proxies = len(self.active_proxies)
        working_proxies = len([p for p in self.active_proxies if p.quality_level != ProxyQuality.BANNED])
        
        quality_distribution = defaultdict(int)
        for proxy in self.active_proxies:
            quality_distribution[proxy.quality_level.value] += 1
        
        avg_captcha_rate = sum(p.captcha_rate for p in self.active_proxies) / total_proxies
        avg_success_rate = sum(p.success_rate for p in self.active_proxies) / total_proxies
        
        recent_captcha_rate = self._calculate_recent_captcha_rate()
        
        return {
            "overview": {
                "total_proxies": total_proxies,
                "working_proxies": working_proxies,
                "current_strategy": self.current_strategy,
                "target_captcha_rate": f"{self.max_captcha_rate:.1%}",
                "actual_recent_captcha_rate": f"{recent_captcha_rate:.1%}",
                "status": "üéØ Target achieved" if recent_captcha_rate <= self.max_captcha_rate else "‚ö†Ô∏è Above target"
            },
            "performance": {
                "avg_captcha_rate": f"{avg_captcha_rate:.1%}",
                "avg_success_rate": f"{avg_success_rate:.1%}",
                "total_sessions": sum(p.total_uses for p in self.active_proxies),
                "successful_sessions": sum(p.successful_uses for p in self.active_proxies)
            },
            "quality_distribution": dict(quality_distribution),
            "top_performers": [
                {
                    "proxy": f"{p.ip}:{p.port}",
                    "quality": p.quality_level.value,
                    "captcha_rate": f"{p.captcha_rate:.1%}",
                    "success_rate": f"{p.success_rate:.1%}",
                    "uses": p.total_uses
                }
                for p in sorted(self.active_proxies, key=lambda x: x.quality_score, reverse=True)[:5]
            ]
        }
    
    async def cleanup_old_data(self, days: int = 30):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                    DELETE FROM proxy_sessions 
                    WHERE timestamp < datetime('now', '-{} days')
                """.format(days))
                
                conn.execute("""
                    DELETE FROM proxy_quality_snapshots 
                    WHERE timestamp < datetime('now', '-{} days')
                """.format(days))
                
            logger.info(f"üßπ Cleaned up data older than {days} days")
            
        except Exception as e:
            logger.error(f"Error cleaning up old data: {e}")


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ProxyManager
class EnhancedProxyManager:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏ —Å —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        from .manager import ProxyManager
        
        self.base_manager = ProxyManager(config)
        self.smart_rotation = SmartProxyRotationManager(config)
        self.config = config or {}
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–æ–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
        await self.base_manager.initialize()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –≤ —É–º–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é
        if self.base_manager.proxies:
            await self.smart_rotation.load_proxies_from_provider(self.base_manager.proxies)
    
    async def get_optimal_proxy(self, context: Dict[str, Any] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ —É–º–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é"""
        proxy_stats = await self.smart_rotation.get_optimal_proxy(context)
        
        if proxy_stats:
            return {
                'ip': proxy_stats.ip,
                'port': proxy_stats.port,
                'user': proxy_stats.user,
                'pass': proxy_stats.password,
                'country': proxy_stats.country,
                'type': 'http',
                '_stats': proxy_stats  # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            }
        
        return None
    
    async def record_result(self, proxy: Dict[str, Any], success: bool, 
                          captcha_encountered: bool = False, 
                          captcha_type: str = "none",
                          response_time: float = 0.0):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        if '_stats' in proxy:
            proxy_stats = proxy['_stats']
            captcha_enum = CaptchaType(captcha_type)
            
            await self.smart_rotation.record_session_result(
                proxy_stats, success, captcha_enum, response_time
            )
    
    def get_analytics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç"""
        return self.smart_rotation.get_analytics_report()