"""
Integration Helper for Smart Proxy Rotation
–ü–æ–º–æ—â–Ω–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
"""

import logging
from typing import Optional, Dict, Any
from .smart_rotation_manager import EnhancedProxyManager, CaptchaType

logger = logging.getLogger(__name__)

class ProxyIntegrationHelper:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"""
    
    @staticmethod
    def detect_captcha_type(page_source: str, current_url: str) -> CaptchaType:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–∞–ø—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        Args:
            page_source: HTML –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_url: –¢–µ–∫—É—â–∏–π URL
            
        Returns:
            –¢–∏–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –∫–∞–ø—á–∏
        """
        page_lower = page_source.lower()
        url_lower = current_url.lower()
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞–ø—á–∏
        if 'recaptcha' in page_lower or 'g-recaptcha' in page_lower:
            return CaptchaType.RECAPTCHA
        
        if 'puzzle' in page_lower or 'jigsaw' in page_lower:
            return CaptchaType.PUZZLE
        
        if any(keyword in page_lower for keyword in [
            'captcha', 'verification', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
        ]):
            if any(complex_keyword in page_lower for complex_keyword in [
                'slider', 'drag', 'rotate', 'select all', '–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ'
            ]):
                return CaptchaType.COMPLEX
            else:
                return CaptchaType.SIMPLE
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL
        if 'captcha' in url_lower or 'verification' in url_lower:
            return CaptchaType.SIMPLE
        
        return CaptchaType.NONE
    
    @staticmethod
    def create_session_context(user_data: Dict[str, Any], 
                             payment_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏
        
        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏
        """
        context = {
            'user_id': user_data.get('id'),
            'target_country': payment_data.get('recipient_country', 'tj'),  # –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            'amount': payment_data.get('amount', 0),
            'currency': payment_data.get('currency', 'TJS'),
            'session_time': payment_data.get('created_at'),
            'user_success_history': user_data.get('successful_payments', 0),
            'is_high_amount': payment_data.get('amount', 0) > 50000,  # –í—ã—Å–æ–∫–∞—è —Å—É–º–º–∞
            'time_of_day': 'day' if 6 <= payment_data.get('hour', 12) <= 18 else 'night'
        }
        
        return context
    
    @staticmethod
    def should_retry_with_new_proxy(error_message: str, attempt_count: int) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            attempt_count: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏
        """
        if attempt_count >= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
            return False
        
        # –û—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏
        proxy_related_errors = [
            'timeout', 'connection', 'proxy', 'network',
            'access denied', 'forbidden', 'blocked',
            '—Ç–∞–π–º–∞—É—Ç', '—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        ]
        
        error_lower = error_message.lower()
        return any(error_keyword in error_lower for error_keyword in proxy_related_errors)
    
    @staticmethod
    def extract_performance_metrics(automation_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        
        Args:
            automation_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        return {
            'session_duration': automation_result.get('total_time', 0),
            'steps_completed': automation_result.get('steps_completed', 0),
            'captcha_solved_time': automation_result.get('captcha_time', 0),
            'page_load_time': automation_result.get('page_load_time', 0),
            'form_filling_time': automation_result.get('form_time', 0),
            'user_agent': automation_result.get('user_agent', ''),
            'browser_version': automation_result.get('browser_version', '')
        }


def create_enhanced_proxy_manager(config: Dict[str, Any]) -> EnhancedProxyManager:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π EnhancedProxyManager
    """
    logger.info("üöÄ Creating enhanced proxy manager with smart rotation")
    return EnhancedProxyManager(config)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ

class ProxyAwareMultiTransferAutomation:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è MultiTransferAutomation —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
    """
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.proxy_manager = create_enhanced_proxy_manager(config)
        self.helper = ProxyIntegrationHelper()
        
    async def create_transfer_with_smart_proxy(self, transfer_data: Dict[str, Any], 
                                             user_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏
        
        Args:
            transfer_data: –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        """
        from web.browser.multitransfer import MultiTransferAutomation
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏
        await self.proxy_manager.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∫—Å–∏
        context = self.helper.create_session_context(user_data, transfer_data)
        
        max_attempts = 3
        attempt = 0
        
        while attempt < max_attempts:
            attempt += 1
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
                proxy = await self.proxy_manager.get_optimal_proxy(context)
                
                logger.info(f"üéØ Attempt {attempt}/{max_attempts} with proxy: "
                           f"{proxy['ip'] if proxy else 'direct connection'}")
                
                # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–∫—Å–∏
                automation = MultiTransferAutomation(proxy=proxy, config=self.config)
                
                # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                start_time = time.time()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
                result = await automation.create_transfer(
                    amount=transfer_data['amount'],
                    recipient_card=transfer_data['recipient_card'],
                    passport_data=transfer_data['passport_data'],
                    recipient_data=transfer_data['recipient_data'],
                    country=transfer_data.get('country', 'tajikistan')
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–ø—á–∏
                captcha_type = CaptchaType.NONE
                if result.get('captcha_encountered'):
                    if result.get('captcha_type'):
                        captcha_type = CaptchaType(result['captcha_type'])
                    else:
                        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                        captcha_type = CaptchaType.PUZZLE if result.get('captcha_complex') else CaptchaType.SIMPLE
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–º–Ω—É—é —Ä–æ—Ç–∞—Ü–∏—é
                if proxy:
                    await self.proxy_manager.record_result(
                        proxy=proxy,
                        success=result.get('success', False),
                        captcha_encountered=result.get('captcha_encountered', False),
                        captcha_type=captcha_type.value,
                        response_time=time.time() - start_time
                    )
                
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.get('success'):
                    logger.info(f"‚úÖ Transfer created successfully on attempt {attempt}")
                    return result
                
                # –ï—Å–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                error_msg = result.get('error', 'Unknown error')
                if not self.helper.should_retry_with_new_proxy(error_msg, attempt):
                    logger.warning(f"‚ùå Not retrying - error not proxy-related: {error_msg}")
                    return result
                
                logger.warning(f"‚ö†Ô∏è Attempt {attempt} failed, trying with different proxy: {error_msg}")
                
            except Exception as e:
                logger.error(f"‚ùå Attempt {attempt} failed with exception: {e}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á—É, –µ—Å–ª–∏ –±—ã–ª –ø—Ä–æ–∫—Å–∏
                if 'proxy' in locals() and proxy:
                    await self.proxy_manager.record_result(
                        proxy=proxy,
                        success=False,
                        captcha_encountered=False,
                        captcha_type=CaptchaType.NONE.value,
                        response_time=time.time() - start_time if 'start_time' in locals() else 0
                    )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                if attempt >= max_attempts:
                    raise
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        return {
            'success': False,
            'error': f'All {max_attempts} attempts failed',
            'attempts_made': max_attempts
        }
    
    def get_proxy_analytics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø—Ä–æ–∫—Å–∏"""
        return self.proxy_manager.get_analytics()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

def patch_existing_payment_service():
    """
    –ü–∞—Ç—á –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PaymentService –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
    """
    logger.info("üîß Applying smart proxy rotation patch to PaymentService")
    
    # –≠—Ç–æ—Ç –∫–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    # –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∏
    
    import types
    from core.services.payment_service import PaymentService
    
    async def enhanced_create_payment(self, user_id: int, amount: float, 
                                    recipient_card: str, country: str = "tajikistan") -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —Å —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        
        # –°–æ–∑–¥–∞–µ–º —É–º–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π
        smart_automation = ProxyAwareMultiTransferAutomation(self.config.to_dict())
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await self.user_repo.get_user(user_id)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        transfer_data = {
            'amount': amount,
            'recipient_card': recipient_card,
            'country': country,
            'created_at': datetime.utcnow(),
            'hour': datetime.utcnow().hour
        }
        
        user_data = {
            'id': user_id,
            'successful_payments': user.successful_payments if user else 0
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å —É–º–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π
        result = await smart_automation.create_transfer_with_smart_proxy(transfer_data, user_data)
        
        return result
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å
    PaymentService.create_payment_with_smart_proxy = enhanced_create_payment
    
    logger.info("‚úÖ Smart proxy rotation patch applied successfully")


import time