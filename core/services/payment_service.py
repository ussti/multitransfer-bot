"""
Payment processing service
–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

import logging
import asyncio
from typing import Optional, Dict, Any
from datetime import datetime

from core.database.repositories import UserRepository, PaymentHistoryRepository, PassportDataRepository
from core.database.models import PaymentHistory
from web.browser.multitransfer import MultiTransferAutomation
from core.proxy.manager import ProxyManager
from core.config import get_config
from utils.exceptions import PaymentError, AutomationError
from utils.validators import validate_amount, validate_card_number

logger = logging.getLogger(__name__)

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def __init__(self, session):
        self.session = session
        self.user_repo = UserRepository(session)
        self.payment_repo = PaymentHistoryRepository(session)
        self.passport_repo = PassportDataRepository(session)
        self.config = get_config()
        self.proxy_manager = ProxyManager(config=self.config.to_dict())
        
    async def create_payment(
        self, 
        user_id: int, 
        amount: float,
        currency_from: str = "RUB",
        currency_to: str = "TJS"
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            currency_from: –í–∞–ª—é—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
            currency_to: –í–∞–ª—é—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é TJS)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        logger.info(f"üîÑ Creating payment for user {user_id}: {amount} {currency_from} -> {currency_to}")
        
        start_time = datetime.utcnow()
        payment_record = None
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
            if not validate_amount(amount):
                raise PaymentError(f"Invalid amount: {amount}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_requisites = await self.user_repo.get_user_requisites(user_id)
            if not user_requisites:
                raise PaymentError("User requisites not found. Please set up requisites first using /–∏–∑–º–µ–Ω–∏—Ç—å_—Ä–µ–∫–≤–∏–∑–∏—Ç—ã")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
            if not validate_card_number(user_requisites.recipient_card):
                raise PaymentError(f"Invalid card number: {user_requisites.recipient_card}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            passport_data = await self.passport_repo.get_random_passport()
            if not passport_data:
                raise PaymentError("No passport data available for payment processing")
            
            logger.info(f"üîç FULL passport data content: {passport_data.to_dict()}")
            
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
            await self.passport_repo.mark_passport_used(passport_data.id)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            payment_record = PaymentHistory(
                user_id=user_id,
                amount=amount,
                currency_from=currency_from,
                currency_to=currency_to,
                status="pending"
            )
            
            payment_record = await self.payment_repo.create_payment(payment_record)
            payment_id = payment_record.id
            
            logger.info(f"üíæ Created payment record ID: {payment_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
            proxy = await self.proxy_manager.get_proxy()
            if proxy:
                logger.info(f"üåê Using proxy: {proxy['ip']}:{proxy['port']}")
                payment_record.proxy_used = f"{proxy['ip']}:{proxy['port']}"
            else:
                logger.warning("‚ö†Ô∏è No proxy available, using direct connection")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            automation_data = {
                'amount': amount,
                'currency_from': currency_from,
                'currency_to': currency_to,
                'recipient_card': user_requisites.recipient_card,
                'country': user_requisites.country,
                'bank': user_requisites.bank,
                'passport_data': passport_data.to_dict()
            }
            
            logger.info(f"üöÄ Starting browser automation...")
            logger.info(f"üìÑ Automation data: Country={user_requisites.country}, Bank={user_requisites.bank}, Card={user_requisites.recipient_card[:4]}****")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
            automation = MultiTransferAutomation(proxy=proxy, config=self.config.to_dict())
            result = await automation.create_payment(automation_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
            processing_time = int((datetime.utcnow() - start_time).total_seconds())
            
            if result.get('success'):
                payment_record.status = "success"
                payment_record.qr_code_url = result.get('qr_code_url')
                payment_record.payment_url = result.get('payment_url')
                payment_record.exchange_rate = result.get('exchange_rate')
                
                logger.info(f"‚úÖ Payment successful: {payment_id}")
                
            else:
                payment_record.status = "failed"
                payment_record.error_message = result.get('error', 'Unknown error')
                
                logger.error(f"‚ùå Payment failed: {payment_id} - {payment_record.error_message}")
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                if proxy and any(word in payment_record.error_message.lower() for word in ['blocked', 'banned', 'timeout', 'connection']):
                    await self.proxy_manager.mark_proxy_failed(proxy['ip'], proxy['port'])
            
            payment_record.processing_time = processing_time
            await self.payment_repo.update_payment(payment_record)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = {
                'payment_id': payment_id,
                'status': payment_record.status,
                'amount': amount,
                'currency_from': currency_from,
                'currency_to': currency_to,
                'processing_time': processing_time,
                'passport_used': f"{passport_data.surname} {passport_data.name}"
            }
            
            if payment_record.status == "success":
                response.update({
                    'qr_code_url': payment_record.qr_code_url,
                    'payment_url': payment_record.payment_url,
                    'exchange_rate': payment_record.exchange_rate
                })
            else:
                response['error'] = payment_record.error_message
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå Payment service error: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                if payment_record:
                    payment_record.status = "failed"
                    payment_record.error_message = str(e)
                    payment_record.processing_time = int((datetime.utcnow() - start_time).total_seconds())
                    await self.payment_repo.update_payment(payment_record)
            except Exception as update_error:
                logger.error(f"Failed to update payment record: {update_error}")
            
            raise PaymentError(f"Payment processing failed: {str(e)}")
    
    async def get_payment_status(self, payment_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID"""
        logger.info(f"üìä Getting payment status: {payment_id}")
        
        payment = await self.payment_repo.get_payment_by_id(payment_id)
        if not payment:
            return None
        
        return {
            'payment_id': payment.id,
            'status': payment.status,
            'amount': float(payment.amount) if payment.amount else 0,
            'currency_from': payment.currency_from,
            'currency_to': payment.currency_to,
            'qr_code_url': payment.qr_code_url,
            'payment_url': payment.payment_url,
            'error_message': payment.error_message,
            'processing_time': payment.processing_time,
            'created_at': payment.created_at.isoformat() if payment.created_at else None
        }
    
    async def get_user_payment_history(self, user_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üìú Getting payment history for user {user_id}")
        
        payments = await self.payment_repo.get_user_payments(user_id, limit)
        
        return [
            {
                'payment_id': payment.id,
                'amount': float(payment.amount) if payment.amount else 0,
                'status': payment.status,
                'currency_from': payment.currency_from,
                'currency_to': payment.currency_to,
                'created_at': payment.created_at.isoformat() if payment.created_at else None,
                'processing_time': payment.processing_time
            }
            for payment in payments
        ]