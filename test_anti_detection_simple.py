#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç anti-detection —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import asyncio
import logging
from web.anti_detection import HumanBehavior, StealthBrowser, BehavioralCamouflage
from web.browser.manager import BrowserManager
from core.config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_anti_detection_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç anti-detection –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    logger.info("üöÄ Starting simple anti-detection test...")
    
    try:
        config = get_config().to_dict()
        
        # –°–æ–∑–¥–∞–µ–º BrowserManager –ë–ï–ó –ø—Ä–æ–∫—Å–∏
        browser_manager = BrowserManager(config, proxy_manager=None)
        
        async with browser_manager:
            logger.info("üîÑ Starting browser WITHOUT proxy...")
            success = await browser_manager.start_browser(use_proxy=False)
            
            if not success:
                raise Exception("Failed to start browser")
            
            logger.info("‚úÖ Browser started successfully!")
            
            # –¢–µ—Å—Ç stealth verification
            logger.info("üîç Testing stealth effectiveness...")
            stealth_results = StealthBrowser.verify_stealth_setup(browser_manager.driver)
            logger.info(f"üéØ Stealth score: {stealth_results.get('stealth_score', 'unknown')}")
            logger.info(f"üéØ WebDriver hidden: {stealth_results.get('webdriver_hidden', False)}")
            logger.info(f"üéØ Chrome runtime hidden: {stealth_results.get('chrome_runtime_hidden', False)}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            logger.info("üåê Testing navigation to test site...")
            await browser_manager.navigate_to_url("https://httpbin.org/headers")
            await asyncio.sleep(3)
            
            # –¢–µ—Å—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            logger.info("üé≠ Testing human behavior simulation...")
            
            # –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç body –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            body_element = await browser_manager.find_element_safe("tag name", "body")
            if body_element:
                # –¢–µ—Å—Ç human scroll
                HumanBehavior.human_scroll(browser_manager.driver, 'down', 200)
                await asyncio.sleep(1)
                
                # –¢–µ—Å—Ç random mouse movement
                HumanBehavior.random_mouse_movement(browser_manager.driver)
                await asyncio.sleep(1)
                
                logger.info("‚úÖ Human behavior tests completed")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = "logs/anti_detection_test.png"
            await browser_manager.take_screenshot(screenshot_path)
            logger.info(f"üì∏ Screenshot saved: {screenshot_path}")
            
            logger.info("üéâ All anti-detection tests PASSED!")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Anti-detection test FAILED: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_anti_detection_simple())