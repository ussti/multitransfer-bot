#!/usr/bin/env python3
"""
Load passport data from Excel file to database
–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import pandas as pd
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.database.connection import AsyncSessionLocal, engine
from core.database.models import Base, PassportData
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def load_passport_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    logger.info("üîÑ Loading passport data from Excel...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ Database tables created/verified")
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        excel_file = Path(__file__).parent / "–ª—é–¥–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞.xlsx"
        if not excel_file.exists():
            logger.error(f"‚ùå Excel file not found: {excel_file}")
            return
        
        logger.info(f"üìä Reading Excel file: {excel_file}")
        df = pd.read_excel(excel_file, header=None)
        
        logger.info(f"üìã Found {len(df)} records in Excel")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            from sqlalchemy import select, func
            result = await session.execute(select(func.count(PassportData.id)))
            existing_count = result.scalar()
            
            if existing_count > 0:
                logger.info(f"‚ÑπÔ∏è Found {existing_count} existing passport records")
                response = input("ü§î Clear existing data and reload? (y/N): ")
                if response.lower() != 'y':
                    logger.info("‚ùå Cancelled by user")
                    return
                
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                from sqlalchemy import text
                await session.execute(text("DELETE FROM passport_data"))
                await session.commit()
                logger.info("üóëÔ∏è Cleared existing data")
            
            logger.info("üìù Loading passport records...")
            
            loaded_count = 0
            for index, row in df.iterrows():
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    full_name = str(row[0]).strip()
                    name_parts = full_name.split()
                    
                    if len(name_parts) < 3:
                        logger.warning(f"‚ö†Ô∏è Invalid name format in row {index}: {full_name}")
                        continue
                    
                    surname = name_parts[0]
                    name = name_parts[1] 
                    patronymic = name_parts[2]
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
                    birth_date = pd.to_datetime(row[1]).date()
                    
                    # –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    passport_series = str(row[2]).strip()
                    passport_number = str(row[3]).strip()
                    passport_date = pd.to_datetime(row[4]).date()
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    subdivision_code = str(row[5]).strip() if pd.notna(row[5]) else ""
                    issued_by = str(row[6]).strip() if pd.notna(row[6]) else ""
                    address = str(row[7]).strip() if pd.notna(row[7]) else ""
                    snils = str(row[8]).strip() if pd.notna(row[8]) else ""
                    birth_place = str(row[9]).strip() if pd.notna(row[9]) else ""
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–∞–∑–æ–≤—ã–π)
                    phone = f"+7{9000000000 + index}"
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞
                    city = "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if "–≥," in address:
                        city_part = address.split("–≥,")[1].split(",")[0].strip()
                        if city_part:
                            city = city_part
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                    passport_record = PassportData(
                        surname=surname,
                        name=name,
                        patronymic=patronymic,
                        birthdate=birth_date,
                        passport_series=passport_series,
                        passport_number=passport_number,
                        passport_date=passport_date,
                        passport_country='–†–æ—Å—Å–∏—è',
                        passport_issued_by=issued_by,
                        phone=phone,
                        address=address,
                        city=city
                    )
                    
                    session.add(passport_record)
                    loaded_count += 1
                    
                    # –ö–æ–º–º–∏—Ç–∏–º –ø–æ –±–∞—Ç—á–∞–º
                    if loaded_count % 100 == 0:
                        await session.commit()
                        logger.info(f"üíæ Loaded {loaded_count} records...")
                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error processing row {index}: {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
            await session.commit()
            logger.info(f"‚úÖ Successfully loaded {loaded_count} passport records")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            result = await session.execute(select(func.count(PassportData.id)))
            total_count = result.scalar()
            logger.info(f"üìä Total records in database: {total_count}")
        
        logger.info("üéØ Passport data loading completed")
        
    except Exception as e:
        logger.error(f"‚ùå Error during loading: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(load_passport_data())
